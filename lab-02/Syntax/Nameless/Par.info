-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Syntax/Nameless/Par.y
-----------------------------------------------------------------------------

state 33 contains 11 shift/reduce conflicts.
state 37 contains 11 shift/reduce conflicts.
state 38 contains 11 shift/reduce conflicts.
state 39 contains 11 shift/reduce conflicts.
state 55 contains 11 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pListExpr -> ListExpr                       (1)
	%start_pExpr -> Expr                               (2)
	%start_pType -> Type                               (3)
	%start_pType1 -> Type1                             (4)
	%start_pTyping -> Typing                           (5)
	Ident -> L_Ident                                   (6)
	Integer -> L_integ                                 (7)
	Program -> ListExpr                                (8)
	ListExpr ->                                        (9)
	ListExpr -> Expr                                   (10)
	ListExpr -> Expr ';' ListExpr                      (11)
	Expr -> 'true'                                     (12)
	Expr -> 'false'                                    (13)
	Expr -> 'if' Expr 'then' Expr 'else' Expr          (14)
	Expr -> '0'                                        (15)
	Expr -> 'succ' Expr                                (16)
	Expr -> 'pred' Expr                                (17)
	Expr -> 'iszero' Expr                              (18)
	Expr -> Ident                                      (19)
	Expr -> Integer                                    (20)
	Expr -> 'fun' '(' Type ')' '{' 'return' Expr '}'   (21)
	Expr -> Expr Expr                                  (22)
	Expr -> '(' Expr ')'                               (23)
	Type -> Type1 '->' Type                            (24)
	Type -> Type1                                      (25)
	Type1 -> 'Bool'                                    (26)
	Type1 -> 'Nat'                                     (27)
	Type1 -> '(' Type ')'                              (28)
	Typing -> Expr ':' Type                            (29)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'->'           { PT _ (TS _ 3) }
	'0'            { PT _ (TS _ 4) }
	':'            { PT _ (TS _ 5) }
	';'            { PT _ (TS _ 6) }
	'Bool'         { PT _ (TS _ 7) }
	'Nat'          { PT _ (TS _ 8) }
	'else'         { PT _ (TS _ 9) }
	'false'        { PT _ (TS _ 10) }
	'fun'          { PT _ (TS _ 11) }
	'if'           { PT _ (TS _ 12) }
	'iszero'       { PT _ (TS _ 13) }
	'pred'         { PT _ (TS _ 14) }
	'return'       { PT _ (TS _ 15) }
	'succ'         { PT _ (TS _ 16) }
	'then'         { PT _ (TS _ 17) }
	'true'         { PT _ (TS _ 18) }
	'{'            { PT _ (TS _ 19) }
	'}'            { PT _ (TS _ 20) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pListExpr rule  1
	%start_pExpr    rule  2
	%start_pType    rule  3
	%start_pType1   rule  4
	%start_pTyping  rule  5
	Ident           rule  6
	Integer         rule  7
	Program         rule  8
	ListExpr        rules 9, 10, 11
	Expr            rules 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23
	Type            rules 24, 25
	Type1           rules 26, 27, 28
	Typing          rule  29

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21
	%eof           reduce using rule 9

	Ident          goto state 8
	Integer        goto state 9
	Program        goto state 31
	ListExpr       goto state 32
	Expr           goto state 30

State 1

	%start_pListExpr -> . ListExpr                      (rule 1)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21
	%eof           reduce using rule 9

	Ident          goto state 8
	Integer        goto state 9
	ListExpr       goto state 29
	Expr           goto state 30

State 2

	%start_pExpr -> . Expr                              (rule 2)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 28

State 3

	%start_pType -> . Type                              (rule 3)

	'('            shift, and enter state 23
	'Bool'         shift, and enter state 24
	'Nat'          shift, and enter state 25

	Type           goto state 26
	Type1          goto state 27

State 4

	%start_pType1 -> . Type1                            (rule 4)

	'('            shift, and enter state 23
	'Bool'         shift, and enter state 24
	'Nat'          shift, and enter state 25

	Type1          goto state 22

State 5

	%start_pTyping -> . Typing                          (rule 5)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 10
	Typing         goto state 11

State 6

	Ident -> . L_Ident                                  (rule 6)

	L_Ident        shift, and enter state 7


State 7

	Ident -> L_Ident .                                  (rule 6)

	'('            reduce using rule 6
	')'            reduce using rule 6
	'0'            reduce using rule 6
	':'            reduce using rule 6
	';'            reduce using rule 6
	'else'         reduce using rule 6
	'false'        reduce using rule 6
	'fun'          reduce using rule 6
	'if'           reduce using rule 6
	'iszero'       reduce using rule 6
	'pred'         reduce using rule 6
	'succ'         reduce using rule 6
	'then'         reduce using rule 6
	'true'         reduce using rule 6
	'}'            reduce using rule 6
	L_Ident        reduce using rule 6
	L_integ        reduce using rule 6
	%eof           reduce using rule 6


State 8

	Expr -> Ident .                                     (rule 19)

	'('            reduce using rule 19
	')'            reduce using rule 19
	'0'            reduce using rule 19
	':'            reduce using rule 19
	';'            reduce using rule 19
	'else'         reduce using rule 19
	'false'        reduce using rule 19
	'fun'          reduce using rule 19
	'if'           reduce using rule 19
	'iszero'       reduce using rule 19
	'pred'         reduce using rule 19
	'succ'         reduce using rule 19
	'then'         reduce using rule 19
	'true'         reduce using rule 19
	'}'            reduce using rule 19
	L_Ident        reduce using rule 19
	L_integ        reduce using rule 19
	%eof           reduce using rule 19


State 9

	Expr -> Integer .                                   (rule 20)

	'('            reduce using rule 20
	')'            reduce using rule 20
	'0'            reduce using rule 20
	':'            reduce using rule 20
	';'            reduce using rule 20
	'else'         reduce using rule 20
	'false'        reduce using rule 20
	'fun'          reduce using rule 20
	'if'           reduce using rule 20
	'iszero'       reduce using rule 20
	'pred'         reduce using rule 20
	'succ'         reduce using rule 20
	'then'         reduce using rule 20
	'true'         reduce using rule 20
	'}'            reduce using rule 20
	L_Ident        reduce using rule 20
	L_integ        reduce using rule 20
	%eof           reduce using rule 20


State 10

	Expr -> Expr . Expr                                 (rule 22)
	Typing -> Expr . ':' Type                           (rule 29)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	':'            shift, and enter state 43
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 33

State 11

	%start_pTyping -> Typing .                          (rule 5)

	%eof           accept


State 12

	Expr -> '(' . Expr ')'                              (rule 23)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 42

State 13

	Expr -> '0' .                                       (rule 15)

	'('            reduce using rule 15
	')'            reduce using rule 15
	'0'            reduce using rule 15
	':'            reduce using rule 15
	';'            reduce using rule 15
	'else'         reduce using rule 15
	'false'        reduce using rule 15
	'fun'          reduce using rule 15
	'if'           reduce using rule 15
	'iszero'       reduce using rule 15
	'pred'         reduce using rule 15
	'succ'         reduce using rule 15
	'then'         reduce using rule 15
	'true'         reduce using rule 15
	'}'            reduce using rule 15
	L_Ident        reduce using rule 15
	L_integ        reduce using rule 15
	%eof           reduce using rule 15


State 14

	Expr -> 'false' .                                   (rule 13)

	'('            reduce using rule 13
	')'            reduce using rule 13
	'0'            reduce using rule 13
	':'            reduce using rule 13
	';'            reduce using rule 13
	'else'         reduce using rule 13
	'false'        reduce using rule 13
	'fun'          reduce using rule 13
	'if'           reduce using rule 13
	'iszero'       reduce using rule 13
	'pred'         reduce using rule 13
	'succ'         reduce using rule 13
	'then'         reduce using rule 13
	'true'         reduce using rule 13
	'}'            reduce using rule 13
	L_Ident        reduce using rule 13
	L_integ        reduce using rule 13
	%eof           reduce using rule 13


State 15

	Expr -> 'fun' . '(' Type ')' '{' 'return' Expr '}'    (rule 21)

	'('            shift, and enter state 41


State 16

	Expr -> 'if' . Expr 'then' Expr 'else' Expr         (rule 14)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 40

State 17

	Expr -> 'iszero' . Expr                             (rule 18)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 39

State 18

	Expr -> 'pred' . Expr                               (rule 17)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 38

State 19

	Expr -> 'succ' . Expr                               (rule 16)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 37

State 20

	Expr -> 'true' .                                    (rule 12)

	'('            reduce using rule 12
	')'            reduce using rule 12
	'0'            reduce using rule 12
	':'            reduce using rule 12
	';'            reduce using rule 12
	'else'         reduce using rule 12
	'false'        reduce using rule 12
	'fun'          reduce using rule 12
	'if'           reduce using rule 12
	'iszero'       reduce using rule 12
	'pred'         reduce using rule 12
	'succ'         reduce using rule 12
	'then'         reduce using rule 12
	'true'         reduce using rule 12
	'}'            reduce using rule 12
	L_Ident        reduce using rule 12
	L_integ        reduce using rule 12
	%eof           reduce using rule 12


State 21

	Integer -> L_integ .                                (rule 7)

	'('            reduce using rule 7
	')'            reduce using rule 7
	'0'            reduce using rule 7
	':'            reduce using rule 7
	';'            reduce using rule 7
	'else'         reduce using rule 7
	'false'        reduce using rule 7
	'fun'          reduce using rule 7
	'if'           reduce using rule 7
	'iszero'       reduce using rule 7
	'pred'         reduce using rule 7
	'succ'         reduce using rule 7
	'then'         reduce using rule 7
	'true'         reduce using rule 7
	'}'            reduce using rule 7
	L_Ident        reduce using rule 7
	L_integ        reduce using rule 7
	%eof           reduce using rule 7


State 22

	%start_pType1 -> Type1 .                            (rule 4)

	%eof           accept


State 23

	Type1 -> '(' . Type ')'                             (rule 28)

	'('            shift, and enter state 23
	'Bool'         shift, and enter state 24
	'Nat'          shift, and enter state 25

	Type           goto state 36
	Type1          goto state 27

State 24

	Type1 -> 'Bool' .                                   (rule 26)

	')'            reduce using rule 26
	'->'           reduce using rule 26
	%eof           reduce using rule 26


State 25

	Type1 -> 'Nat' .                                    (rule 27)

	')'            reduce using rule 27
	'->'           reduce using rule 27
	%eof           reduce using rule 27


State 26

	%start_pType -> Type .                              (rule 3)

	%eof           accept


State 27

	Type -> Type1 . '->' Type                           (rule 24)
	Type -> Type1 .                                     (rule 25)

	')'            reduce using rule 25
	'->'           shift, and enter state 35
	%eof           reduce using rule 25


State 28

	%start_pExpr -> Expr .                              (rule 2)
	Expr -> Expr . Expr                                 (rule 22)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21
	%eof           accept

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 33

State 29

	%start_pListExpr -> ListExpr .                      (rule 1)

	%eof           accept


State 30

	ListExpr -> Expr .                                  (rule 10)
	ListExpr -> Expr . ';' ListExpr                     (rule 11)
	Expr -> Expr . Expr                                 (rule 22)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	';'            shift, and enter state 34
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21
	%eof           reduce using rule 10

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 33

State 31

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 32

	Program -> ListExpr .                               (rule 8)

	%eof           reduce using rule 8


State 33

	Expr -> Expr . Expr                                 (rule 22)
	Expr -> Expr Expr .                                 (rule 22)

	'('            shift, and enter state 12
			(reduce using rule 22)

	')'            reduce using rule 22
	'0'            shift, and enter state 13
			(reduce using rule 22)

	':'            reduce using rule 22
	';'            reduce using rule 22
	'else'         reduce using rule 22
	'false'        shift, and enter state 14
			(reduce using rule 22)

	'fun'          shift, and enter state 15
			(reduce using rule 22)

	'if'           shift, and enter state 16
			(reduce using rule 22)

	'iszero'       shift, and enter state 17
			(reduce using rule 22)

	'pred'         shift, and enter state 18
			(reduce using rule 22)

	'succ'         shift, and enter state 19
			(reduce using rule 22)

	'then'         reduce using rule 22
	'true'         shift, and enter state 20
			(reduce using rule 22)

	'}'            reduce using rule 22
	L_Ident        shift, and enter state 7
			(reduce using rule 22)

	L_integ        shift, and enter state 21
			(reduce using rule 22)

	%eof           reduce using rule 22

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 33

State 34

	ListExpr -> Expr ';' . ListExpr                     (rule 11)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21
	%eof           reduce using rule 9

	Ident          goto state 8
	Integer        goto state 9
	ListExpr       goto state 50
	Expr           goto state 30

State 35

	Type -> Type1 '->' . Type                           (rule 24)

	'('            shift, and enter state 23
	'Bool'         shift, and enter state 24
	'Nat'          shift, and enter state 25

	Type           goto state 49
	Type1          goto state 27

State 36

	Type1 -> '(' Type . ')'                             (rule 28)

	')'            shift, and enter state 48


State 37

	Expr -> 'succ' Expr .                               (rule 16)
	Expr -> Expr . Expr                                 (rule 22)

	'('            shift, and enter state 12
			(reduce using rule 16)

	')'            reduce using rule 16
	'0'            shift, and enter state 13
			(reduce using rule 16)

	':'            reduce using rule 16
	';'            reduce using rule 16
	'else'         reduce using rule 16
	'false'        shift, and enter state 14
			(reduce using rule 16)

	'fun'          shift, and enter state 15
			(reduce using rule 16)

	'if'           shift, and enter state 16
			(reduce using rule 16)

	'iszero'       shift, and enter state 17
			(reduce using rule 16)

	'pred'         shift, and enter state 18
			(reduce using rule 16)

	'succ'         shift, and enter state 19
			(reduce using rule 16)

	'then'         reduce using rule 16
	'true'         shift, and enter state 20
			(reduce using rule 16)

	'}'            reduce using rule 16
	L_Ident        shift, and enter state 7
			(reduce using rule 16)

	L_integ        shift, and enter state 21
			(reduce using rule 16)

	%eof           reduce using rule 16

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 33

State 38

	Expr -> 'pred' Expr .                               (rule 17)
	Expr -> Expr . Expr                                 (rule 22)

	'('            shift, and enter state 12
			(reduce using rule 17)

	')'            reduce using rule 17
	'0'            shift, and enter state 13
			(reduce using rule 17)

	':'            reduce using rule 17
	';'            reduce using rule 17
	'else'         reduce using rule 17
	'false'        shift, and enter state 14
			(reduce using rule 17)

	'fun'          shift, and enter state 15
			(reduce using rule 17)

	'if'           shift, and enter state 16
			(reduce using rule 17)

	'iszero'       shift, and enter state 17
			(reduce using rule 17)

	'pred'         shift, and enter state 18
			(reduce using rule 17)

	'succ'         shift, and enter state 19
			(reduce using rule 17)

	'then'         reduce using rule 17
	'true'         shift, and enter state 20
			(reduce using rule 17)

	'}'            reduce using rule 17
	L_Ident        shift, and enter state 7
			(reduce using rule 17)

	L_integ        shift, and enter state 21
			(reduce using rule 17)

	%eof           reduce using rule 17

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 33

State 39

	Expr -> 'iszero' Expr .                             (rule 18)
	Expr -> Expr . Expr                                 (rule 22)

	'('            shift, and enter state 12
			(reduce using rule 18)

	')'            reduce using rule 18
	'0'            shift, and enter state 13
			(reduce using rule 18)

	':'            reduce using rule 18
	';'            reduce using rule 18
	'else'         reduce using rule 18
	'false'        shift, and enter state 14
			(reduce using rule 18)

	'fun'          shift, and enter state 15
			(reduce using rule 18)

	'if'           shift, and enter state 16
			(reduce using rule 18)

	'iszero'       shift, and enter state 17
			(reduce using rule 18)

	'pred'         shift, and enter state 18
			(reduce using rule 18)

	'succ'         shift, and enter state 19
			(reduce using rule 18)

	'then'         reduce using rule 18
	'true'         shift, and enter state 20
			(reduce using rule 18)

	'}'            reduce using rule 18
	L_Ident        shift, and enter state 7
			(reduce using rule 18)

	L_integ        shift, and enter state 21
			(reduce using rule 18)

	%eof           reduce using rule 18

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 33

State 40

	Expr -> 'if' Expr . 'then' Expr 'else' Expr         (rule 14)
	Expr -> Expr . Expr                                 (rule 22)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'then'         shift, and enter state 47
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 33

State 41

	Expr -> 'fun' '(' . Type ')' '{' 'return' Expr '}'    (rule 21)

	'('            shift, and enter state 23
	'Bool'         shift, and enter state 24
	'Nat'          shift, and enter state 25

	Type           goto state 46
	Type1          goto state 27

State 42

	Expr -> Expr . Expr                                 (rule 22)
	Expr -> '(' Expr . ')'                              (rule 23)

	'('            shift, and enter state 12
	')'            shift, and enter state 45
	'0'            shift, and enter state 13
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 33

State 43

	Typing -> Expr ':' . Type                           (rule 29)

	'('            shift, and enter state 23
	'Bool'         shift, and enter state 24
	'Nat'          shift, and enter state 25

	Type           goto state 44
	Type1          goto state 27

State 44

	Typing -> Expr ':' Type .                           (rule 29)

	%eof           reduce using rule 29


State 45

	Expr -> '(' Expr ')' .                              (rule 23)

	'('            reduce using rule 23
	')'            reduce using rule 23
	'0'            reduce using rule 23
	':'            reduce using rule 23
	';'            reduce using rule 23
	'else'         reduce using rule 23
	'false'        reduce using rule 23
	'fun'          reduce using rule 23
	'if'           reduce using rule 23
	'iszero'       reduce using rule 23
	'pred'         reduce using rule 23
	'succ'         reduce using rule 23
	'then'         reduce using rule 23
	'true'         reduce using rule 23
	'}'            reduce using rule 23
	L_Ident        reduce using rule 23
	L_integ        reduce using rule 23
	%eof           reduce using rule 23


State 46

	Expr -> 'fun' '(' Type . ')' '{' 'return' Expr '}'    (rule 21)

	')'            shift, and enter state 52


State 47

	Expr -> 'if' Expr 'then' . Expr 'else' Expr         (rule 14)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 51

State 48

	Type1 -> '(' Type ')' .                             (rule 28)

	')'            reduce using rule 28
	'->'           reduce using rule 28
	%eof           reduce using rule 28


State 49

	Type -> Type1 '->' Type .                           (rule 24)

	')'            reduce using rule 24
	%eof           reduce using rule 24


State 50

	ListExpr -> Expr ';' ListExpr .                     (rule 11)

	%eof           reduce using rule 11


State 51

	Expr -> 'if' Expr 'then' Expr . 'else' Expr         (rule 14)
	Expr -> Expr . Expr                                 (rule 22)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	'else'         shift, and enter state 54
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 33

State 52

	Expr -> 'fun' '(' Type ')' . '{' 'return' Expr '}'    (rule 21)

	'{'            shift, and enter state 53


State 53

	Expr -> 'fun' '(' Type ')' '{' . 'return' Expr '}'    (rule 21)

	'return'       shift, and enter state 56


State 54

	Expr -> 'if' Expr 'then' Expr 'else' . Expr         (rule 14)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 55

State 55

	Expr -> 'if' Expr 'then' Expr 'else' Expr .         (rule 14)
	Expr -> Expr . Expr                                 (rule 22)

	'('            shift, and enter state 12
			(reduce using rule 14)

	')'            reduce using rule 14
	'0'            shift, and enter state 13
			(reduce using rule 14)

	':'            reduce using rule 14
	';'            reduce using rule 14
	'else'         reduce using rule 14
	'false'        shift, and enter state 14
			(reduce using rule 14)

	'fun'          shift, and enter state 15
			(reduce using rule 14)

	'if'           shift, and enter state 16
			(reduce using rule 14)

	'iszero'       shift, and enter state 17
			(reduce using rule 14)

	'pred'         shift, and enter state 18
			(reduce using rule 14)

	'succ'         shift, and enter state 19
			(reduce using rule 14)

	'then'         reduce using rule 14
	'true'         shift, and enter state 20
			(reduce using rule 14)

	'}'            reduce using rule 14
	L_Ident        shift, and enter state 7
			(reduce using rule 14)

	L_integ        shift, and enter state 21
			(reduce using rule 14)

	%eof           reduce using rule 14

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 33

State 56

	Expr -> 'fun' '(' Type ')' '{' 'return' . Expr '}'    (rule 21)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 57

State 57

	Expr -> 'fun' '(' Type ')' '{' 'return' Expr . '}'    (rule 21)
	Expr -> Expr . Expr                                 (rule 22)

	'('            shift, and enter state 12
	'0'            shift, and enter state 13
	'false'        shift, and enter state 14
	'fun'          shift, and enter state 15
	'if'           shift, and enter state 16
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 20
	'}'            shift, and enter state 58
	L_Ident        shift, and enter state 7
	L_integ        shift, and enter state 21

	Ident          goto state 8
	Integer        goto state 9
	Expr           goto state 33

State 58

	Expr -> 'fun' '(' Type ')' '{' 'return' Expr '}' .    (rule 21)

	'('            reduce using rule 21
	')'            reduce using rule 21
	'0'            reduce using rule 21
	':'            reduce using rule 21
	';'            reduce using rule 21
	'else'         reduce using rule 21
	'false'        reduce using rule 21
	'fun'          reduce using rule 21
	'if'           reduce using rule 21
	'iszero'       reduce using rule 21
	'pred'         reduce using rule 21
	'succ'         reduce using rule 21
	'then'         reduce using rule 21
	'true'         reduce using rule 21
	'}'            reduce using rule 21
	L_Ident        reduce using rule 21
	L_integ        reduce using rule 21
	%eof           reduce using rule 21


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 30
Number of terminals: 22
Number of non-terminals: 14
Number of states: 59
