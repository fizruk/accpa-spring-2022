-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Syntax/Nameless/Par.y
-----------------------------------------------------------------------------

state 21 contains 11 shift/reduce conflicts.
state 23 contains 11 shift/reduce conflicts.
state 24 contains 11 shift/reduce conflicts.
state 25 contains 11 shift/reduce conflicts.
state 40 contains 11 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pListExpr -> ListExpr                       (1)
	%start_pExpr -> Expr                               (2)
	Ident -> L_Ident                                   (3)
	Integer -> L_integ                                 (4)
	Program -> ListExpr                                (5)
	ListExpr ->                                        (6)
	ListExpr -> Expr                                   (7)
	ListExpr -> Expr ';' ListExpr                      (8)
	Expr -> 'true'                                     (9)
	Expr -> 'false'                                    (10)
	Expr -> 'if' Expr 'then' Expr 'else' Expr          (11)
	Expr -> '0'                                        (12)
	Expr -> 'succ' Expr                                (13)
	Expr -> 'pred' Expr                                (14)
	Expr -> 'iszero' Expr                              (15)
	Expr -> '[' Integer ']'                            (16)
	Expr -> Ident                                      (17)
	Expr -> 'fun' '(' ')' '{' 'return' Expr '}'        (18)
	Expr -> Expr Expr                                  (19)
	Expr -> '(' Expr ')'                               (20)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'0'            { PT _ (TS _ 3) }
	';'            { PT _ (TS _ 4) }
	'['            { PT _ (TS _ 5) }
	']'            { PT _ (TS _ 6) }
	'else'         { PT _ (TS _ 7) }
	'false'        { PT _ (TS _ 8) }
	'fun'          { PT _ (TS _ 9) }
	'if'           { PT _ (TS _ 10) }
	'iszero'       { PT _ (TS _ 11) }
	'pred'         { PT _ (TS _ 12) }
	'return'       { PT _ (TS _ 13) }
	'succ'         { PT _ (TS _ 14) }
	'then'         { PT _ (TS _ 15) }
	'true'         { PT _ (TS _ 16) }
	'{'            { PT _ (TS _ 17) }
	'}'            { PT _ (TS _ 18) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pListExpr rule  1
	%start_pExpr    rule  2
	Ident           rule  3
	Integer         rule  4
	Program         rule  5
	ListExpr        rules 6, 7, 8
	Expr            rules 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'['            shift, and enter state 9
	'false'        shift, and enter state 10
	'fun'          shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'pred'         shift, and enter state 14
	'succ'         shift, and enter state 15
	'true'         shift, and enter state 16
	L_Ident        shift, and enter state 4
	%eof           reduce using rule 6

	Ident          goto state 5
	Program        goto state 19
	ListExpr       goto state 20
	Expr           goto state 18

State 1

	%start_pListExpr -> . ListExpr                      (rule 1)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'['            shift, and enter state 9
	'false'        shift, and enter state 10
	'fun'          shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'pred'         shift, and enter state 14
	'succ'         shift, and enter state 15
	'true'         shift, and enter state 16
	L_Ident        shift, and enter state 4
	%eof           reduce using rule 6

	Ident          goto state 5
	ListExpr       goto state 17
	Expr           goto state 18

State 2

	%start_pExpr -> . Expr                              (rule 2)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'['            shift, and enter state 9
	'false'        shift, and enter state 10
	'fun'          shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'pred'         shift, and enter state 14
	'succ'         shift, and enter state 15
	'true'         shift, and enter state 16
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 6

State 3

	Ident -> . L_Ident                                  (rule 3)

	L_Ident        shift, and enter state 4


State 4

	Ident -> L_Ident .                                  (rule 3)

	'('            reduce using rule 3
	')'            reduce using rule 3
	'0'            reduce using rule 3
	';'            reduce using rule 3
	'['            reduce using rule 3
	'else'         reduce using rule 3
	'false'        reduce using rule 3
	'fun'          reduce using rule 3
	'if'           reduce using rule 3
	'iszero'       reduce using rule 3
	'pred'         reduce using rule 3
	'succ'         reduce using rule 3
	'then'         reduce using rule 3
	'true'         reduce using rule 3
	'}'            reduce using rule 3
	L_Ident        reduce using rule 3
	%eof           reduce using rule 3


State 5

	Expr -> Ident .                                     (rule 17)

	'('            reduce using rule 17
	')'            reduce using rule 17
	'0'            reduce using rule 17
	';'            reduce using rule 17
	'['            reduce using rule 17
	'else'         reduce using rule 17
	'false'        reduce using rule 17
	'fun'          reduce using rule 17
	'if'           reduce using rule 17
	'iszero'       reduce using rule 17
	'pred'         reduce using rule 17
	'succ'         reduce using rule 17
	'then'         reduce using rule 17
	'true'         reduce using rule 17
	'}'            reduce using rule 17
	L_Ident        reduce using rule 17
	%eof           reduce using rule 17


State 6

	%start_pExpr -> Expr .                              (rule 2)
	Expr -> Expr . Expr                                 (rule 19)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'['            shift, and enter state 9
	'false'        shift, and enter state 10
	'fun'          shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'pred'         shift, and enter state 14
	'succ'         shift, and enter state 15
	'true'         shift, and enter state 16
	L_Ident        shift, and enter state 4
	%eof           accept

	Ident          goto state 5
	Expr           goto state 21

State 7

	Expr -> '(' . Expr ')'                              (rule 20)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'['            shift, and enter state 9
	'false'        shift, and enter state 10
	'fun'          shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'pred'         shift, and enter state 14
	'succ'         shift, and enter state 15
	'true'         shift, and enter state 16
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 30

State 8

	Expr -> '0' .                                       (rule 12)

	'('            reduce using rule 12
	')'            reduce using rule 12
	'0'            reduce using rule 12
	';'            reduce using rule 12
	'['            reduce using rule 12
	'else'         reduce using rule 12
	'false'        reduce using rule 12
	'fun'          reduce using rule 12
	'if'           reduce using rule 12
	'iszero'       reduce using rule 12
	'pred'         reduce using rule 12
	'succ'         reduce using rule 12
	'then'         reduce using rule 12
	'true'         reduce using rule 12
	'}'            reduce using rule 12
	L_Ident        reduce using rule 12
	%eof           reduce using rule 12


State 9

	Expr -> '[' . Integer ']'                           (rule 16)

	L_integ        shift, and enter state 29

	Integer        goto state 28

State 10

	Expr -> 'false' .                                   (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10
	'0'            reduce using rule 10
	';'            reduce using rule 10
	'['            reduce using rule 10
	'else'         reduce using rule 10
	'false'        reduce using rule 10
	'fun'          reduce using rule 10
	'if'           reduce using rule 10
	'iszero'       reduce using rule 10
	'pred'         reduce using rule 10
	'succ'         reduce using rule 10
	'then'         reduce using rule 10
	'true'         reduce using rule 10
	'}'            reduce using rule 10
	L_Ident        reduce using rule 10
	%eof           reduce using rule 10


State 11

	Expr -> 'fun' . '(' ')' '{' 'return' Expr '}'       (rule 18)

	'('            shift, and enter state 27


State 12

	Expr -> 'if' . Expr 'then' Expr 'else' Expr         (rule 11)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'['            shift, and enter state 9
	'false'        shift, and enter state 10
	'fun'          shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'pred'         shift, and enter state 14
	'succ'         shift, and enter state 15
	'true'         shift, and enter state 16
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 26

State 13

	Expr -> 'iszero' . Expr                             (rule 15)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'['            shift, and enter state 9
	'false'        shift, and enter state 10
	'fun'          shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'pred'         shift, and enter state 14
	'succ'         shift, and enter state 15
	'true'         shift, and enter state 16
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 25

State 14

	Expr -> 'pred' . Expr                               (rule 14)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'['            shift, and enter state 9
	'false'        shift, and enter state 10
	'fun'          shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'pred'         shift, and enter state 14
	'succ'         shift, and enter state 15
	'true'         shift, and enter state 16
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 24

State 15

	Expr -> 'succ' . Expr                               (rule 13)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'['            shift, and enter state 9
	'false'        shift, and enter state 10
	'fun'          shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'pred'         shift, and enter state 14
	'succ'         shift, and enter state 15
	'true'         shift, and enter state 16
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 23

State 16

	Expr -> 'true' .                                    (rule 9)

	'('            reduce using rule 9
	')'            reduce using rule 9
	'0'            reduce using rule 9
	';'            reduce using rule 9
	'['            reduce using rule 9
	'else'         reduce using rule 9
	'false'        reduce using rule 9
	'fun'          reduce using rule 9
	'if'           reduce using rule 9
	'iszero'       reduce using rule 9
	'pred'         reduce using rule 9
	'succ'         reduce using rule 9
	'then'         reduce using rule 9
	'true'         reduce using rule 9
	'}'            reduce using rule 9
	L_Ident        reduce using rule 9
	%eof           reduce using rule 9


State 17

	%start_pListExpr -> ListExpr .                      (rule 1)

	%eof           accept


State 18

	ListExpr -> Expr .                                  (rule 7)
	ListExpr -> Expr . ';' ListExpr                     (rule 8)
	Expr -> Expr . Expr                                 (rule 19)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	';'            shift, and enter state 22
	'['            shift, and enter state 9
	'false'        shift, and enter state 10
	'fun'          shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'pred'         shift, and enter state 14
	'succ'         shift, and enter state 15
	'true'         shift, and enter state 16
	L_Ident        shift, and enter state 4
	%eof           reduce using rule 7

	Ident          goto state 5
	Expr           goto state 21

State 19

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 20

	Program -> ListExpr .                               (rule 5)

	%eof           reduce using rule 5


State 21

	Expr -> Expr . Expr                                 (rule 19)
	Expr -> Expr Expr .                                 (rule 19)

	'('            shift, and enter state 7
			(reduce using rule 19)

	')'            reduce using rule 19
	'0'            shift, and enter state 8
			(reduce using rule 19)

	';'            reduce using rule 19
	'['            shift, and enter state 9
			(reduce using rule 19)

	'else'         reduce using rule 19
	'false'        shift, and enter state 10
			(reduce using rule 19)

	'fun'          shift, and enter state 11
			(reduce using rule 19)

	'if'           shift, and enter state 12
			(reduce using rule 19)

	'iszero'       shift, and enter state 13
			(reduce using rule 19)

	'pred'         shift, and enter state 14
			(reduce using rule 19)

	'succ'         shift, and enter state 15
			(reduce using rule 19)

	'then'         reduce using rule 19
	'true'         shift, and enter state 16
			(reduce using rule 19)

	'}'            reduce using rule 19
	L_Ident        shift, and enter state 4
			(reduce using rule 19)

	%eof           reduce using rule 19

	Ident          goto state 5
	Expr           goto state 21

State 22

	ListExpr -> Expr ';' . ListExpr                     (rule 8)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'['            shift, and enter state 9
	'false'        shift, and enter state 10
	'fun'          shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'pred'         shift, and enter state 14
	'succ'         shift, and enter state 15
	'true'         shift, and enter state 16
	L_Ident        shift, and enter state 4
	%eof           reduce using rule 6

	Ident          goto state 5
	ListExpr       goto state 35
	Expr           goto state 18

State 23

	Expr -> 'succ' Expr .                               (rule 13)
	Expr -> Expr . Expr                                 (rule 19)

	'('            shift, and enter state 7
			(reduce using rule 13)

	')'            reduce using rule 13
	'0'            shift, and enter state 8
			(reduce using rule 13)

	';'            reduce using rule 13
	'['            shift, and enter state 9
			(reduce using rule 13)

	'else'         reduce using rule 13
	'false'        shift, and enter state 10
			(reduce using rule 13)

	'fun'          shift, and enter state 11
			(reduce using rule 13)

	'if'           shift, and enter state 12
			(reduce using rule 13)

	'iszero'       shift, and enter state 13
			(reduce using rule 13)

	'pred'         shift, and enter state 14
			(reduce using rule 13)

	'succ'         shift, and enter state 15
			(reduce using rule 13)

	'then'         reduce using rule 13
	'true'         shift, and enter state 16
			(reduce using rule 13)

	'}'            reduce using rule 13
	L_Ident        shift, and enter state 4
			(reduce using rule 13)

	%eof           reduce using rule 13

	Ident          goto state 5
	Expr           goto state 21

State 24

	Expr -> 'pred' Expr .                               (rule 14)
	Expr -> Expr . Expr                                 (rule 19)

	'('            shift, and enter state 7
			(reduce using rule 14)

	')'            reduce using rule 14
	'0'            shift, and enter state 8
			(reduce using rule 14)

	';'            reduce using rule 14
	'['            shift, and enter state 9
			(reduce using rule 14)

	'else'         reduce using rule 14
	'false'        shift, and enter state 10
			(reduce using rule 14)

	'fun'          shift, and enter state 11
			(reduce using rule 14)

	'if'           shift, and enter state 12
			(reduce using rule 14)

	'iszero'       shift, and enter state 13
			(reduce using rule 14)

	'pred'         shift, and enter state 14
			(reduce using rule 14)

	'succ'         shift, and enter state 15
			(reduce using rule 14)

	'then'         reduce using rule 14
	'true'         shift, and enter state 16
			(reduce using rule 14)

	'}'            reduce using rule 14
	L_Ident        shift, and enter state 4
			(reduce using rule 14)

	%eof           reduce using rule 14

	Ident          goto state 5
	Expr           goto state 21

State 25

	Expr -> 'iszero' Expr .                             (rule 15)
	Expr -> Expr . Expr                                 (rule 19)

	'('            shift, and enter state 7
			(reduce using rule 15)

	')'            reduce using rule 15
	'0'            shift, and enter state 8
			(reduce using rule 15)

	';'            reduce using rule 15
	'['            shift, and enter state 9
			(reduce using rule 15)

	'else'         reduce using rule 15
	'false'        shift, and enter state 10
			(reduce using rule 15)

	'fun'          shift, and enter state 11
			(reduce using rule 15)

	'if'           shift, and enter state 12
			(reduce using rule 15)

	'iszero'       shift, and enter state 13
			(reduce using rule 15)

	'pred'         shift, and enter state 14
			(reduce using rule 15)

	'succ'         shift, and enter state 15
			(reduce using rule 15)

	'then'         reduce using rule 15
	'true'         shift, and enter state 16
			(reduce using rule 15)

	'}'            reduce using rule 15
	L_Ident        shift, and enter state 4
			(reduce using rule 15)

	%eof           reduce using rule 15

	Ident          goto state 5
	Expr           goto state 21

State 26

	Expr -> 'if' Expr . 'then' Expr 'else' Expr         (rule 11)
	Expr -> Expr . Expr                                 (rule 19)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'['            shift, and enter state 9
	'false'        shift, and enter state 10
	'fun'          shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'pred'         shift, and enter state 14
	'succ'         shift, and enter state 15
	'then'         shift, and enter state 34
	'true'         shift, and enter state 16
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 21

State 27

	Expr -> 'fun' '(' . ')' '{' 'return' Expr '}'       (rule 18)

	')'            shift, and enter state 33


State 28

	Expr -> '[' Integer . ']'                           (rule 16)

	']'            shift, and enter state 32


State 29

	Integer -> L_integ .                                (rule 4)

	']'            reduce using rule 4


State 30

	Expr -> Expr . Expr                                 (rule 19)
	Expr -> '(' Expr . ')'                              (rule 20)

	'('            shift, and enter state 7
	')'            shift, and enter state 31
	'0'            shift, and enter state 8
	'['            shift, and enter state 9
	'false'        shift, and enter state 10
	'fun'          shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'pred'         shift, and enter state 14
	'succ'         shift, and enter state 15
	'true'         shift, and enter state 16
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 21

State 31

	Expr -> '(' Expr ')' .                              (rule 20)

	'('            reduce using rule 20
	')'            reduce using rule 20
	'0'            reduce using rule 20
	';'            reduce using rule 20
	'['            reduce using rule 20
	'else'         reduce using rule 20
	'false'        reduce using rule 20
	'fun'          reduce using rule 20
	'if'           reduce using rule 20
	'iszero'       reduce using rule 20
	'pred'         reduce using rule 20
	'succ'         reduce using rule 20
	'then'         reduce using rule 20
	'true'         reduce using rule 20
	'}'            reduce using rule 20
	L_Ident        reduce using rule 20
	%eof           reduce using rule 20


State 32

	Expr -> '[' Integer ']' .                           (rule 16)

	'('            reduce using rule 16
	')'            reduce using rule 16
	'0'            reduce using rule 16
	';'            reduce using rule 16
	'['            reduce using rule 16
	'else'         reduce using rule 16
	'false'        reduce using rule 16
	'fun'          reduce using rule 16
	'if'           reduce using rule 16
	'iszero'       reduce using rule 16
	'pred'         reduce using rule 16
	'succ'         reduce using rule 16
	'then'         reduce using rule 16
	'true'         reduce using rule 16
	'}'            reduce using rule 16
	L_Ident        reduce using rule 16
	%eof           reduce using rule 16


State 33

	Expr -> 'fun' '(' ')' . '{' 'return' Expr '}'       (rule 18)

	'{'            shift, and enter state 37


State 34

	Expr -> 'if' Expr 'then' . Expr 'else' Expr         (rule 11)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'['            shift, and enter state 9
	'false'        shift, and enter state 10
	'fun'          shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'pred'         shift, and enter state 14
	'succ'         shift, and enter state 15
	'true'         shift, and enter state 16
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 36

State 35

	ListExpr -> Expr ';' ListExpr .                     (rule 8)

	%eof           reduce using rule 8


State 36

	Expr -> 'if' Expr 'then' Expr . 'else' Expr         (rule 11)
	Expr -> Expr . Expr                                 (rule 19)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'['            shift, and enter state 9
	'else'         shift, and enter state 39
	'false'        shift, and enter state 10
	'fun'          shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'pred'         shift, and enter state 14
	'succ'         shift, and enter state 15
	'true'         shift, and enter state 16
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 21

State 37

	Expr -> 'fun' '(' ')' '{' . 'return' Expr '}'       (rule 18)

	'return'       shift, and enter state 38


State 38

	Expr -> 'fun' '(' ')' '{' 'return' . Expr '}'       (rule 18)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'['            shift, and enter state 9
	'false'        shift, and enter state 10
	'fun'          shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'pred'         shift, and enter state 14
	'succ'         shift, and enter state 15
	'true'         shift, and enter state 16
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 41

State 39

	Expr -> 'if' Expr 'then' Expr 'else' . Expr         (rule 11)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'['            shift, and enter state 9
	'false'        shift, and enter state 10
	'fun'          shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'pred'         shift, and enter state 14
	'succ'         shift, and enter state 15
	'true'         shift, and enter state 16
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 40

State 40

	Expr -> 'if' Expr 'then' Expr 'else' Expr .         (rule 11)
	Expr -> Expr . Expr                                 (rule 19)

	'('            shift, and enter state 7
			(reduce using rule 11)

	')'            reduce using rule 11
	'0'            shift, and enter state 8
			(reduce using rule 11)

	';'            reduce using rule 11
	'['            shift, and enter state 9
			(reduce using rule 11)

	'else'         reduce using rule 11
	'false'        shift, and enter state 10
			(reduce using rule 11)

	'fun'          shift, and enter state 11
			(reduce using rule 11)

	'if'           shift, and enter state 12
			(reduce using rule 11)

	'iszero'       shift, and enter state 13
			(reduce using rule 11)

	'pred'         shift, and enter state 14
			(reduce using rule 11)

	'succ'         shift, and enter state 15
			(reduce using rule 11)

	'then'         reduce using rule 11
	'true'         shift, and enter state 16
			(reduce using rule 11)

	'}'            reduce using rule 11
	L_Ident        shift, and enter state 4
			(reduce using rule 11)

	%eof           reduce using rule 11

	Ident          goto state 5
	Expr           goto state 21

State 41

	Expr -> 'fun' '(' ')' '{' 'return' Expr . '}'       (rule 18)
	Expr -> Expr . Expr                                 (rule 19)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'['            shift, and enter state 9
	'false'        shift, and enter state 10
	'fun'          shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'pred'         shift, and enter state 14
	'succ'         shift, and enter state 15
	'true'         shift, and enter state 16
	'}'            shift, and enter state 42
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 21

State 42

	Expr -> 'fun' '(' ')' '{' 'return' Expr '}' .       (rule 18)

	'('            reduce using rule 18
	')'            reduce using rule 18
	'0'            reduce using rule 18
	';'            reduce using rule 18
	'['            reduce using rule 18
	'else'         reduce using rule 18
	'false'        reduce using rule 18
	'fun'          reduce using rule 18
	'if'           reduce using rule 18
	'iszero'       reduce using rule 18
	'pred'         reduce using rule 18
	'succ'         reduce using rule 18
	'then'         reduce using rule 18
	'true'         reduce using rule 18
	'}'            reduce using rule 18
	L_Ident        reduce using rule 18
	%eof           reduce using rule 18


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 21
Number of terminals: 20
Number of non-terminals: 8
Number of states: 43
