-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Syntax/Nameless/Par.y
-----------------------------------------------------------------------------

state 15 contains 11 shift/reduce conflicts.
state 16 contains 11 shift/reduce conflicts.
state 17 contains 11 shift/reduce conflicts.
state 23 contains 11 shift/reduce conflicts.
state 32 contains 11 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExpr -> Expr                               (0)
	Ident -> L_Ident                                   (1)
	Integer -> L_integ                                 (2)
	Expr -> 'true'                                     (3)
	Expr -> 'false'                                    (4)
	Expr -> 'if' Expr 'then' Expr 'else' Expr          (5)
	Expr -> '0'                                        (6)
	Expr -> 'succ' Expr                                (7)
	Expr -> 'pred' Expr                                (8)
	Expr -> 'iszero' Expr                              (9)
	Expr -> Ident                                      (10)
	Expr -> '[' Integer ']'                            (11)
	Expr -> 'fun' '{' 'return' Expr '}'                (12)
	Expr -> Expr Expr                                  (13)
	Expr -> '(' Expr ')'                               (14)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'0'            { PT _ (TS _ 3) }
	'['            { PT _ (TS _ 4) }
	']'            { PT _ (TS _ 5) }
	'else'         { PT _ (TS _ 6) }
	'false'        { PT _ (TS _ 7) }
	'fun'          { PT _ (TS _ 8) }
	'if'           { PT _ (TS _ 9) }
	'iszero'       { PT _ (TS _ 10) }
	'pred'         { PT _ (TS _ 11) }
	'return'       { PT _ (TS _ 12) }
	'succ'         { PT _ (TS _ 13) }
	'then'         { PT _ (TS _ 14) }
	'true'         { PT _ (TS _ 15) }
	'{'            { PT _ (TS _ 16) }
	'}'            { PT _ (TS _ 17) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExpr    rule  0
	Ident           rule  1
	Integer         rule  2
	Expr            rules 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pExpr -> . Expr                              (rule 0)

	'('            shift, and enter state 5
	'0'            shift, and enter state 6
	'['            shift, and enter state 7
	'false'        shift, and enter state 8
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 10
	'iszero'       shift, and enter state 11
	'pred'         shift, and enter state 12
	'succ'         shift, and enter state 13
	'true'         shift, and enter state 14
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 4

State 1

	Ident -> . L_Ident                                  (rule 1)

	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	'('            reduce using rule 1
	')'            reduce using rule 1
	'0'            reduce using rule 1
	'['            reduce using rule 1
	'else'         reduce using rule 1
	'false'        reduce using rule 1
	'fun'          reduce using rule 1
	'if'           reduce using rule 1
	'iszero'       reduce using rule 1
	'pred'         reduce using rule 1
	'succ'         reduce using rule 1
	'then'         reduce using rule 1
	'true'         reduce using rule 1
	'}'            reduce using rule 1
	L_Ident        reduce using rule 1
	%eof           reduce using rule 1


State 3

	Expr -> Ident .                                     (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10
	'0'            reduce using rule 10
	'['            reduce using rule 10
	'else'         reduce using rule 10
	'false'        reduce using rule 10
	'fun'          reduce using rule 10
	'if'           reduce using rule 10
	'iszero'       reduce using rule 10
	'pred'         reduce using rule 10
	'succ'         reduce using rule 10
	'then'         reduce using rule 10
	'true'         reduce using rule 10
	'}'            reduce using rule 10
	L_Ident        reduce using rule 10
	%eof           reduce using rule 10


State 4

	%start_pExpr -> Expr .                              (rule 0)
	Expr -> Expr . Expr                                 (rule 13)

	'('            shift, and enter state 5
	'0'            shift, and enter state 6
	'['            shift, and enter state 7
	'false'        shift, and enter state 8
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 10
	'iszero'       shift, and enter state 11
	'pred'         shift, and enter state 12
	'succ'         shift, and enter state 13
	'true'         shift, and enter state 14
	L_Ident        shift, and enter state 2
	%eof           accept

	Ident          goto state 3
	Expr           goto state 23

State 5

	Expr -> '(' . Expr ')'                              (rule 14)

	'('            shift, and enter state 5
	'0'            shift, and enter state 6
	'['            shift, and enter state 7
	'false'        shift, and enter state 8
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 10
	'iszero'       shift, and enter state 11
	'pred'         shift, and enter state 12
	'succ'         shift, and enter state 13
	'true'         shift, and enter state 14
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 22

State 6

	Expr -> '0' .                                       (rule 6)

	'('            reduce using rule 6
	')'            reduce using rule 6
	'0'            reduce using rule 6
	'['            reduce using rule 6
	'else'         reduce using rule 6
	'false'        reduce using rule 6
	'fun'          reduce using rule 6
	'if'           reduce using rule 6
	'iszero'       reduce using rule 6
	'pred'         reduce using rule 6
	'succ'         reduce using rule 6
	'then'         reduce using rule 6
	'true'         reduce using rule 6
	'}'            reduce using rule 6
	L_Ident        reduce using rule 6
	%eof           reduce using rule 6


State 7

	Expr -> '[' . Integer ']'                           (rule 11)

	L_integ        shift, and enter state 21

	Integer        goto state 20

State 8

	Expr -> 'false' .                                   (rule 4)

	'('            reduce using rule 4
	')'            reduce using rule 4
	'0'            reduce using rule 4
	'['            reduce using rule 4
	'else'         reduce using rule 4
	'false'        reduce using rule 4
	'fun'          reduce using rule 4
	'if'           reduce using rule 4
	'iszero'       reduce using rule 4
	'pred'         reduce using rule 4
	'succ'         reduce using rule 4
	'then'         reduce using rule 4
	'true'         reduce using rule 4
	'}'            reduce using rule 4
	L_Ident        reduce using rule 4
	%eof           reduce using rule 4


State 9

	Expr -> 'fun' . '{' 'return' Expr '}'               (rule 12)

	'{'            shift, and enter state 19


State 10

	Expr -> 'if' . Expr 'then' Expr 'else' Expr         (rule 5)

	'('            shift, and enter state 5
	'0'            shift, and enter state 6
	'['            shift, and enter state 7
	'false'        shift, and enter state 8
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 10
	'iszero'       shift, and enter state 11
	'pred'         shift, and enter state 12
	'succ'         shift, and enter state 13
	'true'         shift, and enter state 14
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 18

State 11

	Expr -> 'iszero' . Expr                             (rule 9)

	'('            shift, and enter state 5
	'0'            shift, and enter state 6
	'['            shift, and enter state 7
	'false'        shift, and enter state 8
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 10
	'iszero'       shift, and enter state 11
	'pred'         shift, and enter state 12
	'succ'         shift, and enter state 13
	'true'         shift, and enter state 14
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 17

State 12

	Expr -> 'pred' . Expr                               (rule 8)

	'('            shift, and enter state 5
	'0'            shift, and enter state 6
	'['            shift, and enter state 7
	'false'        shift, and enter state 8
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 10
	'iszero'       shift, and enter state 11
	'pred'         shift, and enter state 12
	'succ'         shift, and enter state 13
	'true'         shift, and enter state 14
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 16

State 13

	Expr -> 'succ' . Expr                               (rule 7)

	'('            shift, and enter state 5
	'0'            shift, and enter state 6
	'['            shift, and enter state 7
	'false'        shift, and enter state 8
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 10
	'iszero'       shift, and enter state 11
	'pred'         shift, and enter state 12
	'succ'         shift, and enter state 13
	'true'         shift, and enter state 14
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 15

State 14

	Expr -> 'true' .                                    (rule 3)

	'('            reduce using rule 3
	')'            reduce using rule 3
	'0'            reduce using rule 3
	'['            reduce using rule 3
	'else'         reduce using rule 3
	'false'        reduce using rule 3
	'fun'          reduce using rule 3
	'if'           reduce using rule 3
	'iszero'       reduce using rule 3
	'pred'         reduce using rule 3
	'succ'         reduce using rule 3
	'then'         reduce using rule 3
	'true'         reduce using rule 3
	'}'            reduce using rule 3
	L_Ident        reduce using rule 3
	%eof           reduce using rule 3


State 15

	Expr -> 'succ' Expr .                               (rule 7)
	Expr -> Expr . Expr                                 (rule 13)

	'('            shift, and enter state 5
			(reduce using rule 7)

	')'            reduce using rule 7
	'0'            shift, and enter state 6
			(reduce using rule 7)

	'['            shift, and enter state 7
			(reduce using rule 7)

	'else'         reduce using rule 7
	'false'        shift, and enter state 8
			(reduce using rule 7)

	'fun'          shift, and enter state 9
			(reduce using rule 7)

	'if'           shift, and enter state 10
			(reduce using rule 7)

	'iszero'       shift, and enter state 11
			(reduce using rule 7)

	'pred'         shift, and enter state 12
			(reduce using rule 7)

	'succ'         shift, and enter state 13
			(reduce using rule 7)

	'then'         reduce using rule 7
	'true'         shift, and enter state 14
			(reduce using rule 7)

	'}'            reduce using rule 7
	L_Ident        shift, and enter state 2
			(reduce using rule 7)

	%eof           reduce using rule 7

	Ident          goto state 3
	Expr           goto state 23

State 16

	Expr -> 'pred' Expr .                               (rule 8)
	Expr -> Expr . Expr                                 (rule 13)

	'('            shift, and enter state 5
			(reduce using rule 8)

	')'            reduce using rule 8
	'0'            shift, and enter state 6
			(reduce using rule 8)

	'['            shift, and enter state 7
			(reduce using rule 8)

	'else'         reduce using rule 8
	'false'        shift, and enter state 8
			(reduce using rule 8)

	'fun'          shift, and enter state 9
			(reduce using rule 8)

	'if'           shift, and enter state 10
			(reduce using rule 8)

	'iszero'       shift, and enter state 11
			(reduce using rule 8)

	'pred'         shift, and enter state 12
			(reduce using rule 8)

	'succ'         shift, and enter state 13
			(reduce using rule 8)

	'then'         reduce using rule 8
	'true'         shift, and enter state 14
			(reduce using rule 8)

	'}'            reduce using rule 8
	L_Ident        shift, and enter state 2
			(reduce using rule 8)

	%eof           reduce using rule 8

	Ident          goto state 3
	Expr           goto state 23

State 17

	Expr -> 'iszero' Expr .                             (rule 9)
	Expr -> Expr . Expr                                 (rule 13)

	'('            shift, and enter state 5
			(reduce using rule 9)

	')'            reduce using rule 9
	'0'            shift, and enter state 6
			(reduce using rule 9)

	'['            shift, and enter state 7
			(reduce using rule 9)

	'else'         reduce using rule 9
	'false'        shift, and enter state 8
			(reduce using rule 9)

	'fun'          shift, and enter state 9
			(reduce using rule 9)

	'if'           shift, and enter state 10
			(reduce using rule 9)

	'iszero'       shift, and enter state 11
			(reduce using rule 9)

	'pred'         shift, and enter state 12
			(reduce using rule 9)

	'succ'         shift, and enter state 13
			(reduce using rule 9)

	'then'         reduce using rule 9
	'true'         shift, and enter state 14
			(reduce using rule 9)

	'}'            reduce using rule 9
	L_Ident        shift, and enter state 2
			(reduce using rule 9)

	%eof           reduce using rule 9

	Ident          goto state 3
	Expr           goto state 23

State 18

	Expr -> 'if' Expr . 'then' Expr 'else' Expr         (rule 5)
	Expr -> Expr . Expr                                 (rule 13)

	'('            shift, and enter state 5
	'0'            shift, and enter state 6
	'['            shift, and enter state 7
	'false'        shift, and enter state 8
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 10
	'iszero'       shift, and enter state 11
	'pred'         shift, and enter state 12
	'succ'         shift, and enter state 13
	'then'         shift, and enter state 27
	'true'         shift, and enter state 14
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 23

State 19

	Expr -> 'fun' '{' . 'return' Expr '}'               (rule 12)

	'return'       shift, and enter state 26


State 20

	Expr -> '[' Integer . ']'                           (rule 11)

	']'            shift, and enter state 25


State 21

	Integer -> L_integ .                                (rule 2)

	']'            reduce using rule 2


State 22

	Expr -> Expr . Expr                                 (rule 13)
	Expr -> '(' Expr . ')'                              (rule 14)

	'('            shift, and enter state 5
	')'            shift, and enter state 24
	'0'            shift, and enter state 6
	'['            shift, and enter state 7
	'false'        shift, and enter state 8
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 10
	'iszero'       shift, and enter state 11
	'pred'         shift, and enter state 12
	'succ'         shift, and enter state 13
	'true'         shift, and enter state 14
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 23

State 23

	Expr -> Expr . Expr                                 (rule 13)
	Expr -> Expr Expr .                                 (rule 13)

	'('            shift, and enter state 5
			(reduce using rule 13)

	')'            reduce using rule 13
	'0'            shift, and enter state 6
			(reduce using rule 13)

	'['            shift, and enter state 7
			(reduce using rule 13)

	'else'         reduce using rule 13
	'false'        shift, and enter state 8
			(reduce using rule 13)

	'fun'          shift, and enter state 9
			(reduce using rule 13)

	'if'           shift, and enter state 10
			(reduce using rule 13)

	'iszero'       shift, and enter state 11
			(reduce using rule 13)

	'pred'         shift, and enter state 12
			(reduce using rule 13)

	'succ'         shift, and enter state 13
			(reduce using rule 13)

	'then'         reduce using rule 13
	'true'         shift, and enter state 14
			(reduce using rule 13)

	'}'            reduce using rule 13
	L_Ident        shift, and enter state 2
			(reduce using rule 13)

	%eof           reduce using rule 13

	Ident          goto state 3
	Expr           goto state 23

State 24

	Expr -> '(' Expr ')' .                              (rule 14)

	'('            reduce using rule 14
	')'            reduce using rule 14
	'0'            reduce using rule 14
	'['            reduce using rule 14
	'else'         reduce using rule 14
	'false'        reduce using rule 14
	'fun'          reduce using rule 14
	'if'           reduce using rule 14
	'iszero'       reduce using rule 14
	'pred'         reduce using rule 14
	'succ'         reduce using rule 14
	'then'         reduce using rule 14
	'true'         reduce using rule 14
	'}'            reduce using rule 14
	L_Ident        reduce using rule 14
	%eof           reduce using rule 14


State 25

	Expr -> '[' Integer ']' .                           (rule 11)

	'('            reduce using rule 11
	')'            reduce using rule 11
	'0'            reduce using rule 11
	'['            reduce using rule 11
	'else'         reduce using rule 11
	'false'        reduce using rule 11
	'fun'          reduce using rule 11
	'if'           reduce using rule 11
	'iszero'       reduce using rule 11
	'pred'         reduce using rule 11
	'succ'         reduce using rule 11
	'then'         reduce using rule 11
	'true'         reduce using rule 11
	'}'            reduce using rule 11
	L_Ident        reduce using rule 11
	%eof           reduce using rule 11


State 26

	Expr -> 'fun' '{' 'return' . Expr '}'               (rule 12)

	'('            shift, and enter state 5
	'0'            shift, and enter state 6
	'['            shift, and enter state 7
	'false'        shift, and enter state 8
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 10
	'iszero'       shift, and enter state 11
	'pred'         shift, and enter state 12
	'succ'         shift, and enter state 13
	'true'         shift, and enter state 14
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 29

State 27

	Expr -> 'if' Expr 'then' . Expr 'else' Expr         (rule 5)

	'('            shift, and enter state 5
	'0'            shift, and enter state 6
	'['            shift, and enter state 7
	'false'        shift, and enter state 8
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 10
	'iszero'       shift, and enter state 11
	'pred'         shift, and enter state 12
	'succ'         shift, and enter state 13
	'true'         shift, and enter state 14
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 28

State 28

	Expr -> 'if' Expr 'then' Expr . 'else' Expr         (rule 5)
	Expr -> Expr . Expr                                 (rule 13)

	'('            shift, and enter state 5
	'0'            shift, and enter state 6
	'['            shift, and enter state 7
	'else'         shift, and enter state 31
	'false'        shift, and enter state 8
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 10
	'iszero'       shift, and enter state 11
	'pred'         shift, and enter state 12
	'succ'         shift, and enter state 13
	'true'         shift, and enter state 14
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 23

State 29

	Expr -> 'fun' '{' 'return' Expr . '}'               (rule 12)
	Expr -> Expr . Expr                                 (rule 13)

	'('            shift, and enter state 5
	'0'            shift, and enter state 6
	'['            shift, and enter state 7
	'false'        shift, and enter state 8
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 10
	'iszero'       shift, and enter state 11
	'pred'         shift, and enter state 12
	'succ'         shift, and enter state 13
	'true'         shift, and enter state 14
	'}'            shift, and enter state 30
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 23

State 30

	Expr -> 'fun' '{' 'return' Expr '}' .               (rule 12)

	'('            reduce using rule 12
	')'            reduce using rule 12
	'0'            reduce using rule 12
	'['            reduce using rule 12
	'else'         reduce using rule 12
	'false'        reduce using rule 12
	'fun'          reduce using rule 12
	'if'           reduce using rule 12
	'iszero'       reduce using rule 12
	'pred'         reduce using rule 12
	'succ'         reduce using rule 12
	'then'         reduce using rule 12
	'true'         reduce using rule 12
	'}'            reduce using rule 12
	L_Ident        reduce using rule 12
	%eof           reduce using rule 12


State 31

	Expr -> 'if' Expr 'then' Expr 'else' . Expr         (rule 5)

	'('            shift, and enter state 5
	'0'            shift, and enter state 6
	'['            shift, and enter state 7
	'false'        shift, and enter state 8
	'fun'          shift, and enter state 9
	'if'           shift, and enter state 10
	'iszero'       shift, and enter state 11
	'pred'         shift, and enter state 12
	'succ'         shift, and enter state 13
	'true'         shift, and enter state 14
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Expr           goto state 32

State 32

	Expr -> 'if' Expr 'then' Expr 'else' Expr .         (rule 5)
	Expr -> Expr . Expr                                 (rule 13)

	'('            shift, and enter state 5
			(reduce using rule 5)

	')'            reduce using rule 5
	'0'            shift, and enter state 6
			(reduce using rule 5)

	'['            shift, and enter state 7
			(reduce using rule 5)

	'else'         reduce using rule 5
	'false'        shift, and enter state 8
			(reduce using rule 5)

	'fun'          shift, and enter state 9
			(reduce using rule 5)

	'if'           shift, and enter state 10
			(reduce using rule 5)

	'iszero'       shift, and enter state 11
			(reduce using rule 5)

	'pred'         shift, and enter state 12
			(reduce using rule 5)

	'succ'         shift, and enter state 13
			(reduce using rule 5)

	'then'         reduce using rule 5
	'true'         shift, and enter state 14
			(reduce using rule 5)

	'}'            reduce using rule 5
	L_Ident        shift, and enter state 2
			(reduce using rule 5)

	%eof           reduce using rule 5

	Ident          goto state 3
	Expr           goto state 23

-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 15
Number of terminals: 19
Number of non-terminals: 4
Number of states: 33
