-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Syntax.Nameless.Par
  ( happyError
  , myLexer
  , pExpr
  ) where

import Prelude

import qualified Syntax.Nameless.Abs
import Syntax.Nameless.Lex

}

%name pExpr Expr
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '0' { PT _ (TS _ 3) }
  '[' { PT _ (TS _ 4) }
  ']' { PT _ (TS _ 5) }
  'else' { PT _ (TS _ 6) }
  'false' { PT _ (TS _ 7) }
  'fun' { PT _ (TS _ 8) }
  'if' { PT _ (TS _ 9) }
  'iszero' { PT _ (TS _ 10) }
  'pred' { PT _ (TS _ 11) }
  'return' { PT _ (TS _ 12) }
  'succ' { PT _ (TS _ 13) }
  'then' { PT _ (TS _ 14) }
  'true' { PT _ (TS _ 15) }
  '{' { PT _ (TS _ 16) }
  '}' { PT _ (TS _ 17) }
  L_Ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }

%%

Ident :: { Syntax.Nameless.Abs.Ident }
Ident  : L_Ident { Syntax.Nameless.Abs.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

Expr :: { Syntax.Nameless.Abs.Expr }
Expr : 'true' { Syntax.Nameless.Abs.ConstTrue }
     | 'false' { Syntax.Nameless.Abs.ConstFalse }
     | 'if' Expr 'then' Expr 'else' Expr { Syntax.Nameless.Abs.If $2 $4 $6 }
     | '0' { Syntax.Nameless.Abs.ConstZero }
     | 'succ' Expr { Syntax.Nameless.Abs.Succ $2 }
     | 'pred' Expr { Syntax.Nameless.Abs.Pred $2 }
     | 'iszero' Expr { Syntax.Nameless.Abs.IsZero $2 }
     | Ident { Syntax.Nameless.Abs.FreeVar $1 }
     | '[' Integer ']' { Syntax.Nameless.Abs.BoundVar $2 }
     | 'fun' '{' 'return' Expr '}' { Syntax.Nameless.Abs.Abstraction $4 }
     | Expr Expr { Syntax.Nameless.Abs.Application $1 $2 }
     | '(' Expr ')' { $2 }
{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

