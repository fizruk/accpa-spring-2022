-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Syntax/Normal/Par.y
-----------------------------------------------------------------------------

state 20 contains 10 shift/reduce conflicts.
state 22 contains 10 shift/reduce conflicts.
state 23 contains 10 shift/reduce conflicts.
state 24 contains 10 shift/reduce conflicts.
state 36 contains 10 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pListExpr -> ListExpr                       (1)
	%start_pExpr -> Expr                               (2)
	Ident -> L_Ident                                   (3)
	Program -> ListExpr                                (4)
	ListExpr ->                                        (5)
	ListExpr -> Expr                                   (6)
	ListExpr -> Expr ';' ListExpr                      (7)
	Expr -> 'true'                                     (8)
	Expr -> 'false'                                    (9)
	Expr -> 'if' Expr 'then' Expr 'else' Expr          (10)
	Expr -> '0'                                        (11)
	Expr -> 'succ' Expr                                (12)
	Expr -> 'pred' Expr                                (13)
	Expr -> 'iszero' Expr                              (14)
	Expr -> Ident                                      (15)
	Expr -> 'fun' '(' Ident ')' '{' 'return' Expr '}'   (16)
	Expr -> Expr Expr                                  (17)
	Expr -> '(' Expr ')'                               (18)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'0'            { PT _ (TS _ 3) }
	';'            { PT _ (TS _ 4) }
	'else'         { PT _ (TS _ 5) }
	'false'        { PT _ (TS _ 6) }
	'fun'          { PT _ (TS _ 7) }
	'if'           { PT _ (TS _ 8) }
	'iszero'       { PT _ (TS _ 9) }
	'pred'         { PT _ (TS _ 10) }
	'return'       { PT _ (TS _ 11) }
	'succ'         { PT _ (TS _ 12) }
	'then'         { PT _ (TS _ 13) }
	'true'         { PT _ (TS _ 14) }
	'{'            { PT _ (TS _ 15) }
	'}'            { PT _ (TS _ 16) }
	L_Ident        { PT _ (TV $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pListExpr rule  1
	%start_pExpr    rule  2
	Ident           rule  3
	Program         rule  4
	ListExpr        rules 5, 6, 7
	Expr            rules 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'false'        shift, and enter state 9
	'fun'          shift, and enter state 10
	'if'           shift, and enter state 11
	'iszero'       shift, and enter state 12
	'pred'         shift, and enter state 13
	'succ'         shift, and enter state 14
	'true'         shift, and enter state 15
	L_Ident        shift, and enter state 4
	%eof           reduce using rule 5

	Ident          goto state 5
	Program        goto state 18
	ListExpr       goto state 19
	Expr           goto state 17

State 1

	%start_pListExpr -> . ListExpr                      (rule 1)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'false'        shift, and enter state 9
	'fun'          shift, and enter state 10
	'if'           shift, and enter state 11
	'iszero'       shift, and enter state 12
	'pred'         shift, and enter state 13
	'succ'         shift, and enter state 14
	'true'         shift, and enter state 15
	L_Ident        shift, and enter state 4
	%eof           reduce using rule 5

	Ident          goto state 5
	ListExpr       goto state 16
	Expr           goto state 17

State 2

	%start_pExpr -> . Expr                              (rule 2)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'false'        shift, and enter state 9
	'fun'          shift, and enter state 10
	'if'           shift, and enter state 11
	'iszero'       shift, and enter state 12
	'pred'         shift, and enter state 13
	'succ'         shift, and enter state 14
	'true'         shift, and enter state 15
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 6

State 3

	Ident -> . L_Ident                                  (rule 3)

	L_Ident        shift, and enter state 4


State 4

	Ident -> L_Ident .                                  (rule 3)

	'('            reduce using rule 3
	')'            reduce using rule 3
	'0'            reduce using rule 3
	';'            reduce using rule 3
	'else'         reduce using rule 3
	'false'        reduce using rule 3
	'fun'          reduce using rule 3
	'if'           reduce using rule 3
	'iszero'       reduce using rule 3
	'pred'         reduce using rule 3
	'succ'         reduce using rule 3
	'then'         reduce using rule 3
	'true'         reduce using rule 3
	'}'            reduce using rule 3
	L_Ident        reduce using rule 3
	%eof           reduce using rule 3


State 5

	Expr -> Ident .                                     (rule 15)

	'('            reduce using rule 15
	')'            reduce using rule 15
	'0'            reduce using rule 15
	';'            reduce using rule 15
	'else'         reduce using rule 15
	'false'        reduce using rule 15
	'fun'          reduce using rule 15
	'if'           reduce using rule 15
	'iszero'       reduce using rule 15
	'pred'         reduce using rule 15
	'succ'         reduce using rule 15
	'then'         reduce using rule 15
	'true'         reduce using rule 15
	'}'            reduce using rule 15
	L_Ident        reduce using rule 15
	%eof           reduce using rule 15


State 6

	%start_pExpr -> Expr .                              (rule 2)
	Expr -> Expr . Expr                                 (rule 17)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'false'        shift, and enter state 9
	'fun'          shift, and enter state 10
	'if'           shift, and enter state 11
	'iszero'       shift, and enter state 12
	'pred'         shift, and enter state 13
	'succ'         shift, and enter state 14
	'true'         shift, and enter state 15
	L_Ident        shift, and enter state 4
	%eof           accept

	Ident          goto state 5
	Expr           goto state 20

State 7

	Expr -> '(' . Expr ')'                              (rule 18)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'false'        shift, and enter state 9
	'fun'          shift, and enter state 10
	'if'           shift, and enter state 11
	'iszero'       shift, and enter state 12
	'pred'         shift, and enter state 13
	'succ'         shift, and enter state 14
	'true'         shift, and enter state 15
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 27

State 8

	Expr -> '0' .                                       (rule 11)

	'('            reduce using rule 11
	')'            reduce using rule 11
	'0'            reduce using rule 11
	';'            reduce using rule 11
	'else'         reduce using rule 11
	'false'        reduce using rule 11
	'fun'          reduce using rule 11
	'if'           reduce using rule 11
	'iszero'       reduce using rule 11
	'pred'         reduce using rule 11
	'succ'         reduce using rule 11
	'then'         reduce using rule 11
	'true'         reduce using rule 11
	'}'            reduce using rule 11
	L_Ident        reduce using rule 11
	%eof           reduce using rule 11


State 9

	Expr -> 'false' .                                   (rule 9)

	'('            reduce using rule 9
	')'            reduce using rule 9
	'0'            reduce using rule 9
	';'            reduce using rule 9
	'else'         reduce using rule 9
	'false'        reduce using rule 9
	'fun'          reduce using rule 9
	'if'           reduce using rule 9
	'iszero'       reduce using rule 9
	'pred'         reduce using rule 9
	'succ'         reduce using rule 9
	'then'         reduce using rule 9
	'true'         reduce using rule 9
	'}'            reduce using rule 9
	L_Ident        reduce using rule 9
	%eof           reduce using rule 9


State 10

	Expr -> 'fun' . '(' Ident ')' '{' 'return' Expr '}'    (rule 16)

	'('            shift, and enter state 26


State 11

	Expr -> 'if' . Expr 'then' Expr 'else' Expr         (rule 10)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'false'        shift, and enter state 9
	'fun'          shift, and enter state 10
	'if'           shift, and enter state 11
	'iszero'       shift, and enter state 12
	'pred'         shift, and enter state 13
	'succ'         shift, and enter state 14
	'true'         shift, and enter state 15
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 25

State 12

	Expr -> 'iszero' . Expr                             (rule 14)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'false'        shift, and enter state 9
	'fun'          shift, and enter state 10
	'if'           shift, and enter state 11
	'iszero'       shift, and enter state 12
	'pred'         shift, and enter state 13
	'succ'         shift, and enter state 14
	'true'         shift, and enter state 15
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 24

State 13

	Expr -> 'pred' . Expr                               (rule 13)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'false'        shift, and enter state 9
	'fun'          shift, and enter state 10
	'if'           shift, and enter state 11
	'iszero'       shift, and enter state 12
	'pred'         shift, and enter state 13
	'succ'         shift, and enter state 14
	'true'         shift, and enter state 15
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 23

State 14

	Expr -> 'succ' . Expr                               (rule 12)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'false'        shift, and enter state 9
	'fun'          shift, and enter state 10
	'if'           shift, and enter state 11
	'iszero'       shift, and enter state 12
	'pred'         shift, and enter state 13
	'succ'         shift, and enter state 14
	'true'         shift, and enter state 15
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 22

State 15

	Expr -> 'true' .                                    (rule 8)

	'('            reduce using rule 8
	')'            reduce using rule 8
	'0'            reduce using rule 8
	';'            reduce using rule 8
	'else'         reduce using rule 8
	'false'        reduce using rule 8
	'fun'          reduce using rule 8
	'if'           reduce using rule 8
	'iszero'       reduce using rule 8
	'pred'         reduce using rule 8
	'succ'         reduce using rule 8
	'then'         reduce using rule 8
	'true'         reduce using rule 8
	'}'            reduce using rule 8
	L_Ident        reduce using rule 8
	%eof           reduce using rule 8


State 16

	%start_pListExpr -> ListExpr .                      (rule 1)

	%eof           accept


State 17

	ListExpr -> Expr .                                  (rule 6)
	ListExpr -> Expr . ';' ListExpr                     (rule 7)
	Expr -> Expr . Expr                                 (rule 17)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	';'            shift, and enter state 21
	'false'        shift, and enter state 9
	'fun'          shift, and enter state 10
	'if'           shift, and enter state 11
	'iszero'       shift, and enter state 12
	'pred'         shift, and enter state 13
	'succ'         shift, and enter state 14
	'true'         shift, and enter state 15
	L_Ident        shift, and enter state 4
	%eof           reduce using rule 6

	Ident          goto state 5
	Expr           goto state 20

State 18

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 19

	Program -> ListExpr .                               (rule 4)

	%eof           reduce using rule 4


State 20

	Expr -> Expr . Expr                                 (rule 17)
	Expr -> Expr Expr .                                 (rule 17)

	'('            shift, and enter state 7
			(reduce using rule 17)

	')'            reduce using rule 17
	'0'            shift, and enter state 8
			(reduce using rule 17)

	';'            reduce using rule 17
	'else'         reduce using rule 17
	'false'        shift, and enter state 9
			(reduce using rule 17)

	'fun'          shift, and enter state 10
			(reduce using rule 17)

	'if'           shift, and enter state 11
			(reduce using rule 17)

	'iszero'       shift, and enter state 12
			(reduce using rule 17)

	'pred'         shift, and enter state 13
			(reduce using rule 17)

	'succ'         shift, and enter state 14
			(reduce using rule 17)

	'then'         reduce using rule 17
	'true'         shift, and enter state 15
			(reduce using rule 17)

	'}'            reduce using rule 17
	L_Ident        shift, and enter state 4
			(reduce using rule 17)

	%eof           reduce using rule 17

	Ident          goto state 5
	Expr           goto state 20

State 21

	ListExpr -> Expr ';' . ListExpr                     (rule 7)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'false'        shift, and enter state 9
	'fun'          shift, and enter state 10
	'if'           shift, and enter state 11
	'iszero'       shift, and enter state 12
	'pred'         shift, and enter state 13
	'succ'         shift, and enter state 14
	'true'         shift, and enter state 15
	L_Ident        shift, and enter state 4
	%eof           reduce using rule 5

	Ident          goto state 5
	ListExpr       goto state 31
	Expr           goto state 17

State 22

	Expr -> 'succ' Expr .                               (rule 12)
	Expr -> Expr . Expr                                 (rule 17)

	'('            shift, and enter state 7
			(reduce using rule 12)

	')'            reduce using rule 12
	'0'            shift, and enter state 8
			(reduce using rule 12)

	';'            reduce using rule 12
	'else'         reduce using rule 12
	'false'        shift, and enter state 9
			(reduce using rule 12)

	'fun'          shift, and enter state 10
			(reduce using rule 12)

	'if'           shift, and enter state 11
			(reduce using rule 12)

	'iszero'       shift, and enter state 12
			(reduce using rule 12)

	'pred'         shift, and enter state 13
			(reduce using rule 12)

	'succ'         shift, and enter state 14
			(reduce using rule 12)

	'then'         reduce using rule 12
	'true'         shift, and enter state 15
			(reduce using rule 12)

	'}'            reduce using rule 12
	L_Ident        shift, and enter state 4
			(reduce using rule 12)

	%eof           reduce using rule 12

	Ident          goto state 5
	Expr           goto state 20

State 23

	Expr -> 'pred' Expr .                               (rule 13)
	Expr -> Expr . Expr                                 (rule 17)

	'('            shift, and enter state 7
			(reduce using rule 13)

	')'            reduce using rule 13
	'0'            shift, and enter state 8
			(reduce using rule 13)

	';'            reduce using rule 13
	'else'         reduce using rule 13
	'false'        shift, and enter state 9
			(reduce using rule 13)

	'fun'          shift, and enter state 10
			(reduce using rule 13)

	'if'           shift, and enter state 11
			(reduce using rule 13)

	'iszero'       shift, and enter state 12
			(reduce using rule 13)

	'pred'         shift, and enter state 13
			(reduce using rule 13)

	'succ'         shift, and enter state 14
			(reduce using rule 13)

	'then'         reduce using rule 13
	'true'         shift, and enter state 15
			(reduce using rule 13)

	'}'            reduce using rule 13
	L_Ident        shift, and enter state 4
			(reduce using rule 13)

	%eof           reduce using rule 13

	Ident          goto state 5
	Expr           goto state 20

State 24

	Expr -> 'iszero' Expr .                             (rule 14)
	Expr -> Expr . Expr                                 (rule 17)

	'('            shift, and enter state 7
			(reduce using rule 14)

	')'            reduce using rule 14
	'0'            shift, and enter state 8
			(reduce using rule 14)

	';'            reduce using rule 14
	'else'         reduce using rule 14
	'false'        shift, and enter state 9
			(reduce using rule 14)

	'fun'          shift, and enter state 10
			(reduce using rule 14)

	'if'           shift, and enter state 11
			(reduce using rule 14)

	'iszero'       shift, and enter state 12
			(reduce using rule 14)

	'pred'         shift, and enter state 13
			(reduce using rule 14)

	'succ'         shift, and enter state 14
			(reduce using rule 14)

	'then'         reduce using rule 14
	'true'         shift, and enter state 15
			(reduce using rule 14)

	'}'            reduce using rule 14
	L_Ident        shift, and enter state 4
			(reduce using rule 14)

	%eof           reduce using rule 14

	Ident          goto state 5
	Expr           goto state 20

State 25

	Expr -> 'if' Expr . 'then' Expr 'else' Expr         (rule 10)
	Expr -> Expr . Expr                                 (rule 17)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'false'        shift, and enter state 9
	'fun'          shift, and enter state 10
	'if'           shift, and enter state 11
	'iszero'       shift, and enter state 12
	'pred'         shift, and enter state 13
	'succ'         shift, and enter state 14
	'then'         shift, and enter state 30
	'true'         shift, and enter state 15
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 20

State 26

	Expr -> 'fun' '(' . Ident ')' '{' 'return' Expr '}'    (rule 16)

	L_Ident        shift, and enter state 4

	Ident          goto state 29

State 27

	Expr -> Expr . Expr                                 (rule 17)
	Expr -> '(' Expr . ')'                              (rule 18)

	'('            shift, and enter state 7
	')'            shift, and enter state 28
	'0'            shift, and enter state 8
	'false'        shift, and enter state 9
	'fun'          shift, and enter state 10
	'if'           shift, and enter state 11
	'iszero'       shift, and enter state 12
	'pred'         shift, and enter state 13
	'succ'         shift, and enter state 14
	'true'         shift, and enter state 15
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 20

State 28

	Expr -> '(' Expr ')' .                              (rule 18)

	'('            reduce using rule 18
	')'            reduce using rule 18
	'0'            reduce using rule 18
	';'            reduce using rule 18
	'else'         reduce using rule 18
	'false'        reduce using rule 18
	'fun'          reduce using rule 18
	'if'           reduce using rule 18
	'iszero'       reduce using rule 18
	'pred'         reduce using rule 18
	'succ'         reduce using rule 18
	'then'         reduce using rule 18
	'true'         reduce using rule 18
	'}'            reduce using rule 18
	L_Ident        reduce using rule 18
	%eof           reduce using rule 18


State 29

	Expr -> 'fun' '(' Ident . ')' '{' 'return' Expr '}'    (rule 16)

	')'            shift, and enter state 33


State 30

	Expr -> 'if' Expr 'then' . Expr 'else' Expr         (rule 10)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'false'        shift, and enter state 9
	'fun'          shift, and enter state 10
	'if'           shift, and enter state 11
	'iszero'       shift, and enter state 12
	'pred'         shift, and enter state 13
	'succ'         shift, and enter state 14
	'true'         shift, and enter state 15
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 32

State 31

	ListExpr -> Expr ';' ListExpr .                     (rule 7)

	%eof           reduce using rule 7


State 32

	Expr -> 'if' Expr 'then' Expr . 'else' Expr         (rule 10)
	Expr -> Expr . Expr                                 (rule 17)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'else'         shift, and enter state 35
	'false'        shift, and enter state 9
	'fun'          shift, and enter state 10
	'if'           shift, and enter state 11
	'iszero'       shift, and enter state 12
	'pred'         shift, and enter state 13
	'succ'         shift, and enter state 14
	'true'         shift, and enter state 15
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 20

State 33

	Expr -> 'fun' '(' Ident ')' . '{' 'return' Expr '}'    (rule 16)

	'{'            shift, and enter state 34


State 34

	Expr -> 'fun' '(' Ident ')' '{' . 'return' Expr '}'    (rule 16)

	'return'       shift, and enter state 37


State 35

	Expr -> 'if' Expr 'then' Expr 'else' . Expr         (rule 10)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'false'        shift, and enter state 9
	'fun'          shift, and enter state 10
	'if'           shift, and enter state 11
	'iszero'       shift, and enter state 12
	'pred'         shift, and enter state 13
	'succ'         shift, and enter state 14
	'true'         shift, and enter state 15
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 36

State 36

	Expr -> 'if' Expr 'then' Expr 'else' Expr .         (rule 10)
	Expr -> Expr . Expr                                 (rule 17)

	'('            shift, and enter state 7
			(reduce using rule 10)

	')'            reduce using rule 10
	'0'            shift, and enter state 8
			(reduce using rule 10)

	';'            reduce using rule 10
	'else'         reduce using rule 10
	'false'        shift, and enter state 9
			(reduce using rule 10)

	'fun'          shift, and enter state 10
			(reduce using rule 10)

	'if'           shift, and enter state 11
			(reduce using rule 10)

	'iszero'       shift, and enter state 12
			(reduce using rule 10)

	'pred'         shift, and enter state 13
			(reduce using rule 10)

	'succ'         shift, and enter state 14
			(reduce using rule 10)

	'then'         reduce using rule 10
	'true'         shift, and enter state 15
			(reduce using rule 10)

	'}'            reduce using rule 10
	L_Ident        shift, and enter state 4
			(reduce using rule 10)

	%eof           reduce using rule 10

	Ident          goto state 5
	Expr           goto state 20

State 37

	Expr -> 'fun' '(' Ident ')' '{' 'return' . Expr '}'    (rule 16)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'false'        shift, and enter state 9
	'fun'          shift, and enter state 10
	'if'           shift, and enter state 11
	'iszero'       shift, and enter state 12
	'pred'         shift, and enter state 13
	'succ'         shift, and enter state 14
	'true'         shift, and enter state 15
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 38

State 38

	Expr -> 'fun' '(' Ident ')' '{' 'return' Expr . '}'    (rule 16)
	Expr -> Expr . Expr                                 (rule 17)

	'('            shift, and enter state 7
	'0'            shift, and enter state 8
	'false'        shift, and enter state 9
	'fun'          shift, and enter state 10
	'if'           shift, and enter state 11
	'iszero'       shift, and enter state 12
	'pred'         shift, and enter state 13
	'succ'         shift, and enter state 14
	'true'         shift, and enter state 15
	'}'            shift, and enter state 39
	L_Ident        shift, and enter state 4

	Ident          goto state 5
	Expr           goto state 20

State 39

	Expr -> 'fun' '(' Ident ')' '{' 'return' Expr '}' .    (rule 16)

	'('            reduce using rule 16
	')'            reduce using rule 16
	'0'            reduce using rule 16
	';'            reduce using rule 16
	'else'         reduce using rule 16
	'false'        reduce using rule 16
	'fun'          reduce using rule 16
	'if'           reduce using rule 16
	'iszero'       reduce using rule 16
	'pred'         reduce using rule 16
	'succ'         reduce using rule 16
	'then'         reduce using rule 16
	'true'         reduce using rule 16
	'}'            reduce using rule 16
	L_Ident        reduce using rule 16
	%eof           reduce using rule 16


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 19
Number of terminals: 17
Number of non-terminals: 7
Number of states: 40
