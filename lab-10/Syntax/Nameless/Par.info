-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Syntax/Nameless/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pListExpr -> ListExpr                       (1)
	%start_pExpr -> Expr                               (2)
	%start_pMatchCase -> MatchCase                     (3)
	%start_pListMatchCase -> ListMatchCase             (4)
	%start_pBinding -> Binding                         (5)
	%start_pListBinding -> ListBinding                 (6)
	%start_pExpr1 -> Expr1                             (7)
	%start_pExpr2 -> Expr2                             (8)
	%start_pExpr3 -> Expr3                             (9)
	%start_pType -> Type                               (10)
	%start_pType1 -> Type1                             (11)
	%start_pType2 -> Type2                             (12)
	%start_pFieldType -> FieldType                     (13)
	%start_pListFieldType -> ListFieldType             (14)
	%start_pTyping -> Typing                           (15)
	Ident -> L_Ident                                   (16)
	Integer -> L_integ                                 (17)
	Program -> ListExpr                                (18)
	ListExpr ->                                        (19)
	ListExpr -> Expr                                   (20)
	ListExpr -> Expr ';' ListExpr                      (21)
	Expr -> 'if' Expr 'then' Expr 'else' Expr          (22)
	Expr -> 'let' Expr 'in' Expr                       (23)
	Expr -> 'fun' '(' Type ')' '{' 'return' Expr '}'   (24)
	Expr -> '{' ListBinding '}'                        (25)
	Expr -> '<' Ident '=' Expr '>' 'as' '<' ListFieldType '>'   (26)
	Expr -> 'match' Expr1 '{' ListMatchCase '}'        (27)
	Expr -> '[' ListExpr ']' 'as' '[' Type ']'         (28)
	Expr -> Expr1                                      (29)
	MatchCase -> '<' Ident '>' '=>' Expr               (30)
	ListMatchCase ->                                   (31)
	ListMatchCase -> MatchCase                         (32)
	ListMatchCase -> MatchCase ';' ListMatchCase       (33)
	Binding -> Ident '=' Expr                          (34)
	ListBinding ->                                     (35)
	ListBinding -> Binding                             (36)
	ListBinding -> Binding ',' ListBinding             (37)
	Expr1 -> Expr1 Expr2                               (38)
	Expr1 -> Expr2                                     (39)
	Expr2 -> 'cons' Expr3 Expr3                        (40)
	Expr2 -> 'head' Expr3                              (41)
	Expr2 -> 'tail' Expr3                              (42)
	Expr2 -> 'succ' Expr3                              (43)
	Expr2 -> 'pred' Expr3                              (44)
	Expr2 -> 'iszero' Expr3                            (45)
	Expr2 -> 'fix' Expr3                               (46)
	Expr2 -> 'isempty' Expr3                           (47)
	Expr2 -> 'fold' '[' Type ']' Expr3                 (48)
	Expr2 -> 'unfold' '[' Type ']' Expr3               (49)
	Expr2 -> Expr3                                     (50)
	Expr3 -> Expr3 '.' Ident                           (51)
	Expr3 -> 'true'                                    (52)
	Expr3 -> 'false'                                   (53)
	Expr3 -> '0'                                       (54)
	Expr3 -> Ident                                     (55)
	Expr3 -> Integer                                   (56)
	Expr3 -> '(' Expr ')'                              (57)
	Type -> Type1 '->' Type                            (58)
	Type -> 'µ' '(' Type ')'                           (59)
	Type -> Type1                                      (60)
	Type1 -> '{' ListFieldType '}'                     (61)
	Type1 -> '<' ListFieldType '>'                     (62)
	Type1 -> '[' Type ']'                              (63)
	Type1 -> Type2                                     (64)
	Type2 -> 'Bool'                                    (65)
	Type2 -> 'Nat'                                     (66)
	Type2 -> Ident                                     (67)
	Type2 -> Integer                                   (68)
	Type2 -> '(' Type ')'                              (69)
	FieldType -> Ident ':' Type                        (70)
	ListFieldType ->                                   (71)
	ListFieldType -> FieldType                         (72)
	ListFieldType -> FieldType ',' ListFieldType       (73)
	Typing -> Expr ':' Type                            (74)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	','            { PT _ (TS _ 3) }
	'->'           { PT _ (TS _ 4) }
	'.'            { PT _ (TS _ 5) }
	'0'            { PT _ (TS _ 6) }
	':'            { PT _ (TS _ 7) }
	';'            { PT _ (TS _ 8) }
	'<'            { PT _ (TS _ 9) }
	'='            { PT _ (TS _ 10) }
	'=>'           { PT _ (TS _ 11) }
	'>'            { PT _ (TS _ 12) }
	'Bool'         { PT _ (TS _ 13) }
	'Nat'          { PT _ (TS _ 14) }
	'['            { PT _ (TS _ 15) }
	']'            { PT _ (TS _ 16) }
	'as'           { PT _ (TS _ 17) }
	'cons'         { PT _ (TS _ 18) }
	'else'         { PT _ (TS _ 19) }
	'false'        { PT _ (TS _ 20) }
	'fix'          { PT _ (TS _ 21) }
	'fold'         { PT _ (TS _ 22) }
	'fun'          { PT _ (TS _ 23) }
	'head'         { PT _ (TS _ 24) }
	'if'           { PT _ (TS _ 25) }
	'in'           { PT _ (TS _ 26) }
	'isempty'      { PT _ (TS _ 27) }
	'iszero'       { PT _ (TS _ 28) }
	'let'          { PT _ (TS _ 29) }
	'match'        { PT _ (TS _ 30) }
	'pred'         { PT _ (TS _ 31) }
	'return'       { PT _ (TS _ 32) }
	'succ'         { PT _ (TS _ 33) }
	'tail'         { PT _ (TS _ 34) }
	'then'         { PT _ (TS _ 35) }
	'true'         { PT _ (TS _ 36) }
	'unfold'       { PT _ (TS _ 37) }
	'{'            { PT _ (TS _ 38) }
	'}'            { PT _ (TS _ 39) }
	'µ'            { PT _ (TS _ 40) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pListExpr rule  1
	%start_pExpr    rule  2
	%start_pMatchCase rule  3
	%start_pListMatchCase rule  4
	%start_pBinding rule  5
	%start_pListBinding rule  6
	%start_pExpr1   rule  7
	%start_pExpr2   rule  8
	%start_pExpr3   rule  9
	%start_pType    rule  10
	%start_pType1   rule  11
	%start_pType2   rule  12
	%start_pFieldType rule  13
	%start_pListFieldType rule  14
	%start_pTyping  rule  15
	Ident           rule  16
	Integer         rule  17
	Program         rule  18
	ListExpr        rules 19, 20, 21
	Expr            rules 22, 23, 24, 25, 26, 27, 28, 29
	MatchCase       rule  30
	ListMatchCase   rules 31, 32, 33
	Binding         rule  34
	ListBinding     rules 35, 36, 37
	Expr1           rules 38, 39
	Expr2           rules 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50
	Expr3           rules 51, 52, 53, 54, 55, 56, 57
	Type            rules 58, 59, 60
	Type1           rules 61, 62, 63, 64
	Type2           rules 65, 66, 67, 68, 69
	FieldType       rule  70
	ListFieldType   rules 71, 72, 73
	Typing          rule  74

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'<'            shift, and enter state 27
	'['            shift, and enter state 28
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'fun'          shift, and enter state 33
	'head'         shift, and enter state 34
	'if'           shift, and enter state 35
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'let'          shift, and enter state 38
	'match'        shift, and enter state 39
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	'{'            shift, and enter state 45
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46
	%eof           reduce using rule 19

	Ident          goto state 18
	Integer        goto state 19
	Program        goto state 79
	ListExpr       goto state 80
	Expr           goto state 78
	Expr1          goto state 21
	Expr2          goto state 22
	Expr3          goto state 23

State 1

	%start_pListExpr -> . ListExpr                      (rule 1)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'<'            shift, and enter state 27
	'['            shift, and enter state 28
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'fun'          shift, and enter state 33
	'head'         shift, and enter state 34
	'if'           shift, and enter state 35
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'let'          shift, and enter state 38
	'match'        shift, and enter state 39
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	'{'            shift, and enter state 45
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46
	%eof           reduce using rule 19

	Ident          goto state 18
	Integer        goto state 19
	ListExpr       goto state 77
	Expr           goto state 78
	Expr1          goto state 21
	Expr2          goto state 22
	Expr3          goto state 23

State 2

	%start_pExpr -> . Expr                              (rule 2)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'<'            shift, and enter state 27
	'['            shift, and enter state 28
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'fun'          shift, and enter state 33
	'head'         shift, and enter state 34
	'if'           shift, and enter state 35
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'let'          shift, and enter state 38
	'match'        shift, and enter state 39
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	'{'            shift, and enter state 45
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr           goto state 76
	Expr1          goto state 21
	Expr2          goto state 22
	Expr3          goto state 23

State 3

	%start_pMatchCase -> . MatchCase                    (rule 3)

	'<'            shift, and enter state 74

	MatchCase      goto state 75

State 4

	%start_pListMatchCase -> . ListMatchCase            (rule 4)

	'<'            shift, and enter state 74
	%eof           reduce using rule 31

	MatchCase      goto state 72
	ListMatchCase  goto state 73

State 5

	%start_pBinding -> . Binding                        (rule 5)

	L_Ident        shift, and enter state 17

	Ident          goto state 68
	Binding        goto state 71

State 6

	%start_pListBinding -> . ListBinding                (rule 6)

	L_Ident        shift, and enter state 17
	%eof           reduce using rule 35

	Ident          goto state 68
	Binding        goto state 69
	ListBinding    goto state 70

State 7

	%start_pExpr1 -> . Expr1                            (rule 7)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'head'         shift, and enter state 34
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr1          goto state 67
	Expr2          goto state 22
	Expr3          goto state 23

State 8

	%start_pExpr2 -> . Expr2                            (rule 8)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'head'         shift, and enter state 34
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr2          goto state 66
	Expr3          goto state 23

State 9

	%start_pExpr3 -> . Expr3                            (rule 9)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'false'        shift, and enter state 30
	'true'         shift, and enter state 43
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr3          goto state 65

State 10

	%start_pType -> . Type                              (rule 10)

	'('            shift, and enter state 54
	'<'            shift, and enter state 59
	'Bool'         shift, and enter state 55
	'Nat'          shift, and enter state 56
	'['            shift, and enter state 60
	'{'            shift, and enter state 61
	'µ'            shift, and enter state 64
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 51
	Integer        goto state 52
	Type           goto state 62
	Type1          goto state 63
	Type2          goto state 58

State 11

	%start_pType1 -> . Type1                            (rule 11)

	'('            shift, and enter state 54
	'<'            shift, and enter state 59
	'Bool'         shift, and enter state 55
	'Nat'          shift, and enter state 56
	'['            shift, and enter state 60
	'{'            shift, and enter state 61
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 51
	Integer        goto state 52
	Type1          goto state 57
	Type2          goto state 58

State 12

	%start_pType2 -> . Type2                            (rule 12)

	'('            shift, and enter state 54
	'Bool'         shift, and enter state 55
	'Nat'          shift, and enter state 56
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 51
	Integer        goto state 52
	Type2          goto state 53

State 13

	%start_pFieldType -> . FieldType                    (rule 13)

	L_Ident        shift, and enter state 17

	Ident          goto state 47
	FieldType      goto state 50

State 14

	%start_pListFieldType -> . ListFieldType            (rule 14)

	L_Ident        shift, and enter state 17
	%eof           reduce using rule 71

	Ident          goto state 47
	FieldType      goto state 48
	ListFieldType  goto state 49

State 15

	%start_pTyping -> . Typing                          (rule 15)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'<'            shift, and enter state 27
	'['            shift, and enter state 28
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'fun'          shift, and enter state 33
	'head'         shift, and enter state 34
	'if'           shift, and enter state 35
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'let'          shift, and enter state 38
	'match'        shift, and enter state 39
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	'{'            shift, and enter state 45
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr           goto state 20
	Expr1          goto state 21
	Expr2          goto state 22
	Expr3          goto state 23
	Typing         goto state 24

State 16

	Ident -> . L_Ident                                  (rule 16)

	L_Ident        shift, and enter state 17


State 17

	Ident -> L_Ident .                                  (rule 16)

	'('            reduce using rule 16
	')'            reduce using rule 16
	','            reduce using rule 16
	'->'           reduce using rule 16
	'.'            reduce using rule 16
	'0'            reduce using rule 16
	':'            reduce using rule 16
	';'            reduce using rule 16
	'='            reduce using rule 16
	'>'            reduce using rule 16
	']'            reduce using rule 16
	'cons'         reduce using rule 16
	'else'         reduce using rule 16
	'false'        reduce using rule 16
	'fix'          reduce using rule 16
	'fold'         reduce using rule 16
	'head'         reduce using rule 16
	'in'           reduce using rule 16
	'isempty'      reduce using rule 16
	'iszero'       reduce using rule 16
	'pred'         reduce using rule 16
	'succ'         reduce using rule 16
	'tail'         reduce using rule 16
	'then'         reduce using rule 16
	'true'         reduce using rule 16
	'unfold'       reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	L_Ident        reduce using rule 16
	L_integ        reduce using rule 16
	%eof           reduce using rule 16


State 18

	Expr3 -> Ident .                                    (rule 55)

	'('            reduce using rule 55
	')'            reduce using rule 55
	','            reduce using rule 55
	'.'            reduce using rule 55
	'0'            reduce using rule 55
	':'            reduce using rule 55
	';'            reduce using rule 55
	'>'            reduce using rule 55
	']'            reduce using rule 55
	'cons'         reduce using rule 55
	'else'         reduce using rule 55
	'false'        reduce using rule 55
	'fix'          reduce using rule 55
	'fold'         reduce using rule 55
	'head'         reduce using rule 55
	'in'           reduce using rule 55
	'isempty'      reduce using rule 55
	'iszero'       reduce using rule 55
	'pred'         reduce using rule 55
	'succ'         reduce using rule 55
	'tail'         reduce using rule 55
	'then'         reduce using rule 55
	'true'         reduce using rule 55
	'unfold'       reduce using rule 55
	'{'            reduce using rule 55
	'}'            reduce using rule 55
	L_Ident        reduce using rule 55
	L_integ        reduce using rule 55
	%eof           reduce using rule 55


State 19

	Expr3 -> Integer .                                  (rule 56)

	'('            reduce using rule 56
	')'            reduce using rule 56
	','            reduce using rule 56
	'.'            reduce using rule 56
	'0'            reduce using rule 56
	':'            reduce using rule 56
	';'            reduce using rule 56
	'>'            reduce using rule 56
	']'            reduce using rule 56
	'cons'         reduce using rule 56
	'else'         reduce using rule 56
	'false'        reduce using rule 56
	'fix'          reduce using rule 56
	'fold'         reduce using rule 56
	'head'         reduce using rule 56
	'in'           reduce using rule 56
	'isempty'      reduce using rule 56
	'iszero'       reduce using rule 56
	'pred'         reduce using rule 56
	'succ'         reduce using rule 56
	'tail'         reduce using rule 56
	'then'         reduce using rule 56
	'true'         reduce using rule 56
	'unfold'       reduce using rule 56
	'{'            reduce using rule 56
	'}'            reduce using rule 56
	L_Ident        reduce using rule 56
	L_integ        reduce using rule 56
	%eof           reduce using rule 56


State 20

	Typing -> Expr . ':' Type                           (rule 74)

	':'            shift, and enter state 114


State 21

	Expr -> Expr1 .                                     (rule 29)
	Expr1 -> Expr1 . Expr2                              (rule 38)

	'('            shift, and enter state 25
	')'            reduce using rule 29
	','            reduce using rule 29
	'0'            shift, and enter state 26
	':'            reduce using rule 29
	';'            reduce using rule 29
	'>'            reduce using rule 29
	']'            reduce using rule 29
	'cons'         shift, and enter state 29
	'else'         reduce using rule 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'head'         shift, and enter state 34
	'in'           reduce using rule 29
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'then'         reduce using rule 29
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	'}'            reduce using rule 29
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46
	%eof           reduce using rule 29

	Ident          goto state 18
	Integer        goto state 19
	Expr2          goto state 86
	Expr3          goto state 23

State 22

	Expr1 -> Expr2 .                                    (rule 39)

	'('            reduce using rule 39
	')'            reduce using rule 39
	','            reduce using rule 39
	'0'            reduce using rule 39
	':'            reduce using rule 39
	';'            reduce using rule 39
	'>'            reduce using rule 39
	']'            reduce using rule 39
	'cons'         reduce using rule 39
	'else'         reduce using rule 39
	'false'        reduce using rule 39
	'fix'          reduce using rule 39
	'fold'         reduce using rule 39
	'head'         reduce using rule 39
	'in'           reduce using rule 39
	'isempty'      reduce using rule 39
	'iszero'       reduce using rule 39
	'pred'         reduce using rule 39
	'succ'         reduce using rule 39
	'tail'         reduce using rule 39
	'then'         reduce using rule 39
	'true'         reduce using rule 39
	'unfold'       reduce using rule 39
	'{'            reduce using rule 39
	'}'            reduce using rule 39
	L_Ident        reduce using rule 39
	L_integ        reduce using rule 39
	%eof           reduce using rule 39


State 23

	Expr2 -> Expr3 .                                    (rule 50)
	Expr3 -> Expr3 . '.' Ident                          (rule 51)

	'('            reduce using rule 50
	')'            reduce using rule 50
	','            reduce using rule 50
	'.'            shift, and enter state 87
	'0'            reduce using rule 50
	':'            reduce using rule 50
	';'            reduce using rule 50
	'>'            reduce using rule 50
	']'            reduce using rule 50
	'cons'         reduce using rule 50
	'else'         reduce using rule 50
	'false'        reduce using rule 50
	'fix'          reduce using rule 50
	'fold'         reduce using rule 50
	'head'         reduce using rule 50
	'in'           reduce using rule 50
	'isempty'      reduce using rule 50
	'iszero'       reduce using rule 50
	'pred'         reduce using rule 50
	'succ'         reduce using rule 50
	'tail'         reduce using rule 50
	'then'         reduce using rule 50
	'true'         reduce using rule 50
	'unfold'       reduce using rule 50
	'{'            reduce using rule 50
	'}'            reduce using rule 50
	L_Ident        reduce using rule 50
	L_integ        reduce using rule 50
	%eof           reduce using rule 50


State 24

	%start_pTyping -> Typing .                          (rule 15)

	%eof           accept


State 25

	Expr3 -> '(' . Expr ')'                             (rule 57)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'<'            shift, and enter state 27
	'['            shift, and enter state 28
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'fun'          shift, and enter state 33
	'head'         shift, and enter state 34
	'if'           shift, and enter state 35
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'let'          shift, and enter state 38
	'match'        shift, and enter state 39
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	'{'            shift, and enter state 45
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr           goto state 113
	Expr1          goto state 21
	Expr2          goto state 22
	Expr3          goto state 23

State 26

	Expr3 -> '0' .                                      (rule 54)

	'('            reduce using rule 54
	')'            reduce using rule 54
	','            reduce using rule 54
	'.'            reduce using rule 54
	'0'            reduce using rule 54
	':'            reduce using rule 54
	';'            reduce using rule 54
	'>'            reduce using rule 54
	']'            reduce using rule 54
	'cons'         reduce using rule 54
	'else'         reduce using rule 54
	'false'        reduce using rule 54
	'fix'          reduce using rule 54
	'fold'         reduce using rule 54
	'head'         reduce using rule 54
	'in'           reduce using rule 54
	'isempty'      reduce using rule 54
	'iszero'       reduce using rule 54
	'pred'         reduce using rule 54
	'succ'         reduce using rule 54
	'tail'         reduce using rule 54
	'then'         reduce using rule 54
	'true'         reduce using rule 54
	'unfold'       reduce using rule 54
	'{'            reduce using rule 54
	'}'            reduce using rule 54
	L_Ident        reduce using rule 54
	L_integ        reduce using rule 54
	%eof           reduce using rule 54


State 27

	Expr -> '<' . Ident '=' Expr '>' 'as' '<' ListFieldType '>'    (rule 26)

	L_Ident        shift, and enter state 17

	Ident          goto state 112

State 28

	Expr -> '[' . ListExpr ']' 'as' '[' Type ']'        (rule 28)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'<'            shift, and enter state 27
	'['            shift, and enter state 28
	']'            reduce using rule 19
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'fun'          shift, and enter state 33
	'head'         shift, and enter state 34
	'if'           shift, and enter state 35
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'let'          shift, and enter state 38
	'match'        shift, and enter state 39
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	'{'            shift, and enter state 45
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	ListExpr       goto state 111
	Expr           goto state 78
	Expr1          goto state 21
	Expr2          goto state 22
	Expr3          goto state 23

State 29

	Expr2 -> 'cons' . Expr3 Expr3                       (rule 40)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'false'        shift, and enter state 30
	'true'         shift, and enter state 43
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr3          goto state 110

State 30

	Expr3 -> 'false' .                                  (rule 53)

	'('            reduce using rule 53
	')'            reduce using rule 53
	','            reduce using rule 53
	'.'            reduce using rule 53
	'0'            reduce using rule 53
	':'            reduce using rule 53
	';'            reduce using rule 53
	'>'            reduce using rule 53
	']'            reduce using rule 53
	'cons'         reduce using rule 53
	'else'         reduce using rule 53
	'false'        reduce using rule 53
	'fix'          reduce using rule 53
	'fold'         reduce using rule 53
	'head'         reduce using rule 53
	'in'           reduce using rule 53
	'isempty'      reduce using rule 53
	'iszero'       reduce using rule 53
	'pred'         reduce using rule 53
	'succ'         reduce using rule 53
	'tail'         reduce using rule 53
	'then'         reduce using rule 53
	'true'         reduce using rule 53
	'unfold'       reduce using rule 53
	'{'            reduce using rule 53
	'}'            reduce using rule 53
	L_Ident        reduce using rule 53
	L_integ        reduce using rule 53
	%eof           reduce using rule 53


State 31

	Expr2 -> 'fix' . Expr3                              (rule 46)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'false'        shift, and enter state 30
	'true'         shift, and enter state 43
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr3          goto state 109

State 32

	Expr2 -> 'fold' . '[' Type ']' Expr3                (rule 48)

	'['            shift, and enter state 108


State 33

	Expr -> 'fun' . '(' Type ')' '{' 'return' Expr '}'    (rule 24)

	'('            shift, and enter state 107


State 34

	Expr2 -> 'head' . Expr3                             (rule 41)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'false'        shift, and enter state 30
	'true'         shift, and enter state 43
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr3          goto state 106

State 35

	Expr -> 'if' . Expr 'then' Expr 'else' Expr         (rule 22)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'<'            shift, and enter state 27
	'['            shift, and enter state 28
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'fun'          shift, and enter state 33
	'head'         shift, and enter state 34
	'if'           shift, and enter state 35
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'let'          shift, and enter state 38
	'match'        shift, and enter state 39
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	'{'            shift, and enter state 45
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr           goto state 105
	Expr1          goto state 21
	Expr2          goto state 22
	Expr3          goto state 23

State 36

	Expr2 -> 'isempty' . Expr3                          (rule 47)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'false'        shift, and enter state 30
	'true'         shift, and enter state 43
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr3          goto state 104

State 37

	Expr2 -> 'iszero' . Expr3                           (rule 45)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'false'        shift, and enter state 30
	'true'         shift, and enter state 43
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr3          goto state 103

State 38

	Expr -> 'let' . Expr 'in' Expr                      (rule 23)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'<'            shift, and enter state 27
	'['            shift, and enter state 28
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'fun'          shift, and enter state 33
	'head'         shift, and enter state 34
	'if'           shift, and enter state 35
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'let'          shift, and enter state 38
	'match'        shift, and enter state 39
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	'{'            shift, and enter state 45
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr           goto state 102
	Expr1          goto state 21
	Expr2          goto state 22
	Expr3          goto state 23

State 39

	Expr -> 'match' . Expr1 '{' ListMatchCase '}'       (rule 27)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'head'         shift, and enter state 34
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr1          goto state 101
	Expr2          goto state 22
	Expr3          goto state 23

State 40

	Expr2 -> 'pred' . Expr3                             (rule 44)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'false'        shift, and enter state 30
	'true'         shift, and enter state 43
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr3          goto state 100

State 41

	Expr2 -> 'succ' . Expr3                             (rule 43)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'false'        shift, and enter state 30
	'true'         shift, and enter state 43
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr3          goto state 99

State 42

	Expr2 -> 'tail' . Expr3                             (rule 42)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'false'        shift, and enter state 30
	'true'         shift, and enter state 43
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr3          goto state 98

State 43

	Expr3 -> 'true' .                                   (rule 52)

	'('            reduce using rule 52
	')'            reduce using rule 52
	','            reduce using rule 52
	'.'            reduce using rule 52
	'0'            reduce using rule 52
	':'            reduce using rule 52
	';'            reduce using rule 52
	'>'            reduce using rule 52
	']'            reduce using rule 52
	'cons'         reduce using rule 52
	'else'         reduce using rule 52
	'false'        reduce using rule 52
	'fix'          reduce using rule 52
	'fold'         reduce using rule 52
	'head'         reduce using rule 52
	'in'           reduce using rule 52
	'isempty'      reduce using rule 52
	'iszero'       reduce using rule 52
	'pred'         reduce using rule 52
	'succ'         reduce using rule 52
	'tail'         reduce using rule 52
	'then'         reduce using rule 52
	'true'         reduce using rule 52
	'unfold'       reduce using rule 52
	'{'            reduce using rule 52
	'}'            reduce using rule 52
	L_Ident        reduce using rule 52
	L_integ        reduce using rule 52
	%eof           reduce using rule 52


State 44

	Expr2 -> 'unfold' . '[' Type ']' Expr3              (rule 49)

	'['            shift, and enter state 97


State 45

	Expr -> '{' . ListBinding '}'                       (rule 25)

	'}'            reduce using rule 35
	L_Ident        shift, and enter state 17

	Ident          goto state 68
	Binding        goto state 69
	ListBinding    goto state 96

State 46

	Integer -> L_integ .                                (rule 17)

	'('            reduce using rule 17
	')'            reduce using rule 17
	','            reduce using rule 17
	'->'           reduce using rule 17
	'.'            reduce using rule 17
	'0'            reduce using rule 17
	':'            reduce using rule 17
	';'            reduce using rule 17
	'>'            reduce using rule 17
	']'            reduce using rule 17
	'cons'         reduce using rule 17
	'else'         reduce using rule 17
	'false'        reduce using rule 17
	'fix'          reduce using rule 17
	'fold'         reduce using rule 17
	'head'         reduce using rule 17
	'in'           reduce using rule 17
	'isempty'      reduce using rule 17
	'iszero'       reduce using rule 17
	'pred'         reduce using rule 17
	'succ'         reduce using rule 17
	'tail'         reduce using rule 17
	'then'         reduce using rule 17
	'true'         reduce using rule 17
	'unfold'       reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17
	L_Ident        reduce using rule 17
	L_integ        reduce using rule 17
	%eof           reduce using rule 17


State 47

	FieldType -> Ident . ':' Type                       (rule 70)

	':'            shift, and enter state 95


State 48

	ListFieldType -> FieldType .                        (rule 72)
	ListFieldType -> FieldType . ',' ListFieldType      (rule 73)

	','            shift, and enter state 94
	'>'            reduce using rule 72
	'}'            reduce using rule 72
	%eof           reduce using rule 72


State 49

	%start_pListFieldType -> ListFieldType .            (rule 14)

	%eof           accept


State 50

	%start_pFieldType -> FieldType .                    (rule 13)

	%eof           accept


State 51

	Type2 -> Ident .                                    (rule 67)

	')'            reduce using rule 67
	','            reduce using rule 67
	'->'           reduce using rule 67
	'>'            reduce using rule 67
	']'            reduce using rule 67
	'}'            reduce using rule 67
	%eof           reduce using rule 67


State 52

	Type2 -> Integer .                                  (rule 68)

	')'            reduce using rule 68
	','            reduce using rule 68
	'->'           reduce using rule 68
	'>'            reduce using rule 68
	']'            reduce using rule 68
	'}'            reduce using rule 68
	%eof           reduce using rule 68


State 53

	%start_pType2 -> Type2 .                            (rule 12)

	%eof           accept


State 54

	Type2 -> '(' . Type ')'                             (rule 69)

	'('            shift, and enter state 54
	'<'            shift, and enter state 59
	'Bool'         shift, and enter state 55
	'Nat'          shift, and enter state 56
	'['            shift, and enter state 60
	'{'            shift, and enter state 61
	'µ'            shift, and enter state 64
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 51
	Integer        goto state 52
	Type           goto state 93
	Type1          goto state 63
	Type2          goto state 58

State 55

	Type2 -> 'Bool' .                                   (rule 65)

	')'            reduce using rule 65
	','            reduce using rule 65
	'->'           reduce using rule 65
	'>'            reduce using rule 65
	']'            reduce using rule 65
	'}'            reduce using rule 65
	%eof           reduce using rule 65


State 56

	Type2 -> 'Nat' .                                    (rule 66)

	')'            reduce using rule 66
	','            reduce using rule 66
	'->'           reduce using rule 66
	'>'            reduce using rule 66
	']'            reduce using rule 66
	'}'            reduce using rule 66
	%eof           reduce using rule 66


State 57

	%start_pType1 -> Type1 .                            (rule 11)

	%eof           accept


State 58

	Type1 -> Type2 .                                    (rule 64)

	')'            reduce using rule 64
	','            reduce using rule 64
	'->'           reduce using rule 64
	'>'            reduce using rule 64
	']'            reduce using rule 64
	'}'            reduce using rule 64
	%eof           reduce using rule 64


State 59

	Type1 -> '<' . ListFieldType '>'                    (rule 62)

	'>'            reduce using rule 71
	L_Ident        shift, and enter state 17

	Ident          goto state 47
	FieldType      goto state 48
	ListFieldType  goto state 92

State 60

	Type1 -> '[' . Type ']'                             (rule 63)

	'('            shift, and enter state 54
	'<'            shift, and enter state 59
	'Bool'         shift, and enter state 55
	'Nat'          shift, and enter state 56
	'['            shift, and enter state 60
	'{'            shift, and enter state 61
	'µ'            shift, and enter state 64
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 51
	Integer        goto state 52
	Type           goto state 91
	Type1          goto state 63
	Type2          goto state 58

State 61

	Type1 -> '{' . ListFieldType '}'                    (rule 61)

	'}'            reduce using rule 71
	L_Ident        shift, and enter state 17

	Ident          goto state 47
	FieldType      goto state 48
	ListFieldType  goto state 90

State 62

	%start_pType -> Type .                              (rule 10)

	%eof           accept


State 63

	Type -> Type1 . '->' Type                           (rule 58)
	Type -> Type1 .                                     (rule 60)

	')'            reduce using rule 60
	','            reduce using rule 60
	'->'           shift, and enter state 89
	'>'            reduce using rule 60
	']'            reduce using rule 60
	'}'            reduce using rule 60
	%eof           reduce using rule 60


State 64

	Type -> 'µ' . '(' Type ')'                          (rule 59)

	'('            shift, and enter state 88


State 65

	%start_pExpr3 -> Expr3 .                            (rule 9)
	Expr3 -> Expr3 . '.' Ident                          (rule 51)

	'.'            shift, and enter state 87
	%eof           accept


State 66

	%start_pExpr2 -> Expr2 .                            (rule 8)

	%eof           accept


State 67

	%start_pExpr1 -> Expr1 .                            (rule 7)
	Expr1 -> Expr1 . Expr2                              (rule 38)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'head'         shift, and enter state 34
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46
	%eof           accept

	Ident          goto state 18
	Integer        goto state 19
	Expr2          goto state 86
	Expr3          goto state 23

State 68

	Binding -> Ident . '=' Expr                         (rule 34)

	'='            shift, and enter state 85


State 69

	ListBinding -> Binding .                            (rule 36)
	ListBinding -> Binding . ',' ListBinding            (rule 37)

	','            shift, and enter state 84
	'}'            reduce using rule 36
	%eof           reduce using rule 36


State 70

	%start_pListBinding -> ListBinding .                (rule 6)

	%eof           accept


State 71

	%start_pBinding -> Binding .                        (rule 5)

	%eof           accept


State 72

	ListMatchCase -> MatchCase .                        (rule 32)
	ListMatchCase -> MatchCase . ';' ListMatchCase      (rule 33)

	';'            shift, and enter state 83
	'}'            reduce using rule 32
	%eof           reduce using rule 32


State 73

	%start_pListMatchCase -> ListMatchCase .            (rule 4)

	%eof           accept


State 74

	MatchCase -> '<' . Ident '>' '=>' Expr              (rule 30)

	L_Ident        shift, and enter state 17

	Ident          goto state 82

State 75

	%start_pMatchCase -> MatchCase .                    (rule 3)

	%eof           accept


State 76

	%start_pExpr -> Expr .                              (rule 2)

	%eof           accept


State 77

	%start_pListExpr -> ListExpr .                      (rule 1)

	%eof           accept


State 78

	ListExpr -> Expr .                                  (rule 20)
	ListExpr -> Expr . ';' ListExpr                     (rule 21)

	';'            shift, and enter state 81
	']'            reduce using rule 20
	%eof           reduce using rule 20


State 79

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 80

	Program -> ListExpr .                               (rule 18)

	%eof           reduce using rule 18


State 81

	ListExpr -> Expr ';' . ListExpr                     (rule 21)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'<'            shift, and enter state 27
	'['            shift, and enter state 28
	']'            reduce using rule 19
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'fun'          shift, and enter state 33
	'head'         shift, and enter state 34
	'if'           shift, and enter state 35
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'let'          shift, and enter state 38
	'match'        shift, and enter state 39
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	'{'            shift, and enter state 45
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46
	%eof           reduce using rule 19

	Ident          goto state 18
	Integer        goto state 19
	ListExpr       goto state 140
	Expr           goto state 78
	Expr1          goto state 21
	Expr2          goto state 22
	Expr3          goto state 23

State 82

	MatchCase -> '<' Ident . '>' '=>' Expr              (rule 30)

	'>'            shift, and enter state 139


State 83

	ListMatchCase -> MatchCase ';' . ListMatchCase      (rule 33)

	'<'            shift, and enter state 74
	'}'            reduce using rule 31
	%eof           reduce using rule 31

	MatchCase      goto state 72
	ListMatchCase  goto state 138

State 84

	ListBinding -> Binding ',' . ListBinding            (rule 37)

	'}'            reduce using rule 35
	L_Ident        shift, and enter state 17
	%eof           reduce using rule 35

	Ident          goto state 68
	Binding        goto state 69
	ListBinding    goto state 137

State 85

	Binding -> Ident '=' . Expr                         (rule 34)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'<'            shift, and enter state 27
	'['            shift, and enter state 28
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'fun'          shift, and enter state 33
	'head'         shift, and enter state 34
	'if'           shift, and enter state 35
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'let'          shift, and enter state 38
	'match'        shift, and enter state 39
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	'{'            shift, and enter state 45
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr           goto state 136
	Expr1          goto state 21
	Expr2          goto state 22
	Expr3          goto state 23

State 86

	Expr1 -> Expr1 Expr2 .                              (rule 38)

	'('            reduce using rule 38
	')'            reduce using rule 38
	','            reduce using rule 38
	'0'            reduce using rule 38
	':'            reduce using rule 38
	';'            reduce using rule 38
	'>'            reduce using rule 38
	']'            reduce using rule 38
	'cons'         reduce using rule 38
	'else'         reduce using rule 38
	'false'        reduce using rule 38
	'fix'          reduce using rule 38
	'fold'         reduce using rule 38
	'head'         reduce using rule 38
	'in'           reduce using rule 38
	'isempty'      reduce using rule 38
	'iszero'       reduce using rule 38
	'pred'         reduce using rule 38
	'succ'         reduce using rule 38
	'tail'         reduce using rule 38
	'then'         reduce using rule 38
	'true'         reduce using rule 38
	'unfold'       reduce using rule 38
	'{'            reduce using rule 38
	'}'            reduce using rule 38
	L_Ident        reduce using rule 38
	L_integ        reduce using rule 38
	%eof           reduce using rule 38


State 87

	Expr3 -> Expr3 '.' . Ident                          (rule 51)

	L_Ident        shift, and enter state 17

	Ident          goto state 135

State 88

	Type -> 'µ' '(' . Type ')'                          (rule 59)

	'('            shift, and enter state 54
	'<'            shift, and enter state 59
	'Bool'         shift, and enter state 55
	'Nat'          shift, and enter state 56
	'['            shift, and enter state 60
	'{'            shift, and enter state 61
	'µ'            shift, and enter state 64
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 51
	Integer        goto state 52
	Type           goto state 134
	Type1          goto state 63
	Type2          goto state 58

State 89

	Type -> Type1 '->' . Type                           (rule 58)

	'('            shift, and enter state 54
	'<'            shift, and enter state 59
	'Bool'         shift, and enter state 55
	'Nat'          shift, and enter state 56
	'['            shift, and enter state 60
	'{'            shift, and enter state 61
	'µ'            shift, and enter state 64
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 51
	Integer        goto state 52
	Type           goto state 133
	Type1          goto state 63
	Type2          goto state 58

State 90

	Type1 -> '{' ListFieldType . '}'                    (rule 61)

	'}'            shift, and enter state 132


State 91

	Type1 -> '[' Type . ']'                             (rule 63)

	']'            shift, and enter state 131


State 92

	Type1 -> '<' ListFieldType . '>'                    (rule 62)

	'>'            shift, and enter state 130


State 93

	Type2 -> '(' Type . ')'                             (rule 69)

	')'            shift, and enter state 129


State 94

	ListFieldType -> FieldType ',' . ListFieldType      (rule 73)

	'>'            reduce using rule 71
	'}'            reduce using rule 71
	L_Ident        shift, and enter state 17
	%eof           reduce using rule 71

	Ident          goto state 47
	FieldType      goto state 48
	ListFieldType  goto state 128

State 95

	FieldType -> Ident ':' . Type                       (rule 70)

	'('            shift, and enter state 54
	'<'            shift, and enter state 59
	'Bool'         shift, and enter state 55
	'Nat'          shift, and enter state 56
	'['            shift, and enter state 60
	'{'            shift, and enter state 61
	'µ'            shift, and enter state 64
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 51
	Integer        goto state 52
	Type           goto state 127
	Type1          goto state 63
	Type2          goto state 58

State 96

	Expr -> '{' ListBinding . '}'                       (rule 25)

	'}'            shift, and enter state 126


State 97

	Expr2 -> 'unfold' '[' . Type ']' Expr3              (rule 49)

	'('            shift, and enter state 54
	'<'            shift, and enter state 59
	'Bool'         shift, and enter state 55
	'Nat'          shift, and enter state 56
	'['            shift, and enter state 60
	'{'            shift, and enter state 61
	'µ'            shift, and enter state 64
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 51
	Integer        goto state 52
	Type           goto state 125
	Type1          goto state 63
	Type2          goto state 58

State 98

	Expr2 -> 'tail' Expr3 .                             (rule 42)
	Expr3 -> Expr3 . '.' Ident                          (rule 51)

	'('            reduce using rule 42
	')'            reduce using rule 42
	','            reduce using rule 42
	'.'            shift, and enter state 87
	'0'            reduce using rule 42
	':'            reduce using rule 42
	';'            reduce using rule 42
	'>'            reduce using rule 42
	']'            reduce using rule 42
	'cons'         reduce using rule 42
	'else'         reduce using rule 42
	'false'        reduce using rule 42
	'fix'          reduce using rule 42
	'fold'         reduce using rule 42
	'head'         reduce using rule 42
	'in'           reduce using rule 42
	'isempty'      reduce using rule 42
	'iszero'       reduce using rule 42
	'pred'         reduce using rule 42
	'succ'         reduce using rule 42
	'tail'         reduce using rule 42
	'then'         reduce using rule 42
	'true'         reduce using rule 42
	'unfold'       reduce using rule 42
	'{'            reduce using rule 42
	'}'            reduce using rule 42
	L_Ident        reduce using rule 42
	L_integ        reduce using rule 42
	%eof           reduce using rule 42


State 99

	Expr2 -> 'succ' Expr3 .                             (rule 43)
	Expr3 -> Expr3 . '.' Ident                          (rule 51)

	'('            reduce using rule 43
	')'            reduce using rule 43
	','            reduce using rule 43
	'.'            shift, and enter state 87
	'0'            reduce using rule 43
	':'            reduce using rule 43
	';'            reduce using rule 43
	'>'            reduce using rule 43
	']'            reduce using rule 43
	'cons'         reduce using rule 43
	'else'         reduce using rule 43
	'false'        reduce using rule 43
	'fix'          reduce using rule 43
	'fold'         reduce using rule 43
	'head'         reduce using rule 43
	'in'           reduce using rule 43
	'isempty'      reduce using rule 43
	'iszero'       reduce using rule 43
	'pred'         reduce using rule 43
	'succ'         reduce using rule 43
	'tail'         reduce using rule 43
	'then'         reduce using rule 43
	'true'         reduce using rule 43
	'unfold'       reduce using rule 43
	'{'            reduce using rule 43
	'}'            reduce using rule 43
	L_Ident        reduce using rule 43
	L_integ        reduce using rule 43
	%eof           reduce using rule 43


State 100

	Expr2 -> 'pred' Expr3 .                             (rule 44)
	Expr3 -> Expr3 . '.' Ident                          (rule 51)

	'('            reduce using rule 44
	')'            reduce using rule 44
	','            reduce using rule 44
	'.'            shift, and enter state 87
	'0'            reduce using rule 44
	':'            reduce using rule 44
	';'            reduce using rule 44
	'>'            reduce using rule 44
	']'            reduce using rule 44
	'cons'         reduce using rule 44
	'else'         reduce using rule 44
	'false'        reduce using rule 44
	'fix'          reduce using rule 44
	'fold'         reduce using rule 44
	'head'         reduce using rule 44
	'in'           reduce using rule 44
	'isempty'      reduce using rule 44
	'iszero'       reduce using rule 44
	'pred'         reduce using rule 44
	'succ'         reduce using rule 44
	'tail'         reduce using rule 44
	'then'         reduce using rule 44
	'true'         reduce using rule 44
	'unfold'       reduce using rule 44
	'{'            reduce using rule 44
	'}'            reduce using rule 44
	L_Ident        reduce using rule 44
	L_integ        reduce using rule 44
	%eof           reduce using rule 44


State 101

	Expr -> 'match' Expr1 . '{' ListMatchCase '}'       (rule 27)
	Expr1 -> Expr1 . Expr2                              (rule 38)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'head'         shift, and enter state 34
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	'{'            shift, and enter state 124
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr2          goto state 86
	Expr3          goto state 23

State 102

	Expr -> 'let' Expr . 'in' Expr                      (rule 23)

	'in'           shift, and enter state 123


State 103

	Expr2 -> 'iszero' Expr3 .                           (rule 45)
	Expr3 -> Expr3 . '.' Ident                          (rule 51)

	'('            reduce using rule 45
	')'            reduce using rule 45
	','            reduce using rule 45
	'.'            shift, and enter state 87
	'0'            reduce using rule 45
	':'            reduce using rule 45
	';'            reduce using rule 45
	'>'            reduce using rule 45
	']'            reduce using rule 45
	'cons'         reduce using rule 45
	'else'         reduce using rule 45
	'false'        reduce using rule 45
	'fix'          reduce using rule 45
	'fold'         reduce using rule 45
	'head'         reduce using rule 45
	'in'           reduce using rule 45
	'isempty'      reduce using rule 45
	'iszero'       reduce using rule 45
	'pred'         reduce using rule 45
	'succ'         reduce using rule 45
	'tail'         reduce using rule 45
	'then'         reduce using rule 45
	'true'         reduce using rule 45
	'unfold'       reduce using rule 45
	'{'            reduce using rule 45
	'}'            reduce using rule 45
	L_Ident        reduce using rule 45
	L_integ        reduce using rule 45
	%eof           reduce using rule 45


State 104

	Expr2 -> 'isempty' Expr3 .                          (rule 47)
	Expr3 -> Expr3 . '.' Ident                          (rule 51)

	'('            reduce using rule 47
	')'            reduce using rule 47
	','            reduce using rule 47
	'.'            shift, and enter state 87
	'0'            reduce using rule 47
	':'            reduce using rule 47
	';'            reduce using rule 47
	'>'            reduce using rule 47
	']'            reduce using rule 47
	'cons'         reduce using rule 47
	'else'         reduce using rule 47
	'false'        reduce using rule 47
	'fix'          reduce using rule 47
	'fold'         reduce using rule 47
	'head'         reduce using rule 47
	'in'           reduce using rule 47
	'isempty'      reduce using rule 47
	'iszero'       reduce using rule 47
	'pred'         reduce using rule 47
	'succ'         reduce using rule 47
	'tail'         reduce using rule 47
	'then'         reduce using rule 47
	'true'         reduce using rule 47
	'unfold'       reduce using rule 47
	'{'            reduce using rule 47
	'}'            reduce using rule 47
	L_Ident        reduce using rule 47
	L_integ        reduce using rule 47
	%eof           reduce using rule 47


State 105

	Expr -> 'if' Expr . 'then' Expr 'else' Expr         (rule 22)

	'then'         shift, and enter state 122


State 106

	Expr2 -> 'head' Expr3 .                             (rule 41)
	Expr3 -> Expr3 . '.' Ident                          (rule 51)

	'('            reduce using rule 41
	')'            reduce using rule 41
	','            reduce using rule 41
	'.'            shift, and enter state 87
	'0'            reduce using rule 41
	':'            reduce using rule 41
	';'            reduce using rule 41
	'>'            reduce using rule 41
	']'            reduce using rule 41
	'cons'         reduce using rule 41
	'else'         reduce using rule 41
	'false'        reduce using rule 41
	'fix'          reduce using rule 41
	'fold'         reduce using rule 41
	'head'         reduce using rule 41
	'in'           reduce using rule 41
	'isempty'      reduce using rule 41
	'iszero'       reduce using rule 41
	'pred'         reduce using rule 41
	'succ'         reduce using rule 41
	'tail'         reduce using rule 41
	'then'         reduce using rule 41
	'true'         reduce using rule 41
	'unfold'       reduce using rule 41
	'{'            reduce using rule 41
	'}'            reduce using rule 41
	L_Ident        reduce using rule 41
	L_integ        reduce using rule 41
	%eof           reduce using rule 41


State 107

	Expr -> 'fun' '(' . Type ')' '{' 'return' Expr '}'    (rule 24)

	'('            shift, and enter state 54
	'<'            shift, and enter state 59
	'Bool'         shift, and enter state 55
	'Nat'          shift, and enter state 56
	'['            shift, and enter state 60
	'{'            shift, and enter state 61
	'µ'            shift, and enter state 64
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 51
	Integer        goto state 52
	Type           goto state 121
	Type1          goto state 63
	Type2          goto state 58

State 108

	Expr2 -> 'fold' '[' . Type ']' Expr3                (rule 48)

	'('            shift, and enter state 54
	'<'            shift, and enter state 59
	'Bool'         shift, and enter state 55
	'Nat'          shift, and enter state 56
	'['            shift, and enter state 60
	'{'            shift, and enter state 61
	'µ'            shift, and enter state 64
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 51
	Integer        goto state 52
	Type           goto state 120
	Type1          goto state 63
	Type2          goto state 58

State 109

	Expr2 -> 'fix' Expr3 .                              (rule 46)
	Expr3 -> Expr3 . '.' Ident                          (rule 51)

	'('            reduce using rule 46
	')'            reduce using rule 46
	','            reduce using rule 46
	'.'            shift, and enter state 87
	'0'            reduce using rule 46
	':'            reduce using rule 46
	';'            reduce using rule 46
	'>'            reduce using rule 46
	']'            reduce using rule 46
	'cons'         reduce using rule 46
	'else'         reduce using rule 46
	'false'        reduce using rule 46
	'fix'          reduce using rule 46
	'fold'         reduce using rule 46
	'head'         reduce using rule 46
	'in'           reduce using rule 46
	'isempty'      reduce using rule 46
	'iszero'       reduce using rule 46
	'pred'         reduce using rule 46
	'succ'         reduce using rule 46
	'tail'         reduce using rule 46
	'then'         reduce using rule 46
	'true'         reduce using rule 46
	'unfold'       reduce using rule 46
	'{'            reduce using rule 46
	'}'            reduce using rule 46
	L_Ident        reduce using rule 46
	L_integ        reduce using rule 46
	%eof           reduce using rule 46


State 110

	Expr2 -> 'cons' Expr3 . Expr3                       (rule 40)
	Expr3 -> Expr3 . '.' Ident                          (rule 51)

	'('            shift, and enter state 25
	'.'            shift, and enter state 87
	'0'            shift, and enter state 26
	'false'        shift, and enter state 30
	'true'         shift, and enter state 43
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr3          goto state 119

State 111

	Expr -> '[' ListExpr . ']' 'as' '[' Type ']'        (rule 28)

	']'            shift, and enter state 118


State 112

	Expr -> '<' Ident . '=' Expr '>' 'as' '<' ListFieldType '>'    (rule 26)

	'='            shift, and enter state 117


State 113

	Expr3 -> '(' Expr . ')'                             (rule 57)

	')'            shift, and enter state 116


State 114

	Typing -> Expr ':' . Type                           (rule 74)

	'('            shift, and enter state 54
	'<'            shift, and enter state 59
	'Bool'         shift, and enter state 55
	'Nat'          shift, and enter state 56
	'['            shift, and enter state 60
	'{'            shift, and enter state 61
	'µ'            shift, and enter state 64
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 51
	Integer        goto state 52
	Type           goto state 115
	Type1          goto state 63
	Type2          goto state 58

State 115

	Typing -> Expr ':' Type .                           (rule 74)

	%eof           reduce using rule 74


State 116

	Expr3 -> '(' Expr ')' .                             (rule 57)

	'('            reduce using rule 57
	')'            reduce using rule 57
	','            reduce using rule 57
	'.'            reduce using rule 57
	'0'            reduce using rule 57
	':'            reduce using rule 57
	';'            reduce using rule 57
	'>'            reduce using rule 57
	']'            reduce using rule 57
	'cons'         reduce using rule 57
	'else'         reduce using rule 57
	'false'        reduce using rule 57
	'fix'          reduce using rule 57
	'fold'         reduce using rule 57
	'head'         reduce using rule 57
	'in'           reduce using rule 57
	'isempty'      reduce using rule 57
	'iszero'       reduce using rule 57
	'pred'         reduce using rule 57
	'succ'         reduce using rule 57
	'tail'         reduce using rule 57
	'then'         reduce using rule 57
	'true'         reduce using rule 57
	'unfold'       reduce using rule 57
	'{'            reduce using rule 57
	'}'            reduce using rule 57
	L_Ident        reduce using rule 57
	L_integ        reduce using rule 57
	%eof           reduce using rule 57


State 117

	Expr -> '<' Ident '=' . Expr '>' 'as' '<' ListFieldType '>'    (rule 26)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'<'            shift, and enter state 27
	'['            shift, and enter state 28
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'fun'          shift, and enter state 33
	'head'         shift, and enter state 34
	'if'           shift, and enter state 35
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'let'          shift, and enter state 38
	'match'        shift, and enter state 39
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	'{'            shift, and enter state 45
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr           goto state 150
	Expr1          goto state 21
	Expr2          goto state 22
	Expr3          goto state 23

State 118

	Expr -> '[' ListExpr ']' . 'as' '[' Type ']'        (rule 28)

	'as'           shift, and enter state 149


State 119

	Expr2 -> 'cons' Expr3 Expr3 .                       (rule 40)
	Expr3 -> Expr3 . '.' Ident                          (rule 51)

	'('            reduce using rule 40
	')'            reduce using rule 40
	','            reduce using rule 40
	'.'            shift, and enter state 87
	'0'            reduce using rule 40
	':'            reduce using rule 40
	';'            reduce using rule 40
	'>'            reduce using rule 40
	']'            reduce using rule 40
	'cons'         reduce using rule 40
	'else'         reduce using rule 40
	'false'        reduce using rule 40
	'fix'          reduce using rule 40
	'fold'         reduce using rule 40
	'head'         reduce using rule 40
	'in'           reduce using rule 40
	'isempty'      reduce using rule 40
	'iszero'       reduce using rule 40
	'pred'         reduce using rule 40
	'succ'         reduce using rule 40
	'tail'         reduce using rule 40
	'then'         reduce using rule 40
	'true'         reduce using rule 40
	'unfold'       reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	L_Ident        reduce using rule 40
	L_integ        reduce using rule 40
	%eof           reduce using rule 40


State 120

	Expr2 -> 'fold' '[' Type . ']' Expr3                (rule 48)

	']'            shift, and enter state 148


State 121

	Expr -> 'fun' '(' Type . ')' '{' 'return' Expr '}'    (rule 24)

	')'            shift, and enter state 147


State 122

	Expr -> 'if' Expr 'then' . Expr 'else' Expr         (rule 22)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'<'            shift, and enter state 27
	'['            shift, and enter state 28
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'fun'          shift, and enter state 33
	'head'         shift, and enter state 34
	'if'           shift, and enter state 35
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'let'          shift, and enter state 38
	'match'        shift, and enter state 39
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	'{'            shift, and enter state 45
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr           goto state 146
	Expr1          goto state 21
	Expr2          goto state 22
	Expr3          goto state 23

State 123

	Expr -> 'let' Expr 'in' . Expr                      (rule 23)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'<'            shift, and enter state 27
	'['            shift, and enter state 28
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'fun'          shift, and enter state 33
	'head'         shift, and enter state 34
	'if'           shift, and enter state 35
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'let'          shift, and enter state 38
	'match'        shift, and enter state 39
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	'{'            shift, and enter state 45
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr           goto state 145
	Expr1          goto state 21
	Expr2          goto state 22
	Expr3          goto state 23

State 124

	Expr -> 'match' Expr1 '{' . ListMatchCase '}'       (rule 27)

	'<'            shift, and enter state 74
	'}'            reduce using rule 31

	MatchCase      goto state 72
	ListMatchCase  goto state 144

State 125

	Expr2 -> 'unfold' '[' Type . ']' Expr3              (rule 49)

	']'            shift, and enter state 143


State 126

	Expr -> '{' ListBinding '}' .                       (rule 25)

	')'            reduce using rule 25
	','            reduce using rule 25
	':'            reduce using rule 25
	';'            reduce using rule 25
	'>'            reduce using rule 25
	']'            reduce using rule 25
	'else'         reduce using rule 25
	'in'           reduce using rule 25
	'then'         reduce using rule 25
	'}'            reduce using rule 25
	%eof           reduce using rule 25


State 127

	FieldType -> Ident ':' Type .                       (rule 70)

	','            reduce using rule 70
	'>'            reduce using rule 70
	'}'            reduce using rule 70
	%eof           reduce using rule 70


State 128

	ListFieldType -> FieldType ',' ListFieldType .      (rule 73)

	'>'            reduce using rule 73
	'}'            reduce using rule 73
	%eof           reduce using rule 73


State 129

	Type2 -> '(' Type ')' .                             (rule 69)

	')'            reduce using rule 69
	','            reduce using rule 69
	'->'           reduce using rule 69
	'>'            reduce using rule 69
	']'            reduce using rule 69
	'}'            reduce using rule 69
	%eof           reduce using rule 69


State 130

	Type1 -> '<' ListFieldType '>' .                    (rule 62)

	')'            reduce using rule 62
	','            reduce using rule 62
	'->'           reduce using rule 62
	'>'            reduce using rule 62
	']'            reduce using rule 62
	'}'            reduce using rule 62
	%eof           reduce using rule 62


State 131

	Type1 -> '[' Type ']' .                             (rule 63)

	')'            reduce using rule 63
	','            reduce using rule 63
	'->'           reduce using rule 63
	'>'            reduce using rule 63
	']'            reduce using rule 63
	'}'            reduce using rule 63
	%eof           reduce using rule 63


State 132

	Type1 -> '{' ListFieldType '}' .                    (rule 61)

	')'            reduce using rule 61
	','            reduce using rule 61
	'->'           reduce using rule 61
	'>'            reduce using rule 61
	']'            reduce using rule 61
	'}'            reduce using rule 61
	%eof           reduce using rule 61


State 133

	Type -> Type1 '->' Type .                           (rule 58)

	')'            reduce using rule 58
	','            reduce using rule 58
	'>'            reduce using rule 58
	']'            reduce using rule 58
	'}'            reduce using rule 58
	%eof           reduce using rule 58


State 134

	Type -> 'µ' '(' Type . ')'                          (rule 59)

	')'            shift, and enter state 142


State 135

	Expr3 -> Expr3 '.' Ident .                          (rule 51)

	'('            reduce using rule 51
	')'            reduce using rule 51
	','            reduce using rule 51
	'.'            reduce using rule 51
	'0'            reduce using rule 51
	':'            reduce using rule 51
	';'            reduce using rule 51
	'>'            reduce using rule 51
	']'            reduce using rule 51
	'cons'         reduce using rule 51
	'else'         reduce using rule 51
	'false'        reduce using rule 51
	'fix'          reduce using rule 51
	'fold'         reduce using rule 51
	'head'         reduce using rule 51
	'in'           reduce using rule 51
	'isempty'      reduce using rule 51
	'iszero'       reduce using rule 51
	'pred'         reduce using rule 51
	'succ'         reduce using rule 51
	'tail'         reduce using rule 51
	'then'         reduce using rule 51
	'true'         reduce using rule 51
	'unfold'       reduce using rule 51
	'{'            reduce using rule 51
	'}'            reduce using rule 51
	L_Ident        reduce using rule 51
	L_integ        reduce using rule 51
	%eof           reduce using rule 51


State 136

	Binding -> Ident '=' Expr .                         (rule 34)

	','            reduce using rule 34
	'}'            reduce using rule 34
	%eof           reduce using rule 34


State 137

	ListBinding -> Binding ',' ListBinding .            (rule 37)

	'}'            reduce using rule 37
	%eof           reduce using rule 37


State 138

	ListMatchCase -> MatchCase ';' ListMatchCase .      (rule 33)

	'}'            reduce using rule 33
	%eof           reduce using rule 33


State 139

	MatchCase -> '<' Ident '>' . '=>' Expr              (rule 30)

	'=>'           shift, and enter state 141


State 140

	ListExpr -> Expr ';' ListExpr .                     (rule 21)

	']'            reduce using rule 21
	%eof           reduce using rule 21


State 141

	MatchCase -> '<' Ident '>' '=>' . Expr              (rule 30)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'<'            shift, and enter state 27
	'['            shift, and enter state 28
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'fun'          shift, and enter state 33
	'head'         shift, and enter state 34
	'if'           shift, and enter state 35
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'let'          shift, and enter state 38
	'match'        shift, and enter state 39
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	'{'            shift, and enter state 45
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr           goto state 158
	Expr1          goto state 21
	Expr2          goto state 22
	Expr3          goto state 23

State 142

	Type -> 'µ' '(' Type ')' .                          (rule 59)

	')'            reduce using rule 59
	','            reduce using rule 59
	'>'            reduce using rule 59
	']'            reduce using rule 59
	'}'            reduce using rule 59
	%eof           reduce using rule 59


State 143

	Expr2 -> 'unfold' '[' Type ']' . Expr3              (rule 49)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'false'        shift, and enter state 30
	'true'         shift, and enter state 43
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr3          goto state 157

State 144

	Expr -> 'match' Expr1 '{' ListMatchCase . '}'       (rule 27)

	'}'            shift, and enter state 156


State 145

	Expr -> 'let' Expr 'in' Expr .                      (rule 23)

	')'            reduce using rule 23
	','            reduce using rule 23
	':'            reduce using rule 23
	';'            reduce using rule 23
	'>'            reduce using rule 23
	']'            reduce using rule 23
	'else'         reduce using rule 23
	'in'           reduce using rule 23
	'then'         reduce using rule 23
	'}'            reduce using rule 23
	%eof           reduce using rule 23


State 146

	Expr -> 'if' Expr 'then' Expr . 'else' Expr         (rule 22)

	'else'         shift, and enter state 155


State 147

	Expr -> 'fun' '(' Type ')' . '{' 'return' Expr '}'    (rule 24)

	'{'            shift, and enter state 154


State 148

	Expr2 -> 'fold' '[' Type ']' . Expr3                (rule 48)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'false'        shift, and enter state 30
	'true'         shift, and enter state 43
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr3          goto state 153

State 149

	Expr -> '[' ListExpr ']' 'as' . '[' Type ']'        (rule 28)

	'['            shift, and enter state 152


State 150

	Expr -> '<' Ident '=' Expr . '>' 'as' '<' ListFieldType '>'    (rule 26)

	'>'            shift, and enter state 151


State 151

	Expr -> '<' Ident '=' Expr '>' . 'as' '<' ListFieldType '>'    (rule 26)

	'as'           shift, and enter state 162


State 152

	Expr -> '[' ListExpr ']' 'as' '[' . Type ']'        (rule 28)

	'('            shift, and enter state 54
	'<'            shift, and enter state 59
	'Bool'         shift, and enter state 55
	'Nat'          shift, and enter state 56
	'['            shift, and enter state 60
	'{'            shift, and enter state 61
	'µ'            shift, and enter state 64
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 51
	Integer        goto state 52
	Type           goto state 161
	Type1          goto state 63
	Type2          goto state 58

State 153

	Expr2 -> 'fold' '[' Type ']' Expr3 .                (rule 48)
	Expr3 -> Expr3 . '.' Ident                          (rule 51)

	'('            reduce using rule 48
	')'            reduce using rule 48
	','            reduce using rule 48
	'.'            shift, and enter state 87
	'0'            reduce using rule 48
	':'            reduce using rule 48
	';'            reduce using rule 48
	'>'            reduce using rule 48
	']'            reduce using rule 48
	'cons'         reduce using rule 48
	'else'         reduce using rule 48
	'false'        reduce using rule 48
	'fix'          reduce using rule 48
	'fold'         reduce using rule 48
	'head'         reduce using rule 48
	'in'           reduce using rule 48
	'isempty'      reduce using rule 48
	'iszero'       reduce using rule 48
	'pred'         reduce using rule 48
	'succ'         reduce using rule 48
	'tail'         reduce using rule 48
	'then'         reduce using rule 48
	'true'         reduce using rule 48
	'unfold'       reduce using rule 48
	'{'            reduce using rule 48
	'}'            reduce using rule 48
	L_Ident        reduce using rule 48
	L_integ        reduce using rule 48
	%eof           reduce using rule 48


State 154

	Expr -> 'fun' '(' Type ')' '{' . 'return' Expr '}'    (rule 24)

	'return'       shift, and enter state 160


State 155

	Expr -> 'if' Expr 'then' Expr 'else' . Expr         (rule 22)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'<'            shift, and enter state 27
	'['            shift, and enter state 28
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'fun'          shift, and enter state 33
	'head'         shift, and enter state 34
	'if'           shift, and enter state 35
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'let'          shift, and enter state 38
	'match'        shift, and enter state 39
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	'{'            shift, and enter state 45
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr           goto state 159
	Expr1          goto state 21
	Expr2          goto state 22
	Expr3          goto state 23

State 156

	Expr -> 'match' Expr1 '{' ListMatchCase '}' .       (rule 27)

	')'            reduce using rule 27
	','            reduce using rule 27
	':'            reduce using rule 27
	';'            reduce using rule 27
	'>'            reduce using rule 27
	']'            reduce using rule 27
	'else'         reduce using rule 27
	'in'           reduce using rule 27
	'then'         reduce using rule 27
	'}'            reduce using rule 27
	%eof           reduce using rule 27


State 157

	Expr2 -> 'unfold' '[' Type ']' Expr3 .              (rule 49)
	Expr3 -> Expr3 . '.' Ident                          (rule 51)

	'('            reduce using rule 49
	')'            reduce using rule 49
	','            reduce using rule 49
	'.'            shift, and enter state 87
	'0'            reduce using rule 49
	':'            reduce using rule 49
	';'            reduce using rule 49
	'>'            reduce using rule 49
	']'            reduce using rule 49
	'cons'         reduce using rule 49
	'else'         reduce using rule 49
	'false'        reduce using rule 49
	'fix'          reduce using rule 49
	'fold'         reduce using rule 49
	'head'         reduce using rule 49
	'in'           reduce using rule 49
	'isempty'      reduce using rule 49
	'iszero'       reduce using rule 49
	'pred'         reduce using rule 49
	'succ'         reduce using rule 49
	'tail'         reduce using rule 49
	'then'         reduce using rule 49
	'true'         reduce using rule 49
	'unfold'       reduce using rule 49
	'{'            reduce using rule 49
	'}'            reduce using rule 49
	L_Ident        reduce using rule 49
	L_integ        reduce using rule 49
	%eof           reduce using rule 49


State 158

	MatchCase -> '<' Ident '>' '=>' Expr .              (rule 30)

	';'            reduce using rule 30
	'}'            reduce using rule 30
	%eof           reduce using rule 30


State 159

	Expr -> 'if' Expr 'then' Expr 'else' Expr .         (rule 22)

	')'            reduce using rule 22
	','            reduce using rule 22
	':'            reduce using rule 22
	';'            reduce using rule 22
	'>'            reduce using rule 22
	']'            reduce using rule 22
	'else'         reduce using rule 22
	'in'           reduce using rule 22
	'then'         reduce using rule 22
	'}'            reduce using rule 22
	%eof           reduce using rule 22


State 160

	Expr -> 'fun' '(' Type ')' '{' 'return' . Expr '}'    (rule 24)

	'('            shift, and enter state 25
	'0'            shift, and enter state 26
	'<'            shift, and enter state 27
	'['            shift, and enter state 28
	'cons'         shift, and enter state 29
	'false'        shift, and enter state 30
	'fix'          shift, and enter state 31
	'fold'         shift, and enter state 32
	'fun'          shift, and enter state 33
	'head'         shift, and enter state 34
	'if'           shift, and enter state 35
	'isempty'      shift, and enter state 36
	'iszero'       shift, and enter state 37
	'let'          shift, and enter state 38
	'match'        shift, and enter state 39
	'pred'         shift, and enter state 40
	'succ'         shift, and enter state 41
	'tail'         shift, and enter state 42
	'true'         shift, and enter state 43
	'unfold'       shift, and enter state 44
	'{'            shift, and enter state 45
	L_Ident        shift, and enter state 17
	L_integ        shift, and enter state 46

	Ident          goto state 18
	Integer        goto state 19
	Expr           goto state 165
	Expr1          goto state 21
	Expr2          goto state 22
	Expr3          goto state 23

State 161

	Expr -> '[' ListExpr ']' 'as' '[' Type . ']'        (rule 28)

	']'            shift, and enter state 164


State 162

	Expr -> '<' Ident '=' Expr '>' 'as' . '<' ListFieldType '>'    (rule 26)

	'<'            shift, and enter state 163


State 163

	Expr -> '<' Ident '=' Expr '>' 'as' '<' . ListFieldType '>'    (rule 26)

	'>'            reduce using rule 71
	L_Ident        shift, and enter state 17

	Ident          goto state 47
	FieldType      goto state 48
	ListFieldType  goto state 167

State 164

	Expr -> '[' ListExpr ']' 'as' '[' Type ']' .        (rule 28)

	')'            reduce using rule 28
	','            reduce using rule 28
	':'            reduce using rule 28
	';'            reduce using rule 28
	'>'            reduce using rule 28
	']'            reduce using rule 28
	'else'         reduce using rule 28
	'in'           reduce using rule 28
	'then'         reduce using rule 28
	'}'            reduce using rule 28
	%eof           reduce using rule 28


State 165

	Expr -> 'fun' '(' Type ')' '{' 'return' Expr . '}'    (rule 24)

	'}'            shift, and enter state 166


State 166

	Expr -> 'fun' '(' Type ')' '{' 'return' Expr '}' .    (rule 24)

	')'            reduce using rule 24
	','            reduce using rule 24
	':'            reduce using rule 24
	';'            reduce using rule 24
	'>'            reduce using rule 24
	']'            reduce using rule 24
	'else'         reduce using rule 24
	'in'           reduce using rule 24
	'then'         reduce using rule 24
	'}'            reduce using rule 24
	%eof           reduce using rule 24


State 167

	Expr -> '<' Ident '=' Expr '>' 'as' '<' ListFieldType . '>'    (rule 26)

	'>'            shift, and enter state 168


State 168

	Expr -> '<' Ident '=' Expr '>' 'as' '<' ListFieldType '>' .    (rule 26)

	')'            reduce using rule 26
	','            reduce using rule 26
	':'            reduce using rule 26
	';'            reduce using rule 26
	'>'            reduce using rule 26
	']'            reduce using rule 26
	'else'         reduce using rule 26
	'in'           reduce using rule 26
	'then'         reduce using rule 26
	'}'            reduce using rule 26
	%eof           reduce using rule 26


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 75
Number of terminals: 42
Number of non-terminals: 34
Number of states: 169
