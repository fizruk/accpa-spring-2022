-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Syntax/Normal/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pListExpr -> ListExpr                       (1)
	%start_pExpr -> Expr                               (2)
	%start_pMatchCase -> MatchCase                     (3)
	%start_pListMatchCase -> ListMatchCase             (4)
	%start_pBinding -> Binding                         (5)
	%start_pListBinding -> ListBinding                 (6)
	%start_pExpr1 -> Expr1                             (7)
	%start_pExpr2 -> Expr2                             (8)
	%start_pExpr3 -> Expr3                             (9)
	%start_pType -> Type                               (10)
	%start_pType1 -> Type1                             (11)
	%start_pType2 -> Type2                             (12)
	%start_pFieldType -> FieldType                     (13)
	%start_pListFieldType -> ListFieldType             (14)
	%start_pTyping -> Typing                           (15)
	Ident -> L_Ident                                   (16)
	Program -> ListExpr                                (17)
	ListExpr ->                                        (18)
	ListExpr -> Expr                                   (19)
	ListExpr -> Expr ';' ListExpr                      (20)
	Expr -> 'if' Expr 'then' Expr 'else' Expr          (21)
	Expr -> 'let' Ident '=' Expr 'in' Expr             (22)
	Expr -> 'fun' '(' Ident ':' Type ')' '{' 'return' Expr '}'   (23)
	Expr -> '{' ListBinding '}'                        (24)
	Expr -> '<' Ident '=' Expr '>' 'as' '<' ListFieldType '>'   (25)
	Expr -> 'match' Expr1 '{' ListMatchCase '}'        (26)
	Expr -> '[' ListExpr ']' 'as' '[' Type ']'         (27)
	Expr -> Expr1                                      (28)
	MatchCase -> '<' Ident '=' Ident '>' '=>' Expr     (29)
	ListMatchCase ->                                   (30)
	ListMatchCase -> MatchCase                         (31)
	ListMatchCase -> MatchCase ';' ListMatchCase       (32)
	Binding -> Ident '=' Expr                          (33)
	ListBinding ->                                     (34)
	ListBinding -> Binding                             (35)
	ListBinding -> Binding ',' ListBinding             (36)
	Expr1 -> Expr1 Expr2                               (37)
	Expr1 -> Expr2                                     (38)
	Expr2 -> 'cons' Expr3 Expr3                        (39)
	Expr2 -> 'head' Expr3                              (40)
	Expr2 -> 'isempty' Expr3                           (41)
	Expr2 -> 'tail' Expr3                              (42)
	Expr2 -> 'succ' Expr3                              (43)
	Expr2 -> 'pred' Expr3                              (44)
	Expr2 -> 'iszero' Expr3                            (45)
	Expr2 -> 'fix' Expr3                               (46)
	Expr2 -> 'fold' '[' Type ']' Expr3                 (47)
	Expr2 -> 'unfold' '[' Type ']' Expr3               (48)
	Expr2 -> Expr3                                     (49)
	Expr3 -> Expr3 '.' Ident                           (50)
	Expr3 -> 'true'                                    (51)
	Expr3 -> 'false'                                   (52)
	Expr3 -> '0'                                       (53)
	Expr3 -> Ident                                     (54)
	Expr3 -> '(' Expr ')'                              (55)
	Type -> Type1 '->' Type                            (56)
	Type -> 'µ' Ident '.' Type                         (57)
	Type -> Type1                                      (58)
	Type1 -> '{' ListFieldType '}'                     (59)
	Type1 -> '<' ListFieldType '>'                     (60)
	Type1 -> '[' Type ']'                              (61)
	Type1 -> Type2                                     (62)
	Type2 -> 'Bool'                                    (63)
	Type2 -> 'Nat'                                     (64)
	Type2 -> Ident                                     (65)
	Type2 -> '(' Type ')'                              (66)
	FieldType -> Ident ':' Type                        (67)
	ListFieldType ->                                   (68)
	ListFieldType -> FieldType                         (69)
	ListFieldType -> FieldType ',' ListFieldType       (70)
	Typing -> Expr ':' Type                            (71)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	','            { PT _ (TS _ 3) }
	'->'           { PT _ (TS _ 4) }
	'.'            { PT _ (TS _ 5) }
	'0'            { PT _ (TS _ 6) }
	':'            { PT _ (TS _ 7) }
	';'            { PT _ (TS _ 8) }
	'<'            { PT _ (TS _ 9) }
	'='            { PT _ (TS _ 10) }
	'=>'           { PT _ (TS _ 11) }
	'>'            { PT _ (TS _ 12) }
	'Bool'         { PT _ (TS _ 13) }
	'Nat'          { PT _ (TS _ 14) }
	'['            { PT _ (TS _ 15) }
	']'            { PT _ (TS _ 16) }
	'as'           { PT _ (TS _ 17) }
	'cons'         { PT _ (TS _ 18) }
	'else'         { PT _ (TS _ 19) }
	'false'        { PT _ (TS _ 20) }
	'fix'          { PT _ (TS _ 21) }
	'fold'         { PT _ (TS _ 22) }
	'fun'          { PT _ (TS _ 23) }
	'head'         { PT _ (TS _ 24) }
	'if'           { PT _ (TS _ 25) }
	'in'           { PT _ (TS _ 26) }
	'isempty'      { PT _ (TS _ 27) }
	'iszero'       { PT _ (TS _ 28) }
	'let'          { PT _ (TS _ 29) }
	'match'        { PT _ (TS _ 30) }
	'pred'         { PT _ (TS _ 31) }
	'return'       { PT _ (TS _ 32) }
	'succ'         { PT _ (TS _ 33) }
	'tail'         { PT _ (TS _ 34) }
	'then'         { PT _ (TS _ 35) }
	'true'         { PT _ (TS _ 36) }
	'unfold'       { PT _ (TS _ 37) }
	'{'            { PT _ (TS _ 38) }
	'}'            { PT _ (TS _ 39) }
	'µ'            { PT _ (TS _ 40) }
	L_Ident        { PT _ (TV $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pListExpr rule  1
	%start_pExpr    rule  2
	%start_pMatchCase rule  3
	%start_pListMatchCase rule  4
	%start_pBinding rule  5
	%start_pListBinding rule  6
	%start_pExpr1   rule  7
	%start_pExpr2   rule  8
	%start_pExpr3   rule  9
	%start_pType    rule  10
	%start_pType1   rule  11
	%start_pType2   rule  12
	%start_pFieldType rule  13
	%start_pListFieldType rule  14
	%start_pTyping  rule  15
	Ident           rule  16
	Program         rule  17
	ListExpr        rules 18, 19, 20
	Expr            rules 21, 22, 23, 24, 25, 26, 27, 28
	MatchCase       rule  29
	ListMatchCase   rules 30, 31, 32
	Binding         rule  33
	ListBinding     rules 34, 35, 36
	Expr1           rules 37, 38
	Expr2           rules 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
	Expr3           rules 50, 51, 52, 53, 54, 55
	Type            rules 56, 57, 58
	Type1           rules 59, 60, 61, 62
	Type2           rules 63, 64, 65, 66
	FieldType       rule  67
	ListFieldType   rules 68, 69, 70
	Typing          rule  71

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'fun'          shift, and enter state 32
	'head'         shift, and enter state 33
	'if'           shift, and enter state 34
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'let'          shift, and enter state 37
	'match'        shift, and enter state 38
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	'{'            shift, and enter state 44
	L_Ident        shift, and enter state 17
	%eof           reduce using rule 18

	Ident          goto state 18
	Program        goto state 76
	ListExpr       goto state 77
	Expr           goto state 75
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 1

	%start_pListExpr -> . ListExpr                      (rule 1)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'fun'          shift, and enter state 32
	'head'         shift, and enter state 33
	'if'           shift, and enter state 34
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'let'          shift, and enter state 37
	'match'        shift, and enter state 38
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	'{'            shift, and enter state 44
	L_Ident        shift, and enter state 17
	%eof           reduce using rule 18

	Ident          goto state 18
	ListExpr       goto state 74
	Expr           goto state 75
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 2

	%start_pExpr -> . Expr                              (rule 2)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'fun'          shift, and enter state 32
	'head'         shift, and enter state 33
	'if'           shift, and enter state 34
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'let'          shift, and enter state 37
	'match'        shift, and enter state 38
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	'{'            shift, and enter state 44
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr           goto state 73
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 3

	%start_pMatchCase -> . MatchCase                    (rule 3)

	'<'            shift, and enter state 71

	MatchCase      goto state 72

State 4

	%start_pListMatchCase -> . ListMatchCase            (rule 4)

	'<'            shift, and enter state 71
	%eof           reduce using rule 30

	MatchCase      goto state 69
	ListMatchCase  goto state 70

State 5

	%start_pBinding -> . Binding                        (rule 5)

	L_Ident        shift, and enter state 17

	Ident          goto state 65
	Binding        goto state 68

State 6

	%start_pListBinding -> . ListBinding                (rule 6)

	L_Ident        shift, and enter state 17
	%eof           reduce using rule 34

	Ident          goto state 65
	Binding        goto state 66
	ListBinding    goto state 67

State 7

	%start_pExpr1 -> . Expr1                            (rule 7)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'head'         shift, and enter state 33
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr1          goto state 64
	Expr2          goto state 21
	Expr3          goto state 22

State 8

	%start_pExpr2 -> . Expr2                            (rule 8)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'head'         shift, and enter state 33
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr2          goto state 63
	Expr3          goto state 22

State 9

	%start_pExpr3 -> . Expr3                            (rule 9)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 42
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr3          goto state 62

State 10

	%start_pType -> . Type                              (rule 10)

	'('            shift, and enter state 51
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 52
	'Nat'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58
	'µ'            shift, and enter state 61
	L_Ident        shift, and enter state 17

	Ident          goto state 49
	Type           goto state 59
	Type1          goto state 60
	Type2          goto state 55

State 11

	%start_pType1 -> . Type1                            (rule 11)

	'('            shift, and enter state 51
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 52
	'Nat'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58
	L_Ident        shift, and enter state 17

	Ident          goto state 49
	Type1          goto state 54
	Type2          goto state 55

State 12

	%start_pType2 -> . Type2                            (rule 12)

	'('            shift, and enter state 51
	'Bool'         shift, and enter state 52
	'Nat'          shift, and enter state 53
	L_Ident        shift, and enter state 17

	Ident          goto state 49
	Type2          goto state 50

State 13

	%start_pFieldType -> . FieldType                    (rule 13)

	L_Ident        shift, and enter state 17

	Ident          goto state 45
	FieldType      goto state 48

State 14

	%start_pListFieldType -> . ListFieldType            (rule 14)

	L_Ident        shift, and enter state 17
	%eof           reduce using rule 68

	Ident          goto state 45
	FieldType      goto state 46
	ListFieldType  goto state 47

State 15

	%start_pTyping -> . Typing                          (rule 15)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'fun'          shift, and enter state 32
	'head'         shift, and enter state 33
	'if'           shift, and enter state 34
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'let'          shift, and enter state 37
	'match'        shift, and enter state 38
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	'{'            shift, and enter state 44
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr           goto state 19
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22
	Typing         goto state 23

State 16

	Ident -> . L_Ident                                  (rule 16)

	L_Ident        shift, and enter state 17


State 17

	Ident -> L_Ident .                                  (rule 16)

	'('            reduce using rule 16
	')'            reduce using rule 16
	','            reduce using rule 16
	'->'           reduce using rule 16
	'.'            reduce using rule 16
	'0'            reduce using rule 16
	':'            reduce using rule 16
	';'            reduce using rule 16
	'='            reduce using rule 16
	'>'            reduce using rule 16
	']'            reduce using rule 16
	'cons'         reduce using rule 16
	'else'         reduce using rule 16
	'false'        reduce using rule 16
	'fix'          reduce using rule 16
	'fold'         reduce using rule 16
	'head'         reduce using rule 16
	'in'           reduce using rule 16
	'isempty'      reduce using rule 16
	'iszero'       reduce using rule 16
	'pred'         reduce using rule 16
	'succ'         reduce using rule 16
	'tail'         reduce using rule 16
	'then'         reduce using rule 16
	'true'         reduce using rule 16
	'unfold'       reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	L_Ident        reduce using rule 16
	%eof           reduce using rule 16


State 18

	Expr3 -> Ident .                                    (rule 54)

	'('            reduce using rule 54
	')'            reduce using rule 54
	','            reduce using rule 54
	'.'            reduce using rule 54
	'0'            reduce using rule 54
	':'            reduce using rule 54
	';'            reduce using rule 54
	'>'            reduce using rule 54
	']'            reduce using rule 54
	'cons'         reduce using rule 54
	'else'         reduce using rule 54
	'false'        reduce using rule 54
	'fix'          reduce using rule 54
	'fold'         reduce using rule 54
	'head'         reduce using rule 54
	'in'           reduce using rule 54
	'isempty'      reduce using rule 54
	'iszero'       reduce using rule 54
	'pred'         reduce using rule 54
	'succ'         reduce using rule 54
	'tail'         reduce using rule 54
	'then'         reduce using rule 54
	'true'         reduce using rule 54
	'unfold'       reduce using rule 54
	'{'            reduce using rule 54
	'}'            reduce using rule 54
	L_Ident        reduce using rule 54
	%eof           reduce using rule 54


State 19

	Typing -> Expr . ':' Type                           (rule 71)

	':'            shift, and enter state 111


State 20

	Expr -> Expr1 .                                     (rule 28)
	Expr1 -> Expr1 . Expr2                              (rule 37)

	'('            shift, and enter state 24
	')'            reduce using rule 28
	','            reduce using rule 28
	'0'            shift, and enter state 25
	':'            reduce using rule 28
	';'            reduce using rule 28
	'>'            reduce using rule 28
	']'            reduce using rule 28
	'cons'         shift, and enter state 28
	'else'         reduce using rule 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'head'         shift, and enter state 33
	'in'           reduce using rule 28
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'then'         reduce using rule 28
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	'}'            reduce using rule 28
	L_Ident        shift, and enter state 17
	%eof           reduce using rule 28

	Ident          goto state 18
	Expr2          goto state 83
	Expr3          goto state 22

State 21

	Expr1 -> Expr2 .                                    (rule 38)

	'('            reduce using rule 38
	')'            reduce using rule 38
	','            reduce using rule 38
	'0'            reduce using rule 38
	':'            reduce using rule 38
	';'            reduce using rule 38
	'>'            reduce using rule 38
	']'            reduce using rule 38
	'cons'         reduce using rule 38
	'else'         reduce using rule 38
	'false'        reduce using rule 38
	'fix'          reduce using rule 38
	'fold'         reduce using rule 38
	'head'         reduce using rule 38
	'in'           reduce using rule 38
	'isempty'      reduce using rule 38
	'iszero'       reduce using rule 38
	'pred'         reduce using rule 38
	'succ'         reduce using rule 38
	'tail'         reduce using rule 38
	'then'         reduce using rule 38
	'true'         reduce using rule 38
	'unfold'       reduce using rule 38
	'{'            reduce using rule 38
	'}'            reduce using rule 38
	L_Ident        reduce using rule 38
	%eof           reduce using rule 38


State 22

	Expr2 -> Expr3 .                                    (rule 49)
	Expr3 -> Expr3 . '.' Ident                          (rule 50)

	'('            reduce using rule 49
	')'            reduce using rule 49
	','            reduce using rule 49
	'.'            shift, and enter state 84
	'0'            reduce using rule 49
	':'            reduce using rule 49
	';'            reduce using rule 49
	'>'            reduce using rule 49
	']'            reduce using rule 49
	'cons'         reduce using rule 49
	'else'         reduce using rule 49
	'false'        reduce using rule 49
	'fix'          reduce using rule 49
	'fold'         reduce using rule 49
	'head'         reduce using rule 49
	'in'           reduce using rule 49
	'isempty'      reduce using rule 49
	'iszero'       reduce using rule 49
	'pred'         reduce using rule 49
	'succ'         reduce using rule 49
	'tail'         reduce using rule 49
	'then'         reduce using rule 49
	'true'         reduce using rule 49
	'unfold'       reduce using rule 49
	'{'            reduce using rule 49
	'}'            reduce using rule 49
	L_Ident        reduce using rule 49
	%eof           reduce using rule 49


State 23

	%start_pTyping -> Typing .                          (rule 15)

	%eof           accept


State 24

	Expr3 -> '(' . Expr ')'                             (rule 55)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'fun'          shift, and enter state 32
	'head'         shift, and enter state 33
	'if'           shift, and enter state 34
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'let'          shift, and enter state 37
	'match'        shift, and enter state 38
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	'{'            shift, and enter state 44
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr           goto state 110
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 25

	Expr3 -> '0' .                                      (rule 53)

	'('            reduce using rule 53
	')'            reduce using rule 53
	','            reduce using rule 53
	'.'            reduce using rule 53
	'0'            reduce using rule 53
	':'            reduce using rule 53
	';'            reduce using rule 53
	'>'            reduce using rule 53
	']'            reduce using rule 53
	'cons'         reduce using rule 53
	'else'         reduce using rule 53
	'false'        reduce using rule 53
	'fix'          reduce using rule 53
	'fold'         reduce using rule 53
	'head'         reduce using rule 53
	'in'           reduce using rule 53
	'isempty'      reduce using rule 53
	'iszero'       reduce using rule 53
	'pred'         reduce using rule 53
	'succ'         reduce using rule 53
	'tail'         reduce using rule 53
	'then'         reduce using rule 53
	'true'         reduce using rule 53
	'unfold'       reduce using rule 53
	'{'            reduce using rule 53
	'}'            reduce using rule 53
	L_Ident        reduce using rule 53
	%eof           reduce using rule 53


State 26

	Expr -> '<' . Ident '=' Expr '>' 'as' '<' ListFieldType '>'    (rule 25)

	L_Ident        shift, and enter state 17

	Ident          goto state 109

State 27

	Expr -> '[' . ListExpr ']' 'as' '[' Type ']'        (rule 27)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	']'            reduce using rule 18
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'fun'          shift, and enter state 32
	'head'         shift, and enter state 33
	'if'           shift, and enter state 34
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'let'          shift, and enter state 37
	'match'        shift, and enter state 38
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	'{'            shift, and enter state 44
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	ListExpr       goto state 108
	Expr           goto state 75
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 28

	Expr2 -> 'cons' . Expr3 Expr3                       (rule 39)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 42
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr3          goto state 107

State 29

	Expr3 -> 'false' .                                  (rule 52)

	'('            reduce using rule 52
	')'            reduce using rule 52
	','            reduce using rule 52
	'.'            reduce using rule 52
	'0'            reduce using rule 52
	':'            reduce using rule 52
	';'            reduce using rule 52
	'>'            reduce using rule 52
	']'            reduce using rule 52
	'cons'         reduce using rule 52
	'else'         reduce using rule 52
	'false'        reduce using rule 52
	'fix'          reduce using rule 52
	'fold'         reduce using rule 52
	'head'         reduce using rule 52
	'in'           reduce using rule 52
	'isempty'      reduce using rule 52
	'iszero'       reduce using rule 52
	'pred'         reduce using rule 52
	'succ'         reduce using rule 52
	'tail'         reduce using rule 52
	'then'         reduce using rule 52
	'true'         reduce using rule 52
	'unfold'       reduce using rule 52
	'{'            reduce using rule 52
	'}'            reduce using rule 52
	L_Ident        reduce using rule 52
	%eof           reduce using rule 52


State 30

	Expr2 -> 'fix' . Expr3                              (rule 46)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 42
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr3          goto state 106

State 31

	Expr2 -> 'fold' . '[' Type ']' Expr3                (rule 47)

	'['            shift, and enter state 105


State 32

	Expr -> 'fun' . '(' Ident ':' Type ')' '{' 'return' Expr '}'    (rule 23)

	'('            shift, and enter state 104


State 33

	Expr2 -> 'head' . Expr3                             (rule 40)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 42
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr3          goto state 103

State 34

	Expr -> 'if' . Expr 'then' Expr 'else' Expr         (rule 21)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'fun'          shift, and enter state 32
	'head'         shift, and enter state 33
	'if'           shift, and enter state 34
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'let'          shift, and enter state 37
	'match'        shift, and enter state 38
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	'{'            shift, and enter state 44
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr           goto state 102
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 35

	Expr2 -> 'isempty' . Expr3                          (rule 41)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 42
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr3          goto state 101

State 36

	Expr2 -> 'iszero' . Expr3                           (rule 45)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 42
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr3          goto state 100

State 37

	Expr -> 'let' . Ident '=' Expr 'in' Expr            (rule 22)

	L_Ident        shift, and enter state 17

	Ident          goto state 99

State 38

	Expr -> 'match' . Expr1 '{' ListMatchCase '}'       (rule 26)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'head'         shift, and enter state 33
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr1          goto state 98
	Expr2          goto state 21
	Expr3          goto state 22

State 39

	Expr2 -> 'pred' . Expr3                             (rule 44)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 42
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr3          goto state 97

State 40

	Expr2 -> 'succ' . Expr3                             (rule 43)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 42
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr3          goto state 96

State 41

	Expr2 -> 'tail' . Expr3                             (rule 42)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 42
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr3          goto state 95

State 42

	Expr3 -> 'true' .                                   (rule 51)

	'('            reduce using rule 51
	')'            reduce using rule 51
	','            reduce using rule 51
	'.'            reduce using rule 51
	'0'            reduce using rule 51
	':'            reduce using rule 51
	';'            reduce using rule 51
	'>'            reduce using rule 51
	']'            reduce using rule 51
	'cons'         reduce using rule 51
	'else'         reduce using rule 51
	'false'        reduce using rule 51
	'fix'          reduce using rule 51
	'fold'         reduce using rule 51
	'head'         reduce using rule 51
	'in'           reduce using rule 51
	'isempty'      reduce using rule 51
	'iszero'       reduce using rule 51
	'pred'         reduce using rule 51
	'succ'         reduce using rule 51
	'tail'         reduce using rule 51
	'then'         reduce using rule 51
	'true'         reduce using rule 51
	'unfold'       reduce using rule 51
	'{'            reduce using rule 51
	'}'            reduce using rule 51
	L_Ident        reduce using rule 51
	%eof           reduce using rule 51


State 43

	Expr2 -> 'unfold' . '[' Type ']' Expr3              (rule 48)

	'['            shift, and enter state 94


State 44

	Expr -> '{' . ListBinding '}'                       (rule 24)

	'}'            reduce using rule 34
	L_Ident        shift, and enter state 17

	Ident          goto state 65
	Binding        goto state 66
	ListBinding    goto state 93

State 45

	FieldType -> Ident . ':' Type                       (rule 67)

	':'            shift, and enter state 92


State 46

	ListFieldType -> FieldType .                        (rule 69)
	ListFieldType -> FieldType . ',' ListFieldType      (rule 70)

	','            shift, and enter state 91
	'>'            reduce using rule 69
	'}'            reduce using rule 69
	%eof           reduce using rule 69


State 47

	%start_pListFieldType -> ListFieldType .            (rule 14)

	%eof           accept


State 48

	%start_pFieldType -> FieldType .                    (rule 13)

	%eof           accept


State 49

	Type2 -> Ident .                                    (rule 65)

	')'            reduce using rule 65
	','            reduce using rule 65
	'->'           reduce using rule 65
	'>'            reduce using rule 65
	']'            reduce using rule 65
	'}'            reduce using rule 65
	%eof           reduce using rule 65


State 50

	%start_pType2 -> Type2 .                            (rule 12)

	%eof           accept


State 51

	Type2 -> '(' . Type ')'                             (rule 66)

	'('            shift, and enter state 51
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 52
	'Nat'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58
	'µ'            shift, and enter state 61
	L_Ident        shift, and enter state 17

	Ident          goto state 49
	Type           goto state 90
	Type1          goto state 60
	Type2          goto state 55

State 52

	Type2 -> 'Bool' .                                   (rule 63)

	')'            reduce using rule 63
	','            reduce using rule 63
	'->'           reduce using rule 63
	'>'            reduce using rule 63
	']'            reduce using rule 63
	'}'            reduce using rule 63
	%eof           reduce using rule 63


State 53

	Type2 -> 'Nat' .                                    (rule 64)

	')'            reduce using rule 64
	','            reduce using rule 64
	'->'           reduce using rule 64
	'>'            reduce using rule 64
	']'            reduce using rule 64
	'}'            reduce using rule 64
	%eof           reduce using rule 64


State 54

	%start_pType1 -> Type1 .                            (rule 11)

	%eof           accept


State 55

	Type1 -> Type2 .                                    (rule 62)

	')'            reduce using rule 62
	','            reduce using rule 62
	'->'           reduce using rule 62
	'>'            reduce using rule 62
	']'            reduce using rule 62
	'}'            reduce using rule 62
	%eof           reduce using rule 62


State 56

	Type1 -> '<' . ListFieldType '>'                    (rule 60)

	'>'            reduce using rule 68
	L_Ident        shift, and enter state 17

	Ident          goto state 45
	FieldType      goto state 46
	ListFieldType  goto state 89

State 57

	Type1 -> '[' . Type ']'                             (rule 61)

	'('            shift, and enter state 51
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 52
	'Nat'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58
	'µ'            shift, and enter state 61
	L_Ident        shift, and enter state 17

	Ident          goto state 49
	Type           goto state 88
	Type1          goto state 60
	Type2          goto state 55

State 58

	Type1 -> '{' . ListFieldType '}'                    (rule 59)

	'}'            reduce using rule 68
	L_Ident        shift, and enter state 17

	Ident          goto state 45
	FieldType      goto state 46
	ListFieldType  goto state 87

State 59

	%start_pType -> Type .                              (rule 10)

	%eof           accept


State 60

	Type -> Type1 . '->' Type                           (rule 56)
	Type -> Type1 .                                     (rule 58)

	')'            reduce using rule 58
	','            reduce using rule 58
	'->'           shift, and enter state 86
	'>'            reduce using rule 58
	']'            reduce using rule 58
	'}'            reduce using rule 58
	%eof           reduce using rule 58


State 61

	Type -> 'µ' . Ident '.' Type                        (rule 57)

	L_Ident        shift, and enter state 17

	Ident          goto state 85

State 62

	%start_pExpr3 -> Expr3 .                            (rule 9)
	Expr3 -> Expr3 . '.' Ident                          (rule 50)

	'.'            shift, and enter state 84
	%eof           accept


State 63

	%start_pExpr2 -> Expr2 .                            (rule 8)

	%eof           accept


State 64

	%start_pExpr1 -> Expr1 .                            (rule 7)
	Expr1 -> Expr1 . Expr2                              (rule 37)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'head'         shift, and enter state 33
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	L_Ident        shift, and enter state 17
	%eof           accept

	Ident          goto state 18
	Expr2          goto state 83
	Expr3          goto state 22

State 65

	Binding -> Ident . '=' Expr                         (rule 33)

	'='            shift, and enter state 82


State 66

	ListBinding -> Binding .                            (rule 35)
	ListBinding -> Binding . ',' ListBinding            (rule 36)

	','            shift, and enter state 81
	'}'            reduce using rule 35
	%eof           reduce using rule 35


State 67

	%start_pListBinding -> ListBinding .                (rule 6)

	%eof           accept


State 68

	%start_pBinding -> Binding .                        (rule 5)

	%eof           accept


State 69

	ListMatchCase -> MatchCase .                        (rule 31)
	ListMatchCase -> MatchCase . ';' ListMatchCase      (rule 32)

	';'            shift, and enter state 80
	'}'            reduce using rule 31
	%eof           reduce using rule 31


State 70

	%start_pListMatchCase -> ListMatchCase .            (rule 4)

	%eof           accept


State 71

	MatchCase -> '<' . Ident '=' Ident '>' '=>' Expr    (rule 29)

	L_Ident        shift, and enter state 17

	Ident          goto state 79

State 72

	%start_pMatchCase -> MatchCase .                    (rule 3)

	%eof           accept


State 73

	%start_pExpr -> Expr .                              (rule 2)

	%eof           accept


State 74

	%start_pListExpr -> ListExpr .                      (rule 1)

	%eof           accept


State 75

	ListExpr -> Expr .                                  (rule 19)
	ListExpr -> Expr . ';' ListExpr                     (rule 20)

	';'            shift, and enter state 78
	']'            reduce using rule 19
	%eof           reduce using rule 19


State 76

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 77

	Program -> ListExpr .                               (rule 17)

	%eof           reduce using rule 17


State 78

	ListExpr -> Expr ';' . ListExpr                     (rule 20)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	']'            reduce using rule 18
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'fun'          shift, and enter state 32
	'head'         shift, and enter state 33
	'if'           shift, and enter state 34
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'let'          shift, and enter state 37
	'match'        shift, and enter state 38
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	'{'            shift, and enter state 44
	L_Ident        shift, and enter state 17
	%eof           reduce using rule 18

	Ident          goto state 18
	ListExpr       goto state 137
	Expr           goto state 75
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 79

	MatchCase -> '<' Ident . '=' Ident '>' '=>' Expr    (rule 29)

	'='            shift, and enter state 136


State 80

	ListMatchCase -> MatchCase ';' . ListMatchCase      (rule 32)

	'<'            shift, and enter state 71
	'}'            reduce using rule 30
	%eof           reduce using rule 30

	MatchCase      goto state 69
	ListMatchCase  goto state 135

State 81

	ListBinding -> Binding ',' . ListBinding            (rule 36)

	'}'            reduce using rule 34
	L_Ident        shift, and enter state 17
	%eof           reduce using rule 34

	Ident          goto state 65
	Binding        goto state 66
	ListBinding    goto state 134

State 82

	Binding -> Ident '=' . Expr                         (rule 33)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'fun'          shift, and enter state 32
	'head'         shift, and enter state 33
	'if'           shift, and enter state 34
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'let'          shift, and enter state 37
	'match'        shift, and enter state 38
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	'{'            shift, and enter state 44
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr           goto state 133
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 83

	Expr1 -> Expr1 Expr2 .                              (rule 37)

	'('            reduce using rule 37
	')'            reduce using rule 37
	','            reduce using rule 37
	'0'            reduce using rule 37
	':'            reduce using rule 37
	';'            reduce using rule 37
	'>'            reduce using rule 37
	']'            reduce using rule 37
	'cons'         reduce using rule 37
	'else'         reduce using rule 37
	'false'        reduce using rule 37
	'fix'          reduce using rule 37
	'fold'         reduce using rule 37
	'head'         reduce using rule 37
	'in'           reduce using rule 37
	'isempty'      reduce using rule 37
	'iszero'       reduce using rule 37
	'pred'         reduce using rule 37
	'succ'         reduce using rule 37
	'tail'         reduce using rule 37
	'then'         reduce using rule 37
	'true'         reduce using rule 37
	'unfold'       reduce using rule 37
	'{'            reduce using rule 37
	'}'            reduce using rule 37
	L_Ident        reduce using rule 37
	%eof           reduce using rule 37


State 84

	Expr3 -> Expr3 '.' . Ident                          (rule 50)

	L_Ident        shift, and enter state 17

	Ident          goto state 132

State 85

	Type -> 'µ' Ident . '.' Type                        (rule 57)

	'.'            shift, and enter state 131


State 86

	Type -> Type1 '->' . Type                           (rule 56)

	'('            shift, and enter state 51
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 52
	'Nat'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58
	'µ'            shift, and enter state 61
	L_Ident        shift, and enter state 17

	Ident          goto state 49
	Type           goto state 130
	Type1          goto state 60
	Type2          goto state 55

State 87

	Type1 -> '{' ListFieldType . '}'                    (rule 59)

	'}'            shift, and enter state 129


State 88

	Type1 -> '[' Type . ']'                             (rule 61)

	']'            shift, and enter state 128


State 89

	Type1 -> '<' ListFieldType . '>'                    (rule 60)

	'>'            shift, and enter state 127


State 90

	Type2 -> '(' Type . ')'                             (rule 66)

	')'            shift, and enter state 126


State 91

	ListFieldType -> FieldType ',' . ListFieldType      (rule 70)

	'>'            reduce using rule 68
	'}'            reduce using rule 68
	L_Ident        shift, and enter state 17
	%eof           reduce using rule 68

	Ident          goto state 45
	FieldType      goto state 46
	ListFieldType  goto state 125

State 92

	FieldType -> Ident ':' . Type                       (rule 67)

	'('            shift, and enter state 51
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 52
	'Nat'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58
	'µ'            shift, and enter state 61
	L_Ident        shift, and enter state 17

	Ident          goto state 49
	Type           goto state 124
	Type1          goto state 60
	Type2          goto state 55

State 93

	Expr -> '{' ListBinding . '}'                       (rule 24)

	'}'            shift, and enter state 123


State 94

	Expr2 -> 'unfold' '[' . Type ']' Expr3              (rule 48)

	'('            shift, and enter state 51
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 52
	'Nat'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58
	'µ'            shift, and enter state 61
	L_Ident        shift, and enter state 17

	Ident          goto state 49
	Type           goto state 122
	Type1          goto state 60
	Type2          goto state 55

State 95

	Expr2 -> 'tail' Expr3 .                             (rule 42)
	Expr3 -> Expr3 . '.' Ident                          (rule 50)

	'('            reduce using rule 42
	')'            reduce using rule 42
	','            reduce using rule 42
	'.'            shift, and enter state 84
	'0'            reduce using rule 42
	':'            reduce using rule 42
	';'            reduce using rule 42
	'>'            reduce using rule 42
	']'            reduce using rule 42
	'cons'         reduce using rule 42
	'else'         reduce using rule 42
	'false'        reduce using rule 42
	'fix'          reduce using rule 42
	'fold'         reduce using rule 42
	'head'         reduce using rule 42
	'in'           reduce using rule 42
	'isempty'      reduce using rule 42
	'iszero'       reduce using rule 42
	'pred'         reduce using rule 42
	'succ'         reduce using rule 42
	'tail'         reduce using rule 42
	'then'         reduce using rule 42
	'true'         reduce using rule 42
	'unfold'       reduce using rule 42
	'{'            reduce using rule 42
	'}'            reduce using rule 42
	L_Ident        reduce using rule 42
	%eof           reduce using rule 42


State 96

	Expr2 -> 'succ' Expr3 .                             (rule 43)
	Expr3 -> Expr3 . '.' Ident                          (rule 50)

	'('            reduce using rule 43
	')'            reduce using rule 43
	','            reduce using rule 43
	'.'            shift, and enter state 84
	'0'            reduce using rule 43
	':'            reduce using rule 43
	';'            reduce using rule 43
	'>'            reduce using rule 43
	']'            reduce using rule 43
	'cons'         reduce using rule 43
	'else'         reduce using rule 43
	'false'        reduce using rule 43
	'fix'          reduce using rule 43
	'fold'         reduce using rule 43
	'head'         reduce using rule 43
	'in'           reduce using rule 43
	'isempty'      reduce using rule 43
	'iszero'       reduce using rule 43
	'pred'         reduce using rule 43
	'succ'         reduce using rule 43
	'tail'         reduce using rule 43
	'then'         reduce using rule 43
	'true'         reduce using rule 43
	'unfold'       reduce using rule 43
	'{'            reduce using rule 43
	'}'            reduce using rule 43
	L_Ident        reduce using rule 43
	%eof           reduce using rule 43


State 97

	Expr2 -> 'pred' Expr3 .                             (rule 44)
	Expr3 -> Expr3 . '.' Ident                          (rule 50)

	'('            reduce using rule 44
	')'            reduce using rule 44
	','            reduce using rule 44
	'.'            shift, and enter state 84
	'0'            reduce using rule 44
	':'            reduce using rule 44
	';'            reduce using rule 44
	'>'            reduce using rule 44
	']'            reduce using rule 44
	'cons'         reduce using rule 44
	'else'         reduce using rule 44
	'false'        reduce using rule 44
	'fix'          reduce using rule 44
	'fold'         reduce using rule 44
	'head'         reduce using rule 44
	'in'           reduce using rule 44
	'isempty'      reduce using rule 44
	'iszero'       reduce using rule 44
	'pred'         reduce using rule 44
	'succ'         reduce using rule 44
	'tail'         reduce using rule 44
	'then'         reduce using rule 44
	'true'         reduce using rule 44
	'unfold'       reduce using rule 44
	'{'            reduce using rule 44
	'}'            reduce using rule 44
	L_Ident        reduce using rule 44
	%eof           reduce using rule 44


State 98

	Expr -> 'match' Expr1 . '{' ListMatchCase '}'       (rule 26)
	Expr1 -> Expr1 . Expr2                              (rule 37)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'head'         shift, and enter state 33
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	'{'            shift, and enter state 121
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr2          goto state 83
	Expr3          goto state 22

State 99

	Expr -> 'let' Ident . '=' Expr 'in' Expr            (rule 22)

	'='            shift, and enter state 120


State 100

	Expr2 -> 'iszero' Expr3 .                           (rule 45)
	Expr3 -> Expr3 . '.' Ident                          (rule 50)

	'('            reduce using rule 45
	')'            reduce using rule 45
	','            reduce using rule 45
	'.'            shift, and enter state 84
	'0'            reduce using rule 45
	':'            reduce using rule 45
	';'            reduce using rule 45
	'>'            reduce using rule 45
	']'            reduce using rule 45
	'cons'         reduce using rule 45
	'else'         reduce using rule 45
	'false'        reduce using rule 45
	'fix'          reduce using rule 45
	'fold'         reduce using rule 45
	'head'         reduce using rule 45
	'in'           reduce using rule 45
	'isempty'      reduce using rule 45
	'iszero'       reduce using rule 45
	'pred'         reduce using rule 45
	'succ'         reduce using rule 45
	'tail'         reduce using rule 45
	'then'         reduce using rule 45
	'true'         reduce using rule 45
	'unfold'       reduce using rule 45
	'{'            reduce using rule 45
	'}'            reduce using rule 45
	L_Ident        reduce using rule 45
	%eof           reduce using rule 45


State 101

	Expr2 -> 'isempty' Expr3 .                          (rule 41)
	Expr3 -> Expr3 . '.' Ident                          (rule 50)

	'('            reduce using rule 41
	')'            reduce using rule 41
	','            reduce using rule 41
	'.'            shift, and enter state 84
	'0'            reduce using rule 41
	':'            reduce using rule 41
	';'            reduce using rule 41
	'>'            reduce using rule 41
	']'            reduce using rule 41
	'cons'         reduce using rule 41
	'else'         reduce using rule 41
	'false'        reduce using rule 41
	'fix'          reduce using rule 41
	'fold'         reduce using rule 41
	'head'         reduce using rule 41
	'in'           reduce using rule 41
	'isempty'      reduce using rule 41
	'iszero'       reduce using rule 41
	'pred'         reduce using rule 41
	'succ'         reduce using rule 41
	'tail'         reduce using rule 41
	'then'         reduce using rule 41
	'true'         reduce using rule 41
	'unfold'       reduce using rule 41
	'{'            reduce using rule 41
	'}'            reduce using rule 41
	L_Ident        reduce using rule 41
	%eof           reduce using rule 41


State 102

	Expr -> 'if' Expr . 'then' Expr 'else' Expr         (rule 21)

	'then'         shift, and enter state 119


State 103

	Expr2 -> 'head' Expr3 .                             (rule 40)
	Expr3 -> Expr3 . '.' Ident                          (rule 50)

	'('            reduce using rule 40
	')'            reduce using rule 40
	','            reduce using rule 40
	'.'            shift, and enter state 84
	'0'            reduce using rule 40
	':'            reduce using rule 40
	';'            reduce using rule 40
	'>'            reduce using rule 40
	']'            reduce using rule 40
	'cons'         reduce using rule 40
	'else'         reduce using rule 40
	'false'        reduce using rule 40
	'fix'          reduce using rule 40
	'fold'         reduce using rule 40
	'head'         reduce using rule 40
	'in'           reduce using rule 40
	'isempty'      reduce using rule 40
	'iszero'       reduce using rule 40
	'pred'         reduce using rule 40
	'succ'         reduce using rule 40
	'tail'         reduce using rule 40
	'then'         reduce using rule 40
	'true'         reduce using rule 40
	'unfold'       reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	L_Ident        reduce using rule 40
	%eof           reduce using rule 40


State 104

	Expr -> 'fun' '(' . Ident ':' Type ')' '{' 'return' Expr '}'    (rule 23)

	L_Ident        shift, and enter state 17

	Ident          goto state 118

State 105

	Expr2 -> 'fold' '[' . Type ']' Expr3                (rule 47)

	'('            shift, and enter state 51
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 52
	'Nat'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58
	'µ'            shift, and enter state 61
	L_Ident        shift, and enter state 17

	Ident          goto state 49
	Type           goto state 117
	Type1          goto state 60
	Type2          goto state 55

State 106

	Expr2 -> 'fix' Expr3 .                              (rule 46)
	Expr3 -> Expr3 . '.' Ident                          (rule 50)

	'('            reduce using rule 46
	')'            reduce using rule 46
	','            reduce using rule 46
	'.'            shift, and enter state 84
	'0'            reduce using rule 46
	':'            reduce using rule 46
	';'            reduce using rule 46
	'>'            reduce using rule 46
	']'            reduce using rule 46
	'cons'         reduce using rule 46
	'else'         reduce using rule 46
	'false'        reduce using rule 46
	'fix'          reduce using rule 46
	'fold'         reduce using rule 46
	'head'         reduce using rule 46
	'in'           reduce using rule 46
	'isempty'      reduce using rule 46
	'iszero'       reduce using rule 46
	'pred'         reduce using rule 46
	'succ'         reduce using rule 46
	'tail'         reduce using rule 46
	'then'         reduce using rule 46
	'true'         reduce using rule 46
	'unfold'       reduce using rule 46
	'{'            reduce using rule 46
	'}'            reduce using rule 46
	L_Ident        reduce using rule 46
	%eof           reduce using rule 46


State 107

	Expr2 -> 'cons' Expr3 . Expr3                       (rule 39)
	Expr3 -> Expr3 . '.' Ident                          (rule 50)

	'('            shift, and enter state 24
	'.'            shift, and enter state 84
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 42
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr3          goto state 116

State 108

	Expr -> '[' ListExpr . ']' 'as' '[' Type ']'        (rule 27)

	']'            shift, and enter state 115


State 109

	Expr -> '<' Ident . '=' Expr '>' 'as' '<' ListFieldType '>'    (rule 25)

	'='            shift, and enter state 114


State 110

	Expr3 -> '(' Expr . ')'                             (rule 55)

	')'            shift, and enter state 113


State 111

	Typing -> Expr ':' . Type                           (rule 71)

	'('            shift, and enter state 51
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 52
	'Nat'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58
	'µ'            shift, and enter state 61
	L_Ident        shift, and enter state 17

	Ident          goto state 49
	Type           goto state 112
	Type1          goto state 60
	Type2          goto state 55

State 112

	Typing -> Expr ':' Type .                           (rule 71)

	%eof           reduce using rule 71


State 113

	Expr3 -> '(' Expr ')' .                             (rule 55)

	'('            reduce using rule 55
	')'            reduce using rule 55
	','            reduce using rule 55
	'.'            reduce using rule 55
	'0'            reduce using rule 55
	':'            reduce using rule 55
	';'            reduce using rule 55
	'>'            reduce using rule 55
	']'            reduce using rule 55
	'cons'         reduce using rule 55
	'else'         reduce using rule 55
	'false'        reduce using rule 55
	'fix'          reduce using rule 55
	'fold'         reduce using rule 55
	'head'         reduce using rule 55
	'in'           reduce using rule 55
	'isempty'      reduce using rule 55
	'iszero'       reduce using rule 55
	'pred'         reduce using rule 55
	'succ'         reduce using rule 55
	'tail'         reduce using rule 55
	'then'         reduce using rule 55
	'true'         reduce using rule 55
	'unfold'       reduce using rule 55
	'{'            reduce using rule 55
	'}'            reduce using rule 55
	L_Ident        reduce using rule 55
	%eof           reduce using rule 55


State 114

	Expr -> '<' Ident '=' . Expr '>' 'as' '<' ListFieldType '>'    (rule 25)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'fun'          shift, and enter state 32
	'head'         shift, and enter state 33
	'if'           shift, and enter state 34
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'let'          shift, and enter state 37
	'match'        shift, and enter state 38
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	'{'            shift, and enter state 44
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr           goto state 147
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 115

	Expr -> '[' ListExpr ']' . 'as' '[' Type ']'        (rule 27)

	'as'           shift, and enter state 146


State 116

	Expr2 -> 'cons' Expr3 Expr3 .                       (rule 39)
	Expr3 -> Expr3 . '.' Ident                          (rule 50)

	'('            reduce using rule 39
	')'            reduce using rule 39
	','            reduce using rule 39
	'.'            shift, and enter state 84
	'0'            reduce using rule 39
	':'            reduce using rule 39
	';'            reduce using rule 39
	'>'            reduce using rule 39
	']'            reduce using rule 39
	'cons'         reduce using rule 39
	'else'         reduce using rule 39
	'false'        reduce using rule 39
	'fix'          reduce using rule 39
	'fold'         reduce using rule 39
	'head'         reduce using rule 39
	'in'           reduce using rule 39
	'isempty'      reduce using rule 39
	'iszero'       reduce using rule 39
	'pred'         reduce using rule 39
	'succ'         reduce using rule 39
	'tail'         reduce using rule 39
	'then'         reduce using rule 39
	'true'         reduce using rule 39
	'unfold'       reduce using rule 39
	'{'            reduce using rule 39
	'}'            reduce using rule 39
	L_Ident        reduce using rule 39
	%eof           reduce using rule 39


State 117

	Expr2 -> 'fold' '[' Type . ']' Expr3                (rule 47)

	']'            shift, and enter state 145


State 118

	Expr -> 'fun' '(' Ident . ':' Type ')' '{' 'return' Expr '}'    (rule 23)

	':'            shift, and enter state 144


State 119

	Expr -> 'if' Expr 'then' . Expr 'else' Expr         (rule 21)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'fun'          shift, and enter state 32
	'head'         shift, and enter state 33
	'if'           shift, and enter state 34
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'let'          shift, and enter state 37
	'match'        shift, and enter state 38
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	'{'            shift, and enter state 44
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr           goto state 143
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 120

	Expr -> 'let' Ident '=' . Expr 'in' Expr            (rule 22)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'fun'          shift, and enter state 32
	'head'         shift, and enter state 33
	'if'           shift, and enter state 34
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'let'          shift, and enter state 37
	'match'        shift, and enter state 38
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	'{'            shift, and enter state 44
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr           goto state 142
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 121

	Expr -> 'match' Expr1 '{' . ListMatchCase '}'       (rule 26)

	'<'            shift, and enter state 71
	'}'            reduce using rule 30

	MatchCase      goto state 69
	ListMatchCase  goto state 141

State 122

	Expr2 -> 'unfold' '[' Type . ']' Expr3              (rule 48)

	']'            shift, and enter state 140


State 123

	Expr -> '{' ListBinding '}' .                       (rule 24)

	')'            reduce using rule 24
	','            reduce using rule 24
	':'            reduce using rule 24
	';'            reduce using rule 24
	'>'            reduce using rule 24
	']'            reduce using rule 24
	'else'         reduce using rule 24
	'in'           reduce using rule 24
	'then'         reduce using rule 24
	'}'            reduce using rule 24
	%eof           reduce using rule 24


State 124

	FieldType -> Ident ':' Type .                       (rule 67)

	','            reduce using rule 67
	'>'            reduce using rule 67
	'}'            reduce using rule 67
	%eof           reduce using rule 67


State 125

	ListFieldType -> FieldType ',' ListFieldType .      (rule 70)

	'>'            reduce using rule 70
	'}'            reduce using rule 70
	%eof           reduce using rule 70


State 126

	Type2 -> '(' Type ')' .                             (rule 66)

	')'            reduce using rule 66
	','            reduce using rule 66
	'->'           reduce using rule 66
	'>'            reduce using rule 66
	']'            reduce using rule 66
	'}'            reduce using rule 66
	%eof           reduce using rule 66


State 127

	Type1 -> '<' ListFieldType '>' .                    (rule 60)

	')'            reduce using rule 60
	','            reduce using rule 60
	'->'           reduce using rule 60
	'>'            reduce using rule 60
	']'            reduce using rule 60
	'}'            reduce using rule 60
	%eof           reduce using rule 60


State 128

	Type1 -> '[' Type ']' .                             (rule 61)

	')'            reduce using rule 61
	','            reduce using rule 61
	'->'           reduce using rule 61
	'>'            reduce using rule 61
	']'            reduce using rule 61
	'}'            reduce using rule 61
	%eof           reduce using rule 61


State 129

	Type1 -> '{' ListFieldType '}' .                    (rule 59)

	')'            reduce using rule 59
	','            reduce using rule 59
	'->'           reduce using rule 59
	'>'            reduce using rule 59
	']'            reduce using rule 59
	'}'            reduce using rule 59
	%eof           reduce using rule 59


State 130

	Type -> Type1 '->' Type .                           (rule 56)

	')'            reduce using rule 56
	','            reduce using rule 56
	'>'            reduce using rule 56
	']'            reduce using rule 56
	'}'            reduce using rule 56
	%eof           reduce using rule 56


State 131

	Type -> 'µ' Ident '.' . Type                        (rule 57)

	'('            shift, and enter state 51
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 52
	'Nat'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58
	'µ'            shift, and enter state 61
	L_Ident        shift, and enter state 17

	Ident          goto state 49
	Type           goto state 139
	Type1          goto state 60
	Type2          goto state 55

State 132

	Expr3 -> Expr3 '.' Ident .                          (rule 50)

	'('            reduce using rule 50
	')'            reduce using rule 50
	','            reduce using rule 50
	'.'            reduce using rule 50
	'0'            reduce using rule 50
	':'            reduce using rule 50
	';'            reduce using rule 50
	'>'            reduce using rule 50
	']'            reduce using rule 50
	'cons'         reduce using rule 50
	'else'         reduce using rule 50
	'false'        reduce using rule 50
	'fix'          reduce using rule 50
	'fold'         reduce using rule 50
	'head'         reduce using rule 50
	'in'           reduce using rule 50
	'isempty'      reduce using rule 50
	'iszero'       reduce using rule 50
	'pred'         reduce using rule 50
	'succ'         reduce using rule 50
	'tail'         reduce using rule 50
	'then'         reduce using rule 50
	'true'         reduce using rule 50
	'unfold'       reduce using rule 50
	'{'            reduce using rule 50
	'}'            reduce using rule 50
	L_Ident        reduce using rule 50
	%eof           reduce using rule 50


State 133

	Binding -> Ident '=' Expr .                         (rule 33)

	','            reduce using rule 33
	'}'            reduce using rule 33
	%eof           reduce using rule 33


State 134

	ListBinding -> Binding ',' ListBinding .            (rule 36)

	'}'            reduce using rule 36
	%eof           reduce using rule 36


State 135

	ListMatchCase -> MatchCase ';' ListMatchCase .      (rule 32)

	'}'            reduce using rule 32
	%eof           reduce using rule 32


State 136

	MatchCase -> '<' Ident '=' . Ident '>' '=>' Expr    (rule 29)

	L_Ident        shift, and enter state 17

	Ident          goto state 138

State 137

	ListExpr -> Expr ';' ListExpr .                     (rule 20)

	']'            reduce using rule 20
	%eof           reduce using rule 20


State 138

	MatchCase -> '<' Ident '=' Ident . '>' '=>' Expr    (rule 29)

	'>'            shift, and enter state 156


State 139

	Type -> 'µ' Ident '.' Type .                        (rule 57)

	')'            reduce using rule 57
	','            reduce using rule 57
	'>'            reduce using rule 57
	']'            reduce using rule 57
	'}'            reduce using rule 57
	%eof           reduce using rule 57


State 140

	Expr2 -> 'unfold' '[' Type ']' . Expr3              (rule 48)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 42
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr3          goto state 155

State 141

	Expr -> 'match' Expr1 '{' ListMatchCase . '}'       (rule 26)

	'}'            shift, and enter state 154


State 142

	Expr -> 'let' Ident '=' Expr . 'in' Expr            (rule 22)

	'in'           shift, and enter state 153


State 143

	Expr -> 'if' Expr 'then' Expr . 'else' Expr         (rule 21)

	'else'         shift, and enter state 152


State 144

	Expr -> 'fun' '(' Ident ':' . Type ')' '{' 'return' Expr '}'    (rule 23)

	'('            shift, and enter state 51
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 52
	'Nat'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58
	'µ'            shift, and enter state 61
	L_Ident        shift, and enter state 17

	Ident          goto state 49
	Type           goto state 151
	Type1          goto state 60
	Type2          goto state 55

State 145

	Expr2 -> 'fold' '[' Type ']' . Expr3                (rule 47)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 42
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr3          goto state 150

State 146

	Expr -> '[' ListExpr ']' 'as' . '[' Type ']'        (rule 27)

	'['            shift, and enter state 149


State 147

	Expr -> '<' Ident '=' Expr . '>' 'as' '<' ListFieldType '>'    (rule 25)

	'>'            shift, and enter state 148


State 148

	Expr -> '<' Ident '=' Expr '>' . 'as' '<' ListFieldType '>'    (rule 25)

	'as'           shift, and enter state 162


State 149

	Expr -> '[' ListExpr ']' 'as' '[' . Type ']'        (rule 27)

	'('            shift, and enter state 51
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 52
	'Nat'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58
	'µ'            shift, and enter state 61
	L_Ident        shift, and enter state 17

	Ident          goto state 49
	Type           goto state 161
	Type1          goto state 60
	Type2          goto state 55

State 150

	Expr2 -> 'fold' '[' Type ']' Expr3 .                (rule 47)
	Expr3 -> Expr3 . '.' Ident                          (rule 50)

	'('            reduce using rule 47
	')'            reduce using rule 47
	','            reduce using rule 47
	'.'            shift, and enter state 84
	'0'            reduce using rule 47
	':'            reduce using rule 47
	';'            reduce using rule 47
	'>'            reduce using rule 47
	']'            reduce using rule 47
	'cons'         reduce using rule 47
	'else'         reduce using rule 47
	'false'        reduce using rule 47
	'fix'          reduce using rule 47
	'fold'         reduce using rule 47
	'head'         reduce using rule 47
	'in'           reduce using rule 47
	'isempty'      reduce using rule 47
	'iszero'       reduce using rule 47
	'pred'         reduce using rule 47
	'succ'         reduce using rule 47
	'tail'         reduce using rule 47
	'then'         reduce using rule 47
	'true'         reduce using rule 47
	'unfold'       reduce using rule 47
	'{'            reduce using rule 47
	'}'            reduce using rule 47
	L_Ident        reduce using rule 47
	%eof           reduce using rule 47


State 151

	Expr -> 'fun' '(' Ident ':' Type . ')' '{' 'return' Expr '}'    (rule 23)

	')'            shift, and enter state 160


State 152

	Expr -> 'if' Expr 'then' Expr 'else' . Expr         (rule 21)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'fun'          shift, and enter state 32
	'head'         shift, and enter state 33
	'if'           shift, and enter state 34
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'let'          shift, and enter state 37
	'match'        shift, and enter state 38
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	'{'            shift, and enter state 44
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr           goto state 159
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 153

	Expr -> 'let' Ident '=' Expr 'in' . Expr            (rule 22)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'fun'          shift, and enter state 32
	'head'         shift, and enter state 33
	'if'           shift, and enter state 34
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'let'          shift, and enter state 37
	'match'        shift, and enter state 38
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	'{'            shift, and enter state 44
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr           goto state 158
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 154

	Expr -> 'match' Expr1 '{' ListMatchCase '}' .       (rule 26)

	')'            reduce using rule 26
	','            reduce using rule 26
	':'            reduce using rule 26
	';'            reduce using rule 26
	'>'            reduce using rule 26
	']'            reduce using rule 26
	'else'         reduce using rule 26
	'in'           reduce using rule 26
	'then'         reduce using rule 26
	'}'            reduce using rule 26
	%eof           reduce using rule 26


State 155

	Expr2 -> 'unfold' '[' Type ']' Expr3 .              (rule 48)
	Expr3 -> Expr3 . '.' Ident                          (rule 50)

	'('            reduce using rule 48
	')'            reduce using rule 48
	','            reduce using rule 48
	'.'            shift, and enter state 84
	'0'            reduce using rule 48
	':'            reduce using rule 48
	';'            reduce using rule 48
	'>'            reduce using rule 48
	']'            reduce using rule 48
	'cons'         reduce using rule 48
	'else'         reduce using rule 48
	'false'        reduce using rule 48
	'fix'          reduce using rule 48
	'fold'         reduce using rule 48
	'head'         reduce using rule 48
	'in'           reduce using rule 48
	'isempty'      reduce using rule 48
	'iszero'       reduce using rule 48
	'pred'         reduce using rule 48
	'succ'         reduce using rule 48
	'tail'         reduce using rule 48
	'then'         reduce using rule 48
	'true'         reduce using rule 48
	'unfold'       reduce using rule 48
	'{'            reduce using rule 48
	'}'            reduce using rule 48
	L_Ident        reduce using rule 48
	%eof           reduce using rule 48


State 156

	MatchCase -> '<' Ident '=' Ident '>' . '=>' Expr    (rule 29)

	'=>'           shift, and enter state 157


State 157

	MatchCase -> '<' Ident '=' Ident '>' '=>' . Expr    (rule 29)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'fun'          shift, and enter state 32
	'head'         shift, and enter state 33
	'if'           shift, and enter state 34
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'let'          shift, and enter state 37
	'match'        shift, and enter state 38
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	'{'            shift, and enter state 44
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr           goto state 166
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 158

	Expr -> 'let' Ident '=' Expr 'in' Expr .            (rule 22)

	')'            reduce using rule 22
	','            reduce using rule 22
	':'            reduce using rule 22
	';'            reduce using rule 22
	'>'            reduce using rule 22
	']'            reduce using rule 22
	'else'         reduce using rule 22
	'in'           reduce using rule 22
	'then'         reduce using rule 22
	'}'            reduce using rule 22
	%eof           reduce using rule 22


State 159

	Expr -> 'if' Expr 'then' Expr 'else' Expr .         (rule 21)

	')'            reduce using rule 21
	','            reduce using rule 21
	':'            reduce using rule 21
	';'            reduce using rule 21
	'>'            reduce using rule 21
	']'            reduce using rule 21
	'else'         reduce using rule 21
	'in'           reduce using rule 21
	'then'         reduce using rule 21
	'}'            reduce using rule 21
	%eof           reduce using rule 21


State 160

	Expr -> 'fun' '(' Ident ':' Type ')' . '{' 'return' Expr '}'    (rule 23)

	'{'            shift, and enter state 165


State 161

	Expr -> '[' ListExpr ']' 'as' '[' Type . ']'        (rule 27)

	']'            shift, and enter state 164


State 162

	Expr -> '<' Ident '=' Expr '>' 'as' . '<' ListFieldType '>'    (rule 25)

	'<'            shift, and enter state 163


State 163

	Expr -> '<' Ident '=' Expr '>' 'as' '<' . ListFieldType '>'    (rule 25)

	'>'            reduce using rule 68
	L_Ident        shift, and enter state 17

	Ident          goto state 45
	FieldType      goto state 46
	ListFieldType  goto state 168

State 164

	Expr -> '[' ListExpr ']' 'as' '[' Type ']' .        (rule 27)

	')'            reduce using rule 27
	','            reduce using rule 27
	':'            reduce using rule 27
	';'            reduce using rule 27
	'>'            reduce using rule 27
	']'            reduce using rule 27
	'else'         reduce using rule 27
	'in'           reduce using rule 27
	'then'         reduce using rule 27
	'}'            reduce using rule 27
	%eof           reduce using rule 27


State 165

	Expr -> 'fun' '(' Ident ':' Type ')' '{' . 'return' Expr '}'    (rule 23)

	'return'       shift, and enter state 167


State 166

	MatchCase -> '<' Ident '=' Ident '>' '=>' Expr .    (rule 29)

	';'            reduce using rule 29
	'}'            reduce using rule 29
	%eof           reduce using rule 29


State 167

	Expr -> 'fun' '(' Ident ':' Type ')' '{' 'return' . Expr '}'    (rule 23)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fold'         shift, and enter state 31
	'fun'          shift, and enter state 32
	'head'         shift, and enter state 33
	'if'           shift, and enter state 34
	'isempty'      shift, and enter state 35
	'iszero'       shift, and enter state 36
	'let'          shift, and enter state 37
	'match'        shift, and enter state 38
	'pred'         shift, and enter state 39
	'succ'         shift, and enter state 40
	'tail'         shift, and enter state 41
	'true'         shift, and enter state 42
	'unfold'       shift, and enter state 43
	'{'            shift, and enter state 44
	L_Ident        shift, and enter state 17

	Ident          goto state 18
	Expr           goto state 170
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 168

	Expr -> '<' Ident '=' Expr '>' 'as' '<' ListFieldType . '>'    (rule 25)

	'>'            shift, and enter state 169


State 169

	Expr -> '<' Ident '=' Expr '>' 'as' '<' ListFieldType '>' .    (rule 25)

	')'            reduce using rule 25
	','            reduce using rule 25
	':'            reduce using rule 25
	';'            reduce using rule 25
	'>'            reduce using rule 25
	']'            reduce using rule 25
	'else'         reduce using rule 25
	'in'           reduce using rule 25
	'then'         reduce using rule 25
	'}'            reduce using rule 25
	%eof           reduce using rule 25


State 170

	Expr -> 'fun' '(' Ident ':' Type ')' '{' 'return' Expr . '}'    (rule 23)

	'}'            shift, and enter state 171


State 171

	Expr -> 'fun' '(' Ident ':' Type ')' '{' 'return' Expr '}' .    (rule 23)

	')'            reduce using rule 23
	','            reduce using rule 23
	':'            reduce using rule 23
	';'            reduce using rule 23
	'>'            reduce using rule 23
	']'            reduce using rule 23
	'else'         reduce using rule 23
	'in'           reduce using rule 23
	'then'         reduce using rule 23
	'}'            reduce using rule 23
	%eof           reduce using rule 23


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 72
Number of terminals: 41
Number of non-terminals: 33
Number of states: 172
