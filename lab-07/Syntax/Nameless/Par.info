-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Syntax/Nameless/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pListExpr -> ListExpr                       (1)
	%start_pExpr -> Expr                               (2)
	%start_pMatchCase -> MatchCase                     (3)
	%start_pListMatchCase -> ListMatchCase             (4)
	%start_pBinding -> Binding                         (5)
	%start_pListBinding -> ListBinding                 (6)
	%start_pExpr1 -> Expr1                             (7)
	%start_pExpr2 -> Expr2                             (8)
	%start_pExpr3 -> Expr3                             (9)
	%start_pType -> Type                               (10)
	%start_pType1 -> Type1                             (11)
	%start_pFieldType -> FieldType                     (12)
	%start_pListFieldType -> ListFieldType             (13)
	%start_pTyping -> Typing                           (14)
	Ident -> L_Ident                                   (15)
	Integer -> L_integ                                 (16)
	Program -> ListExpr                                (17)
	ListExpr ->                                        (18)
	ListExpr -> Expr                                   (19)
	ListExpr -> Expr ';' ListExpr                      (20)
	Expr -> 'if' Expr 'then' Expr 'else' Expr          (21)
	Expr -> 'let' Expr 'in' Expr                       (22)
	Expr -> 'fun' '(' Type ')' '{' 'return' Expr '}'   (23)
	Expr -> '{' ListBinding '}'                        (24)
	Expr -> '<' Ident '=' Expr '>'                     (25)
	Expr -> 'match' Expr1 '{' ListMatchCase '}'        (26)
	Expr -> '[' ListExpr ']'                           (27)
	Expr -> Expr1                                      (28)
	MatchCase -> '<' Ident '>' '=>' Expr               (29)
	ListMatchCase ->                                   (30)
	ListMatchCase -> MatchCase                         (31)
	ListMatchCase -> MatchCase ';' ListMatchCase       (32)
	Binding -> Ident '=' Expr                          (33)
	ListBinding ->                                     (34)
	ListBinding -> Binding                             (35)
	ListBinding -> Binding ',' ListBinding             (36)
	Expr1 -> Expr1 Expr2                               (37)
	Expr1 -> Expr2                                     (38)
	Expr2 -> 'cons' Expr3 Expr3                        (39)
	Expr2 -> 'head' Expr3                              (40)
	Expr2 -> 'tail' Expr3                              (41)
	Expr2 -> 'succ' Expr3                              (42)
	Expr2 -> 'pred' Expr3                              (43)
	Expr2 -> 'iszero' Expr3                            (44)
	Expr2 -> 'fix' Expr3                               (45)
	Expr2 -> 'isempty' Expr3                           (46)
	Expr2 -> Expr3                                     (47)
	Expr3 -> Expr3 '.' Ident                           (48)
	Expr3 -> 'true'                                    (49)
	Expr3 -> 'false'                                   (50)
	Expr3 -> '0'                                       (51)
	Expr3 -> Ident                                     (52)
	Expr3 -> Integer                                   (53)
	Expr3 -> '(' Expr ')'                              (54)
	Type -> Type1 '->' Type                            (55)
	Type -> '{' ListFieldType '}'                      (56)
	Type -> '<' ListFieldType '>'                      (57)
	Type -> '[' Type ']'                               (58)
	Type -> Type1                                      (59)
	Type1 -> 'Bool'                                    (60)
	Type1 -> 'Nat'                                     (61)
	Type1 -> 'Top'                                     (62)
	Type1 -> 'Bot'                                     (63)
	Type1 -> '(' Type ')'                              (64)
	FieldType -> Ident ':' Type                        (65)
	ListFieldType ->                                   (66)
	ListFieldType -> FieldType                         (67)
	ListFieldType -> FieldType ',' ListFieldType       (68)
	Typing -> Expr ':' Type                            (69)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	','            { PT _ (TS _ 3) }
	'->'           { PT _ (TS _ 4) }
	'.'            { PT _ (TS _ 5) }
	'0'            { PT _ (TS _ 6) }
	':'            { PT _ (TS _ 7) }
	';'            { PT _ (TS _ 8) }
	'<'            { PT _ (TS _ 9) }
	'='            { PT _ (TS _ 10) }
	'=>'           { PT _ (TS _ 11) }
	'>'            { PT _ (TS _ 12) }
	'Bool'         { PT _ (TS _ 13) }
	'Bot'          { PT _ (TS _ 14) }
	'Nat'          { PT _ (TS _ 15) }
	'Top'          { PT _ (TS _ 16) }
	'['            { PT _ (TS _ 17) }
	']'            { PT _ (TS _ 18) }
	'cons'         { PT _ (TS _ 19) }
	'else'         { PT _ (TS _ 20) }
	'false'        { PT _ (TS _ 21) }
	'fix'          { PT _ (TS _ 22) }
	'fun'          { PT _ (TS _ 23) }
	'head'         { PT _ (TS _ 24) }
	'if'           { PT _ (TS _ 25) }
	'in'           { PT _ (TS _ 26) }
	'isempty'      { PT _ (TS _ 27) }
	'iszero'       { PT _ (TS _ 28) }
	'let'          { PT _ (TS _ 29) }
	'match'        { PT _ (TS _ 30) }
	'pred'         { PT _ (TS _ 31) }
	'return'       { PT _ (TS _ 32) }
	'succ'         { PT _ (TS _ 33) }
	'tail'         { PT _ (TS _ 34) }
	'then'         { PT _ (TS _ 35) }
	'true'         { PT _ (TS _ 36) }
	'{'            { PT _ (TS _ 37) }
	'}'            { PT _ (TS _ 38) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pListExpr rule  1
	%start_pExpr    rule  2
	%start_pMatchCase rule  3
	%start_pListMatchCase rule  4
	%start_pBinding rule  5
	%start_pListBinding rule  6
	%start_pExpr1   rule  7
	%start_pExpr2   rule  8
	%start_pExpr3   rule  9
	%start_pType    rule  10
	%start_pType1   rule  11
	%start_pFieldType rule  12
	%start_pListFieldType rule  13
	%start_pTyping  rule  14
	Ident           rule  15
	Integer         rule  16
	Program         rule  17
	ListExpr        rules 18, 19, 20
	Expr            rules 21, 22, 23, 24, 25, 26, 27, 28
	MatchCase       rule  29
	ListMatchCase   rules 30, 31, 32
	Binding         rule  33
	ListBinding     rules 34, 35, 36
	Expr1           rules 37, 38
	Expr2           rules 39, 40, 41, 42, 43, 44, 45, 46, 47
	Expr3           rules 48, 49, 50, 51, 52, 53, 54
	Type            rules 55, 56, 57, 58, 59
	Type1           rules 60, 61, 62, 63, 64
	FieldType       rule  65
	ListFieldType   rules 66, 67, 68
	Typing          rule  69

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fun'          shift, and enter state 31
	'head'         shift, and enter state 32
	'if'           shift, and enter state 33
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'let'          shift, and enter state 36
	'match'        shift, and enter state 37
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	'{'            shift, and enter state 42
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43
	%eof           reduce using rule 18

	Ident          goto state 17
	Integer        goto state 18
	Program        goto state 73
	ListExpr       goto state 74
	Expr           goto state 72
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 1

	%start_pListExpr -> . ListExpr                      (rule 1)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fun'          shift, and enter state 31
	'head'         shift, and enter state 32
	'if'           shift, and enter state 33
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'let'          shift, and enter state 36
	'match'        shift, and enter state 37
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	'{'            shift, and enter state 42
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43
	%eof           reduce using rule 18

	Ident          goto state 17
	Integer        goto state 18
	ListExpr       goto state 71
	Expr           goto state 72
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 2

	%start_pExpr -> . Expr                              (rule 2)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fun'          shift, and enter state 31
	'head'         shift, and enter state 32
	'if'           shift, and enter state 33
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'let'          shift, and enter state 36
	'match'        shift, and enter state 37
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	'{'            shift, and enter state 42
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr           goto state 70
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 3

	%start_pMatchCase -> . MatchCase                    (rule 3)

	'<'            shift, and enter state 68

	MatchCase      goto state 69

State 4

	%start_pListMatchCase -> . ListMatchCase            (rule 4)

	'<'            shift, and enter state 68
	%eof           reduce using rule 30

	MatchCase      goto state 66
	ListMatchCase  goto state 67

State 5

	%start_pBinding -> . Binding                        (rule 5)

	L_Ident        shift, and enter state 16

	Ident          goto state 62
	Binding        goto state 65

State 6

	%start_pListBinding -> . ListBinding                (rule 6)

	L_Ident        shift, and enter state 16
	%eof           reduce using rule 34

	Ident          goto state 62
	Binding        goto state 63
	ListBinding    goto state 64

State 7

	%start_pExpr1 -> . Expr1                            (rule 7)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'head'         shift, and enter state 32
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr1          goto state 61
	Expr2          goto state 21
	Expr3          goto state 22

State 8

	%start_pExpr2 -> . Expr2                            (rule 8)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'head'         shift, and enter state 32
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr2          goto state 60
	Expr3          goto state 22

State 9

	%start_pExpr3 -> . Expr3                            (rule 9)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 41
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr3          goto state 59

State 10

	%start_pType -> . Type                              (rule 10)

	'('            shift, and enter state 49
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 50
	'Bot'          shift, and enter state 51
	'Nat'          shift, and enter state 52
	'Top'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58

	Type           goto state 54
	Type1          goto state 55

State 11

	%start_pType1 -> . Type1                            (rule 11)

	'('            shift, and enter state 49
	'Bool'         shift, and enter state 50
	'Bot'          shift, and enter state 51
	'Nat'          shift, and enter state 52
	'Top'          shift, and enter state 53

	Type1          goto state 48

State 12

	%start_pFieldType -> . FieldType                    (rule 12)

	L_Ident        shift, and enter state 16

	Ident          goto state 44
	FieldType      goto state 47

State 13

	%start_pListFieldType -> . ListFieldType            (rule 13)

	L_Ident        shift, and enter state 16
	%eof           reduce using rule 66

	Ident          goto state 44
	FieldType      goto state 45
	ListFieldType  goto state 46

State 14

	%start_pTyping -> . Typing                          (rule 14)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fun'          shift, and enter state 31
	'head'         shift, and enter state 32
	'if'           shift, and enter state 33
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'let'          shift, and enter state 36
	'match'        shift, and enter state 37
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	'{'            shift, and enter state 42
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr           goto state 19
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22
	Typing         goto state 23

State 15

	Ident -> . L_Ident                                  (rule 15)

	L_Ident        shift, and enter state 16


State 16

	Ident -> L_Ident .                                  (rule 15)

	'('            reduce using rule 15
	')'            reduce using rule 15
	','            reduce using rule 15
	'.'            reduce using rule 15
	'0'            reduce using rule 15
	':'            reduce using rule 15
	';'            reduce using rule 15
	'='            reduce using rule 15
	'>'            reduce using rule 15
	']'            reduce using rule 15
	'cons'         reduce using rule 15
	'else'         reduce using rule 15
	'false'        reduce using rule 15
	'fix'          reduce using rule 15
	'head'         reduce using rule 15
	'in'           reduce using rule 15
	'isempty'      reduce using rule 15
	'iszero'       reduce using rule 15
	'pred'         reduce using rule 15
	'succ'         reduce using rule 15
	'tail'         reduce using rule 15
	'then'         reduce using rule 15
	'true'         reduce using rule 15
	'{'            reduce using rule 15
	'}'            reduce using rule 15
	L_Ident        reduce using rule 15
	L_integ        reduce using rule 15
	%eof           reduce using rule 15


State 17

	Expr3 -> Ident .                                    (rule 52)

	'('            reduce using rule 52
	')'            reduce using rule 52
	','            reduce using rule 52
	'.'            reduce using rule 52
	'0'            reduce using rule 52
	':'            reduce using rule 52
	';'            reduce using rule 52
	'>'            reduce using rule 52
	']'            reduce using rule 52
	'cons'         reduce using rule 52
	'else'         reduce using rule 52
	'false'        reduce using rule 52
	'fix'          reduce using rule 52
	'head'         reduce using rule 52
	'in'           reduce using rule 52
	'isempty'      reduce using rule 52
	'iszero'       reduce using rule 52
	'pred'         reduce using rule 52
	'succ'         reduce using rule 52
	'tail'         reduce using rule 52
	'then'         reduce using rule 52
	'true'         reduce using rule 52
	'{'            reduce using rule 52
	'}'            reduce using rule 52
	L_Ident        reduce using rule 52
	L_integ        reduce using rule 52
	%eof           reduce using rule 52


State 18

	Expr3 -> Integer .                                  (rule 53)

	'('            reduce using rule 53
	')'            reduce using rule 53
	','            reduce using rule 53
	'.'            reduce using rule 53
	'0'            reduce using rule 53
	':'            reduce using rule 53
	';'            reduce using rule 53
	'>'            reduce using rule 53
	']'            reduce using rule 53
	'cons'         reduce using rule 53
	'else'         reduce using rule 53
	'false'        reduce using rule 53
	'fix'          reduce using rule 53
	'head'         reduce using rule 53
	'in'           reduce using rule 53
	'isempty'      reduce using rule 53
	'iszero'       reduce using rule 53
	'pred'         reduce using rule 53
	'succ'         reduce using rule 53
	'tail'         reduce using rule 53
	'then'         reduce using rule 53
	'true'         reduce using rule 53
	'{'            reduce using rule 53
	'}'            reduce using rule 53
	L_Ident        reduce using rule 53
	L_integ        reduce using rule 53
	%eof           reduce using rule 53


State 19

	Typing -> Expr . ':' Type                           (rule 69)

	':'            shift, and enter state 105


State 20

	Expr -> Expr1 .                                     (rule 28)
	Expr1 -> Expr1 . Expr2                              (rule 37)

	'('            shift, and enter state 24
	')'            reduce using rule 28
	','            reduce using rule 28
	'0'            shift, and enter state 25
	':'            reduce using rule 28
	';'            reduce using rule 28
	'>'            reduce using rule 28
	']'            reduce using rule 28
	'cons'         shift, and enter state 28
	'else'         reduce using rule 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'head'         shift, and enter state 32
	'in'           reduce using rule 28
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'then'         reduce using rule 28
	'true'         shift, and enter state 41
	'}'            reduce using rule 28
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43
	%eof           reduce using rule 28

	Ident          goto state 17
	Integer        goto state 18
	Expr2          goto state 80
	Expr3          goto state 22

State 21

	Expr1 -> Expr2 .                                    (rule 38)

	'('            reduce using rule 38
	')'            reduce using rule 38
	','            reduce using rule 38
	'0'            reduce using rule 38
	':'            reduce using rule 38
	';'            reduce using rule 38
	'>'            reduce using rule 38
	']'            reduce using rule 38
	'cons'         reduce using rule 38
	'else'         reduce using rule 38
	'false'        reduce using rule 38
	'fix'          reduce using rule 38
	'head'         reduce using rule 38
	'in'           reduce using rule 38
	'isempty'      reduce using rule 38
	'iszero'       reduce using rule 38
	'pred'         reduce using rule 38
	'succ'         reduce using rule 38
	'tail'         reduce using rule 38
	'then'         reduce using rule 38
	'true'         reduce using rule 38
	'{'            reduce using rule 38
	'}'            reduce using rule 38
	L_Ident        reduce using rule 38
	L_integ        reduce using rule 38
	%eof           reduce using rule 38


State 22

	Expr2 -> Expr3 .                                    (rule 47)
	Expr3 -> Expr3 . '.' Ident                          (rule 48)

	'('            reduce using rule 47
	')'            reduce using rule 47
	','            reduce using rule 47
	'.'            shift, and enter state 81
	'0'            reduce using rule 47
	':'            reduce using rule 47
	';'            reduce using rule 47
	'>'            reduce using rule 47
	']'            reduce using rule 47
	'cons'         reduce using rule 47
	'else'         reduce using rule 47
	'false'        reduce using rule 47
	'fix'          reduce using rule 47
	'head'         reduce using rule 47
	'in'           reduce using rule 47
	'isempty'      reduce using rule 47
	'iszero'       reduce using rule 47
	'pred'         reduce using rule 47
	'succ'         reduce using rule 47
	'tail'         reduce using rule 47
	'then'         reduce using rule 47
	'true'         reduce using rule 47
	'{'            reduce using rule 47
	'}'            reduce using rule 47
	L_Ident        reduce using rule 47
	L_integ        reduce using rule 47
	%eof           reduce using rule 47


State 23

	%start_pTyping -> Typing .                          (rule 14)

	%eof           accept


State 24

	Expr3 -> '(' . Expr ')'                             (rule 54)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fun'          shift, and enter state 31
	'head'         shift, and enter state 32
	'if'           shift, and enter state 33
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'let'          shift, and enter state 36
	'match'        shift, and enter state 37
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	'{'            shift, and enter state 42
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr           goto state 104
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 25

	Expr3 -> '0' .                                      (rule 51)

	'('            reduce using rule 51
	')'            reduce using rule 51
	','            reduce using rule 51
	'.'            reduce using rule 51
	'0'            reduce using rule 51
	':'            reduce using rule 51
	';'            reduce using rule 51
	'>'            reduce using rule 51
	']'            reduce using rule 51
	'cons'         reduce using rule 51
	'else'         reduce using rule 51
	'false'        reduce using rule 51
	'fix'          reduce using rule 51
	'head'         reduce using rule 51
	'in'           reduce using rule 51
	'isempty'      reduce using rule 51
	'iszero'       reduce using rule 51
	'pred'         reduce using rule 51
	'succ'         reduce using rule 51
	'tail'         reduce using rule 51
	'then'         reduce using rule 51
	'true'         reduce using rule 51
	'{'            reduce using rule 51
	'}'            reduce using rule 51
	L_Ident        reduce using rule 51
	L_integ        reduce using rule 51
	%eof           reduce using rule 51


State 26

	Expr -> '<' . Ident '=' Expr '>'                    (rule 25)

	L_Ident        shift, and enter state 16

	Ident          goto state 103

State 27

	Expr -> '[' . ListExpr ']'                          (rule 27)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	']'            reduce using rule 18
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fun'          shift, and enter state 31
	'head'         shift, and enter state 32
	'if'           shift, and enter state 33
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'let'          shift, and enter state 36
	'match'        shift, and enter state 37
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	'{'            shift, and enter state 42
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	ListExpr       goto state 102
	Expr           goto state 72
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 28

	Expr2 -> 'cons' . Expr3 Expr3                       (rule 39)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 41
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr3          goto state 101

State 29

	Expr3 -> 'false' .                                  (rule 50)

	'('            reduce using rule 50
	')'            reduce using rule 50
	','            reduce using rule 50
	'.'            reduce using rule 50
	'0'            reduce using rule 50
	':'            reduce using rule 50
	';'            reduce using rule 50
	'>'            reduce using rule 50
	']'            reduce using rule 50
	'cons'         reduce using rule 50
	'else'         reduce using rule 50
	'false'        reduce using rule 50
	'fix'          reduce using rule 50
	'head'         reduce using rule 50
	'in'           reduce using rule 50
	'isempty'      reduce using rule 50
	'iszero'       reduce using rule 50
	'pred'         reduce using rule 50
	'succ'         reduce using rule 50
	'tail'         reduce using rule 50
	'then'         reduce using rule 50
	'true'         reduce using rule 50
	'{'            reduce using rule 50
	'}'            reduce using rule 50
	L_Ident        reduce using rule 50
	L_integ        reduce using rule 50
	%eof           reduce using rule 50


State 30

	Expr2 -> 'fix' . Expr3                              (rule 45)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 41
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr3          goto state 100

State 31

	Expr -> 'fun' . '(' Type ')' '{' 'return' Expr '}'    (rule 23)

	'('            shift, and enter state 99


State 32

	Expr2 -> 'head' . Expr3                             (rule 40)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 41
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr3          goto state 98

State 33

	Expr -> 'if' . Expr 'then' Expr 'else' Expr         (rule 21)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fun'          shift, and enter state 31
	'head'         shift, and enter state 32
	'if'           shift, and enter state 33
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'let'          shift, and enter state 36
	'match'        shift, and enter state 37
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	'{'            shift, and enter state 42
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr           goto state 97
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 34

	Expr2 -> 'isempty' . Expr3                          (rule 46)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 41
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr3          goto state 96

State 35

	Expr2 -> 'iszero' . Expr3                           (rule 44)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 41
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr3          goto state 95

State 36

	Expr -> 'let' . Expr 'in' Expr                      (rule 22)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fun'          shift, and enter state 31
	'head'         shift, and enter state 32
	'if'           shift, and enter state 33
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'let'          shift, and enter state 36
	'match'        shift, and enter state 37
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	'{'            shift, and enter state 42
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr           goto state 94
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 37

	Expr -> 'match' . Expr1 '{' ListMatchCase '}'       (rule 26)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'head'         shift, and enter state 32
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr1          goto state 93
	Expr2          goto state 21
	Expr3          goto state 22

State 38

	Expr2 -> 'pred' . Expr3                             (rule 43)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 41
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr3          goto state 92

State 39

	Expr2 -> 'succ' . Expr3                             (rule 42)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 41
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr3          goto state 91

State 40

	Expr2 -> 'tail' . Expr3                             (rule 41)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 41
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr3          goto state 90

State 41

	Expr3 -> 'true' .                                   (rule 49)

	'('            reduce using rule 49
	')'            reduce using rule 49
	','            reduce using rule 49
	'.'            reduce using rule 49
	'0'            reduce using rule 49
	':'            reduce using rule 49
	';'            reduce using rule 49
	'>'            reduce using rule 49
	']'            reduce using rule 49
	'cons'         reduce using rule 49
	'else'         reduce using rule 49
	'false'        reduce using rule 49
	'fix'          reduce using rule 49
	'head'         reduce using rule 49
	'in'           reduce using rule 49
	'isempty'      reduce using rule 49
	'iszero'       reduce using rule 49
	'pred'         reduce using rule 49
	'succ'         reduce using rule 49
	'tail'         reduce using rule 49
	'then'         reduce using rule 49
	'true'         reduce using rule 49
	'{'            reduce using rule 49
	'}'            reduce using rule 49
	L_Ident        reduce using rule 49
	L_integ        reduce using rule 49
	%eof           reduce using rule 49


State 42

	Expr -> '{' . ListBinding '}'                       (rule 24)

	'}'            reduce using rule 34
	L_Ident        shift, and enter state 16

	Ident          goto state 62
	Binding        goto state 63
	ListBinding    goto state 89

State 43

	Integer -> L_integ .                                (rule 16)

	'('            reduce using rule 16
	')'            reduce using rule 16
	','            reduce using rule 16
	'.'            reduce using rule 16
	'0'            reduce using rule 16
	':'            reduce using rule 16
	';'            reduce using rule 16
	'>'            reduce using rule 16
	']'            reduce using rule 16
	'cons'         reduce using rule 16
	'else'         reduce using rule 16
	'false'        reduce using rule 16
	'fix'          reduce using rule 16
	'head'         reduce using rule 16
	'in'           reduce using rule 16
	'isempty'      reduce using rule 16
	'iszero'       reduce using rule 16
	'pred'         reduce using rule 16
	'succ'         reduce using rule 16
	'tail'         reduce using rule 16
	'then'         reduce using rule 16
	'true'         reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	L_Ident        reduce using rule 16
	L_integ        reduce using rule 16
	%eof           reduce using rule 16


State 44

	FieldType -> Ident . ':' Type                       (rule 65)

	':'            shift, and enter state 88


State 45

	ListFieldType -> FieldType .                        (rule 67)
	ListFieldType -> FieldType . ',' ListFieldType      (rule 68)

	','            shift, and enter state 87
	'>'            reduce using rule 67
	'}'            reduce using rule 67
	%eof           reduce using rule 67


State 46

	%start_pListFieldType -> ListFieldType .            (rule 13)

	%eof           accept


State 47

	%start_pFieldType -> FieldType .                    (rule 12)

	%eof           accept


State 48

	%start_pType1 -> Type1 .                            (rule 11)

	%eof           accept


State 49

	Type1 -> '(' . Type ')'                             (rule 64)

	'('            shift, and enter state 49
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 50
	'Bot'          shift, and enter state 51
	'Nat'          shift, and enter state 52
	'Top'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58

	Type           goto state 86
	Type1          goto state 55

State 50

	Type1 -> 'Bool' .                                   (rule 60)

	')'            reduce using rule 60
	','            reduce using rule 60
	'->'           reduce using rule 60
	'>'            reduce using rule 60
	']'            reduce using rule 60
	'}'            reduce using rule 60
	%eof           reduce using rule 60


State 51

	Type1 -> 'Bot' .                                    (rule 63)

	')'            reduce using rule 63
	','            reduce using rule 63
	'->'           reduce using rule 63
	'>'            reduce using rule 63
	']'            reduce using rule 63
	'}'            reduce using rule 63
	%eof           reduce using rule 63


State 52

	Type1 -> 'Nat' .                                    (rule 61)

	')'            reduce using rule 61
	','            reduce using rule 61
	'->'           reduce using rule 61
	'>'            reduce using rule 61
	']'            reduce using rule 61
	'}'            reduce using rule 61
	%eof           reduce using rule 61


State 53

	Type1 -> 'Top' .                                    (rule 62)

	')'            reduce using rule 62
	','            reduce using rule 62
	'->'           reduce using rule 62
	'>'            reduce using rule 62
	']'            reduce using rule 62
	'}'            reduce using rule 62
	%eof           reduce using rule 62


State 54

	%start_pType -> Type .                              (rule 10)

	%eof           accept


State 55

	Type -> Type1 . '->' Type                           (rule 55)
	Type -> Type1 .                                     (rule 59)

	')'            reduce using rule 59
	','            reduce using rule 59
	'->'           shift, and enter state 85
	'>'            reduce using rule 59
	']'            reduce using rule 59
	'}'            reduce using rule 59
	%eof           reduce using rule 59


State 56

	Type -> '<' . ListFieldType '>'                     (rule 57)

	'>'            reduce using rule 66
	L_Ident        shift, and enter state 16

	Ident          goto state 44
	FieldType      goto state 45
	ListFieldType  goto state 84

State 57

	Type -> '[' . Type ']'                              (rule 58)

	'('            shift, and enter state 49
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 50
	'Bot'          shift, and enter state 51
	'Nat'          shift, and enter state 52
	'Top'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58

	Type           goto state 83
	Type1          goto state 55

State 58

	Type -> '{' . ListFieldType '}'                     (rule 56)

	'}'            reduce using rule 66
	L_Ident        shift, and enter state 16

	Ident          goto state 44
	FieldType      goto state 45
	ListFieldType  goto state 82

State 59

	%start_pExpr3 -> Expr3 .                            (rule 9)
	Expr3 -> Expr3 . '.' Ident                          (rule 48)

	'.'            shift, and enter state 81
	%eof           accept


State 60

	%start_pExpr2 -> Expr2 .                            (rule 8)

	%eof           accept


State 61

	%start_pExpr1 -> Expr1 .                            (rule 7)
	Expr1 -> Expr1 . Expr2                              (rule 37)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'head'         shift, and enter state 32
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43
	%eof           accept

	Ident          goto state 17
	Integer        goto state 18
	Expr2          goto state 80
	Expr3          goto state 22

State 62

	Binding -> Ident . '=' Expr                         (rule 33)

	'='            shift, and enter state 79


State 63

	ListBinding -> Binding .                            (rule 35)
	ListBinding -> Binding . ',' ListBinding            (rule 36)

	','            shift, and enter state 78
	'}'            reduce using rule 35
	%eof           reduce using rule 35


State 64

	%start_pListBinding -> ListBinding .                (rule 6)

	%eof           accept


State 65

	%start_pBinding -> Binding .                        (rule 5)

	%eof           accept


State 66

	ListMatchCase -> MatchCase .                        (rule 31)
	ListMatchCase -> MatchCase . ';' ListMatchCase      (rule 32)

	';'            shift, and enter state 77
	'}'            reduce using rule 31
	%eof           reduce using rule 31


State 67

	%start_pListMatchCase -> ListMatchCase .            (rule 4)

	%eof           accept


State 68

	MatchCase -> '<' . Ident '>' '=>' Expr              (rule 29)

	L_Ident        shift, and enter state 16

	Ident          goto state 76

State 69

	%start_pMatchCase -> MatchCase .                    (rule 3)

	%eof           accept


State 70

	%start_pExpr -> Expr .                              (rule 2)

	%eof           accept


State 71

	%start_pListExpr -> ListExpr .                      (rule 1)

	%eof           accept


State 72

	ListExpr -> Expr .                                  (rule 19)
	ListExpr -> Expr . ';' ListExpr                     (rule 20)

	';'            shift, and enter state 75
	']'            reduce using rule 19
	%eof           reduce using rule 19


State 73

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 74

	Program -> ListExpr .                               (rule 17)

	%eof           reduce using rule 17


State 75

	ListExpr -> Expr ';' . ListExpr                     (rule 20)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	']'            reduce using rule 18
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fun'          shift, and enter state 31
	'head'         shift, and enter state 32
	'if'           shift, and enter state 33
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'let'          shift, and enter state 36
	'match'        shift, and enter state 37
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	'{'            shift, and enter state 42
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43
	%eof           reduce using rule 18

	Ident          goto state 17
	Integer        goto state 18
	ListExpr       goto state 128
	Expr           goto state 72
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 76

	MatchCase -> '<' Ident . '>' '=>' Expr              (rule 29)

	'>'            shift, and enter state 127


State 77

	ListMatchCase -> MatchCase ';' . ListMatchCase      (rule 32)

	'<'            shift, and enter state 68
	'}'            reduce using rule 30
	%eof           reduce using rule 30

	MatchCase      goto state 66
	ListMatchCase  goto state 126

State 78

	ListBinding -> Binding ',' . ListBinding            (rule 36)

	'}'            reduce using rule 34
	L_Ident        shift, and enter state 16
	%eof           reduce using rule 34

	Ident          goto state 62
	Binding        goto state 63
	ListBinding    goto state 125

State 79

	Binding -> Ident '=' . Expr                         (rule 33)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fun'          shift, and enter state 31
	'head'         shift, and enter state 32
	'if'           shift, and enter state 33
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'let'          shift, and enter state 36
	'match'        shift, and enter state 37
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	'{'            shift, and enter state 42
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr           goto state 124
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 80

	Expr1 -> Expr1 Expr2 .                              (rule 37)

	'('            reduce using rule 37
	')'            reduce using rule 37
	','            reduce using rule 37
	'0'            reduce using rule 37
	':'            reduce using rule 37
	';'            reduce using rule 37
	'>'            reduce using rule 37
	']'            reduce using rule 37
	'cons'         reduce using rule 37
	'else'         reduce using rule 37
	'false'        reduce using rule 37
	'fix'          reduce using rule 37
	'head'         reduce using rule 37
	'in'           reduce using rule 37
	'isempty'      reduce using rule 37
	'iszero'       reduce using rule 37
	'pred'         reduce using rule 37
	'succ'         reduce using rule 37
	'tail'         reduce using rule 37
	'then'         reduce using rule 37
	'true'         reduce using rule 37
	'{'            reduce using rule 37
	'}'            reduce using rule 37
	L_Ident        reduce using rule 37
	L_integ        reduce using rule 37
	%eof           reduce using rule 37


State 81

	Expr3 -> Expr3 '.' . Ident                          (rule 48)

	L_Ident        shift, and enter state 16

	Ident          goto state 123

State 82

	Type -> '{' ListFieldType . '}'                     (rule 56)

	'}'            shift, and enter state 122


State 83

	Type -> '[' Type . ']'                              (rule 58)

	']'            shift, and enter state 121


State 84

	Type -> '<' ListFieldType . '>'                     (rule 57)

	'>'            shift, and enter state 120


State 85

	Type -> Type1 '->' . Type                           (rule 55)

	'('            shift, and enter state 49
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 50
	'Bot'          shift, and enter state 51
	'Nat'          shift, and enter state 52
	'Top'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58

	Type           goto state 119
	Type1          goto state 55

State 86

	Type1 -> '(' Type . ')'                             (rule 64)

	')'            shift, and enter state 118


State 87

	ListFieldType -> FieldType ',' . ListFieldType      (rule 68)

	'>'            reduce using rule 66
	'}'            reduce using rule 66
	L_Ident        shift, and enter state 16
	%eof           reduce using rule 66

	Ident          goto state 44
	FieldType      goto state 45
	ListFieldType  goto state 117

State 88

	FieldType -> Ident ':' . Type                       (rule 65)

	'('            shift, and enter state 49
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 50
	'Bot'          shift, and enter state 51
	'Nat'          shift, and enter state 52
	'Top'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58

	Type           goto state 116
	Type1          goto state 55

State 89

	Expr -> '{' ListBinding . '}'                       (rule 24)

	'}'            shift, and enter state 115


State 90

	Expr2 -> 'tail' Expr3 .                             (rule 41)
	Expr3 -> Expr3 . '.' Ident                          (rule 48)

	'('            reduce using rule 41
	')'            reduce using rule 41
	','            reduce using rule 41
	'.'            shift, and enter state 81
	'0'            reduce using rule 41
	':'            reduce using rule 41
	';'            reduce using rule 41
	'>'            reduce using rule 41
	']'            reduce using rule 41
	'cons'         reduce using rule 41
	'else'         reduce using rule 41
	'false'        reduce using rule 41
	'fix'          reduce using rule 41
	'head'         reduce using rule 41
	'in'           reduce using rule 41
	'isempty'      reduce using rule 41
	'iszero'       reduce using rule 41
	'pred'         reduce using rule 41
	'succ'         reduce using rule 41
	'tail'         reduce using rule 41
	'then'         reduce using rule 41
	'true'         reduce using rule 41
	'{'            reduce using rule 41
	'}'            reduce using rule 41
	L_Ident        reduce using rule 41
	L_integ        reduce using rule 41
	%eof           reduce using rule 41


State 91

	Expr2 -> 'succ' Expr3 .                             (rule 42)
	Expr3 -> Expr3 . '.' Ident                          (rule 48)

	'('            reduce using rule 42
	')'            reduce using rule 42
	','            reduce using rule 42
	'.'            shift, and enter state 81
	'0'            reduce using rule 42
	':'            reduce using rule 42
	';'            reduce using rule 42
	'>'            reduce using rule 42
	']'            reduce using rule 42
	'cons'         reduce using rule 42
	'else'         reduce using rule 42
	'false'        reduce using rule 42
	'fix'          reduce using rule 42
	'head'         reduce using rule 42
	'in'           reduce using rule 42
	'isempty'      reduce using rule 42
	'iszero'       reduce using rule 42
	'pred'         reduce using rule 42
	'succ'         reduce using rule 42
	'tail'         reduce using rule 42
	'then'         reduce using rule 42
	'true'         reduce using rule 42
	'{'            reduce using rule 42
	'}'            reduce using rule 42
	L_Ident        reduce using rule 42
	L_integ        reduce using rule 42
	%eof           reduce using rule 42


State 92

	Expr2 -> 'pred' Expr3 .                             (rule 43)
	Expr3 -> Expr3 . '.' Ident                          (rule 48)

	'('            reduce using rule 43
	')'            reduce using rule 43
	','            reduce using rule 43
	'.'            shift, and enter state 81
	'0'            reduce using rule 43
	':'            reduce using rule 43
	';'            reduce using rule 43
	'>'            reduce using rule 43
	']'            reduce using rule 43
	'cons'         reduce using rule 43
	'else'         reduce using rule 43
	'false'        reduce using rule 43
	'fix'          reduce using rule 43
	'head'         reduce using rule 43
	'in'           reduce using rule 43
	'isempty'      reduce using rule 43
	'iszero'       reduce using rule 43
	'pred'         reduce using rule 43
	'succ'         reduce using rule 43
	'tail'         reduce using rule 43
	'then'         reduce using rule 43
	'true'         reduce using rule 43
	'{'            reduce using rule 43
	'}'            reduce using rule 43
	L_Ident        reduce using rule 43
	L_integ        reduce using rule 43
	%eof           reduce using rule 43


State 93

	Expr -> 'match' Expr1 . '{' ListMatchCase '}'       (rule 26)
	Expr1 -> Expr1 . Expr2                              (rule 37)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'head'         shift, and enter state 32
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	'{'            shift, and enter state 114
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr2          goto state 80
	Expr3          goto state 22

State 94

	Expr -> 'let' Expr . 'in' Expr                      (rule 22)

	'in'           shift, and enter state 113


State 95

	Expr2 -> 'iszero' Expr3 .                           (rule 44)
	Expr3 -> Expr3 . '.' Ident                          (rule 48)

	'('            reduce using rule 44
	')'            reduce using rule 44
	','            reduce using rule 44
	'.'            shift, and enter state 81
	'0'            reduce using rule 44
	':'            reduce using rule 44
	';'            reduce using rule 44
	'>'            reduce using rule 44
	']'            reduce using rule 44
	'cons'         reduce using rule 44
	'else'         reduce using rule 44
	'false'        reduce using rule 44
	'fix'          reduce using rule 44
	'head'         reduce using rule 44
	'in'           reduce using rule 44
	'isempty'      reduce using rule 44
	'iszero'       reduce using rule 44
	'pred'         reduce using rule 44
	'succ'         reduce using rule 44
	'tail'         reduce using rule 44
	'then'         reduce using rule 44
	'true'         reduce using rule 44
	'{'            reduce using rule 44
	'}'            reduce using rule 44
	L_Ident        reduce using rule 44
	L_integ        reduce using rule 44
	%eof           reduce using rule 44


State 96

	Expr2 -> 'isempty' Expr3 .                          (rule 46)
	Expr3 -> Expr3 . '.' Ident                          (rule 48)

	'('            reduce using rule 46
	')'            reduce using rule 46
	','            reduce using rule 46
	'.'            shift, and enter state 81
	'0'            reduce using rule 46
	':'            reduce using rule 46
	';'            reduce using rule 46
	'>'            reduce using rule 46
	']'            reduce using rule 46
	'cons'         reduce using rule 46
	'else'         reduce using rule 46
	'false'        reduce using rule 46
	'fix'          reduce using rule 46
	'head'         reduce using rule 46
	'in'           reduce using rule 46
	'isempty'      reduce using rule 46
	'iszero'       reduce using rule 46
	'pred'         reduce using rule 46
	'succ'         reduce using rule 46
	'tail'         reduce using rule 46
	'then'         reduce using rule 46
	'true'         reduce using rule 46
	'{'            reduce using rule 46
	'}'            reduce using rule 46
	L_Ident        reduce using rule 46
	L_integ        reduce using rule 46
	%eof           reduce using rule 46


State 97

	Expr -> 'if' Expr . 'then' Expr 'else' Expr         (rule 21)

	'then'         shift, and enter state 112


State 98

	Expr2 -> 'head' Expr3 .                             (rule 40)
	Expr3 -> Expr3 . '.' Ident                          (rule 48)

	'('            reduce using rule 40
	')'            reduce using rule 40
	','            reduce using rule 40
	'.'            shift, and enter state 81
	'0'            reduce using rule 40
	':'            reduce using rule 40
	';'            reduce using rule 40
	'>'            reduce using rule 40
	']'            reduce using rule 40
	'cons'         reduce using rule 40
	'else'         reduce using rule 40
	'false'        reduce using rule 40
	'fix'          reduce using rule 40
	'head'         reduce using rule 40
	'in'           reduce using rule 40
	'isempty'      reduce using rule 40
	'iszero'       reduce using rule 40
	'pred'         reduce using rule 40
	'succ'         reduce using rule 40
	'tail'         reduce using rule 40
	'then'         reduce using rule 40
	'true'         reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	L_Ident        reduce using rule 40
	L_integ        reduce using rule 40
	%eof           reduce using rule 40


State 99

	Expr -> 'fun' '(' . Type ')' '{' 'return' Expr '}'    (rule 23)

	'('            shift, and enter state 49
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 50
	'Bot'          shift, and enter state 51
	'Nat'          shift, and enter state 52
	'Top'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58

	Type           goto state 111
	Type1          goto state 55

State 100

	Expr2 -> 'fix' Expr3 .                              (rule 45)
	Expr3 -> Expr3 . '.' Ident                          (rule 48)

	'('            reduce using rule 45
	')'            reduce using rule 45
	','            reduce using rule 45
	'.'            shift, and enter state 81
	'0'            reduce using rule 45
	':'            reduce using rule 45
	';'            reduce using rule 45
	'>'            reduce using rule 45
	']'            reduce using rule 45
	'cons'         reduce using rule 45
	'else'         reduce using rule 45
	'false'        reduce using rule 45
	'fix'          reduce using rule 45
	'head'         reduce using rule 45
	'in'           reduce using rule 45
	'isempty'      reduce using rule 45
	'iszero'       reduce using rule 45
	'pred'         reduce using rule 45
	'succ'         reduce using rule 45
	'tail'         reduce using rule 45
	'then'         reduce using rule 45
	'true'         reduce using rule 45
	'{'            reduce using rule 45
	'}'            reduce using rule 45
	L_Ident        reduce using rule 45
	L_integ        reduce using rule 45
	%eof           reduce using rule 45


State 101

	Expr2 -> 'cons' Expr3 . Expr3                       (rule 39)
	Expr3 -> Expr3 . '.' Ident                          (rule 48)

	'('            shift, and enter state 24
	'.'            shift, and enter state 81
	'0'            shift, and enter state 25
	'false'        shift, and enter state 29
	'true'         shift, and enter state 41
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr3          goto state 110

State 102

	Expr -> '[' ListExpr . ']'                          (rule 27)

	']'            shift, and enter state 109


State 103

	Expr -> '<' Ident . '=' Expr '>'                    (rule 25)

	'='            shift, and enter state 108


State 104

	Expr3 -> '(' Expr . ')'                             (rule 54)

	')'            shift, and enter state 107


State 105

	Typing -> Expr ':' . Type                           (rule 69)

	'('            shift, and enter state 49
	'<'            shift, and enter state 56
	'Bool'         shift, and enter state 50
	'Bot'          shift, and enter state 51
	'Nat'          shift, and enter state 52
	'Top'          shift, and enter state 53
	'['            shift, and enter state 57
	'{'            shift, and enter state 58

	Type           goto state 106
	Type1          goto state 55

State 106

	Typing -> Expr ':' Type .                           (rule 69)

	%eof           reduce using rule 69


State 107

	Expr3 -> '(' Expr ')' .                             (rule 54)

	'('            reduce using rule 54
	')'            reduce using rule 54
	','            reduce using rule 54
	'.'            reduce using rule 54
	'0'            reduce using rule 54
	':'            reduce using rule 54
	';'            reduce using rule 54
	'>'            reduce using rule 54
	']'            reduce using rule 54
	'cons'         reduce using rule 54
	'else'         reduce using rule 54
	'false'        reduce using rule 54
	'fix'          reduce using rule 54
	'head'         reduce using rule 54
	'in'           reduce using rule 54
	'isempty'      reduce using rule 54
	'iszero'       reduce using rule 54
	'pred'         reduce using rule 54
	'succ'         reduce using rule 54
	'tail'         reduce using rule 54
	'then'         reduce using rule 54
	'true'         reduce using rule 54
	'{'            reduce using rule 54
	'}'            reduce using rule 54
	L_Ident        reduce using rule 54
	L_integ        reduce using rule 54
	%eof           reduce using rule 54


State 108

	Expr -> '<' Ident '=' . Expr '>'                    (rule 25)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fun'          shift, and enter state 31
	'head'         shift, and enter state 32
	'if'           shift, and enter state 33
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'let'          shift, and enter state 36
	'match'        shift, and enter state 37
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	'{'            shift, and enter state 42
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr           goto state 134
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 109

	Expr -> '[' ListExpr ']' .                          (rule 27)

	')'            reduce using rule 27
	','            reduce using rule 27
	':'            reduce using rule 27
	';'            reduce using rule 27
	'>'            reduce using rule 27
	']'            reduce using rule 27
	'else'         reduce using rule 27
	'in'           reduce using rule 27
	'then'         reduce using rule 27
	'}'            reduce using rule 27
	%eof           reduce using rule 27


State 110

	Expr2 -> 'cons' Expr3 Expr3 .                       (rule 39)
	Expr3 -> Expr3 . '.' Ident                          (rule 48)

	'('            reduce using rule 39
	')'            reduce using rule 39
	','            reduce using rule 39
	'.'            shift, and enter state 81
	'0'            reduce using rule 39
	':'            reduce using rule 39
	';'            reduce using rule 39
	'>'            reduce using rule 39
	']'            reduce using rule 39
	'cons'         reduce using rule 39
	'else'         reduce using rule 39
	'false'        reduce using rule 39
	'fix'          reduce using rule 39
	'head'         reduce using rule 39
	'in'           reduce using rule 39
	'isempty'      reduce using rule 39
	'iszero'       reduce using rule 39
	'pred'         reduce using rule 39
	'succ'         reduce using rule 39
	'tail'         reduce using rule 39
	'then'         reduce using rule 39
	'true'         reduce using rule 39
	'{'            reduce using rule 39
	'}'            reduce using rule 39
	L_Ident        reduce using rule 39
	L_integ        reduce using rule 39
	%eof           reduce using rule 39


State 111

	Expr -> 'fun' '(' Type . ')' '{' 'return' Expr '}'    (rule 23)

	')'            shift, and enter state 133


State 112

	Expr -> 'if' Expr 'then' . Expr 'else' Expr         (rule 21)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fun'          shift, and enter state 31
	'head'         shift, and enter state 32
	'if'           shift, and enter state 33
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'let'          shift, and enter state 36
	'match'        shift, and enter state 37
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	'{'            shift, and enter state 42
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr           goto state 132
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 113

	Expr -> 'let' Expr 'in' . Expr                      (rule 22)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fun'          shift, and enter state 31
	'head'         shift, and enter state 32
	'if'           shift, and enter state 33
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'let'          shift, and enter state 36
	'match'        shift, and enter state 37
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	'{'            shift, and enter state 42
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr           goto state 131
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 114

	Expr -> 'match' Expr1 '{' . ListMatchCase '}'       (rule 26)

	'<'            shift, and enter state 68
	'}'            reduce using rule 30

	MatchCase      goto state 66
	ListMatchCase  goto state 130

State 115

	Expr -> '{' ListBinding '}' .                       (rule 24)

	')'            reduce using rule 24
	','            reduce using rule 24
	':'            reduce using rule 24
	';'            reduce using rule 24
	'>'            reduce using rule 24
	']'            reduce using rule 24
	'else'         reduce using rule 24
	'in'           reduce using rule 24
	'then'         reduce using rule 24
	'}'            reduce using rule 24
	%eof           reduce using rule 24


State 116

	FieldType -> Ident ':' Type .                       (rule 65)

	','            reduce using rule 65
	'>'            reduce using rule 65
	'}'            reduce using rule 65
	%eof           reduce using rule 65


State 117

	ListFieldType -> FieldType ',' ListFieldType .      (rule 68)

	'>'            reduce using rule 68
	'}'            reduce using rule 68
	%eof           reduce using rule 68


State 118

	Type1 -> '(' Type ')' .                             (rule 64)

	')'            reduce using rule 64
	','            reduce using rule 64
	'->'           reduce using rule 64
	'>'            reduce using rule 64
	']'            reduce using rule 64
	'}'            reduce using rule 64
	%eof           reduce using rule 64


State 119

	Type -> Type1 '->' Type .                           (rule 55)

	')'            reduce using rule 55
	','            reduce using rule 55
	'>'            reduce using rule 55
	']'            reduce using rule 55
	'}'            reduce using rule 55
	%eof           reduce using rule 55


State 120

	Type -> '<' ListFieldType '>' .                     (rule 57)

	')'            reduce using rule 57
	','            reduce using rule 57
	'>'            reduce using rule 57
	']'            reduce using rule 57
	'}'            reduce using rule 57
	%eof           reduce using rule 57


State 121

	Type -> '[' Type ']' .                              (rule 58)

	')'            reduce using rule 58
	','            reduce using rule 58
	'>'            reduce using rule 58
	']'            reduce using rule 58
	'}'            reduce using rule 58
	%eof           reduce using rule 58


State 122

	Type -> '{' ListFieldType '}' .                     (rule 56)

	')'            reduce using rule 56
	','            reduce using rule 56
	'>'            reduce using rule 56
	']'            reduce using rule 56
	'}'            reduce using rule 56
	%eof           reduce using rule 56


State 123

	Expr3 -> Expr3 '.' Ident .                          (rule 48)

	'('            reduce using rule 48
	')'            reduce using rule 48
	','            reduce using rule 48
	'.'            reduce using rule 48
	'0'            reduce using rule 48
	':'            reduce using rule 48
	';'            reduce using rule 48
	'>'            reduce using rule 48
	']'            reduce using rule 48
	'cons'         reduce using rule 48
	'else'         reduce using rule 48
	'false'        reduce using rule 48
	'fix'          reduce using rule 48
	'head'         reduce using rule 48
	'in'           reduce using rule 48
	'isempty'      reduce using rule 48
	'iszero'       reduce using rule 48
	'pred'         reduce using rule 48
	'succ'         reduce using rule 48
	'tail'         reduce using rule 48
	'then'         reduce using rule 48
	'true'         reduce using rule 48
	'{'            reduce using rule 48
	'}'            reduce using rule 48
	L_Ident        reduce using rule 48
	L_integ        reduce using rule 48
	%eof           reduce using rule 48


State 124

	Binding -> Ident '=' Expr .                         (rule 33)

	','            reduce using rule 33
	'}'            reduce using rule 33
	%eof           reduce using rule 33


State 125

	ListBinding -> Binding ',' ListBinding .            (rule 36)

	'}'            reduce using rule 36
	%eof           reduce using rule 36


State 126

	ListMatchCase -> MatchCase ';' ListMatchCase .      (rule 32)

	'}'            reduce using rule 32
	%eof           reduce using rule 32


State 127

	MatchCase -> '<' Ident '>' . '=>' Expr              (rule 29)

	'=>'           shift, and enter state 129


State 128

	ListExpr -> Expr ';' ListExpr .                     (rule 20)

	']'            reduce using rule 20
	%eof           reduce using rule 20


State 129

	MatchCase -> '<' Ident '>' '=>' . Expr              (rule 29)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fun'          shift, and enter state 31
	'head'         shift, and enter state 32
	'if'           shift, and enter state 33
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'let'          shift, and enter state 36
	'match'        shift, and enter state 37
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	'{'            shift, and enter state 42
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr           goto state 139
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 130

	Expr -> 'match' Expr1 '{' ListMatchCase . '}'       (rule 26)

	'}'            shift, and enter state 138


State 131

	Expr -> 'let' Expr 'in' Expr .                      (rule 22)

	')'            reduce using rule 22
	','            reduce using rule 22
	':'            reduce using rule 22
	';'            reduce using rule 22
	'>'            reduce using rule 22
	']'            reduce using rule 22
	'else'         reduce using rule 22
	'in'           reduce using rule 22
	'then'         reduce using rule 22
	'}'            reduce using rule 22
	%eof           reduce using rule 22


State 132

	Expr -> 'if' Expr 'then' Expr . 'else' Expr         (rule 21)

	'else'         shift, and enter state 137


State 133

	Expr -> 'fun' '(' Type ')' . '{' 'return' Expr '}'    (rule 23)

	'{'            shift, and enter state 136


State 134

	Expr -> '<' Ident '=' Expr . '>'                    (rule 25)

	'>'            shift, and enter state 135


State 135

	Expr -> '<' Ident '=' Expr '>' .                    (rule 25)

	')'            reduce using rule 25
	','            reduce using rule 25
	':'            reduce using rule 25
	';'            reduce using rule 25
	'>'            reduce using rule 25
	']'            reduce using rule 25
	'else'         reduce using rule 25
	'in'           reduce using rule 25
	'then'         reduce using rule 25
	'}'            reduce using rule 25
	%eof           reduce using rule 25


State 136

	Expr -> 'fun' '(' Type ')' '{' . 'return' Expr '}'    (rule 23)

	'return'       shift, and enter state 141


State 137

	Expr -> 'if' Expr 'then' Expr 'else' . Expr         (rule 21)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fun'          shift, and enter state 31
	'head'         shift, and enter state 32
	'if'           shift, and enter state 33
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'let'          shift, and enter state 36
	'match'        shift, and enter state 37
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	'{'            shift, and enter state 42
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr           goto state 140
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 138

	Expr -> 'match' Expr1 '{' ListMatchCase '}' .       (rule 26)

	')'            reduce using rule 26
	','            reduce using rule 26
	':'            reduce using rule 26
	';'            reduce using rule 26
	'>'            reduce using rule 26
	']'            reduce using rule 26
	'else'         reduce using rule 26
	'in'           reduce using rule 26
	'then'         reduce using rule 26
	'}'            reduce using rule 26
	%eof           reduce using rule 26


State 139

	MatchCase -> '<' Ident '>' '=>' Expr .              (rule 29)

	';'            reduce using rule 29
	'}'            reduce using rule 29
	%eof           reduce using rule 29


State 140

	Expr -> 'if' Expr 'then' Expr 'else' Expr .         (rule 21)

	')'            reduce using rule 21
	','            reduce using rule 21
	':'            reduce using rule 21
	';'            reduce using rule 21
	'>'            reduce using rule 21
	']'            reduce using rule 21
	'else'         reduce using rule 21
	'in'           reduce using rule 21
	'then'         reduce using rule 21
	'}'            reduce using rule 21
	%eof           reduce using rule 21


State 141

	Expr -> 'fun' '(' Type ')' '{' 'return' . Expr '}'    (rule 23)

	'('            shift, and enter state 24
	'0'            shift, and enter state 25
	'<'            shift, and enter state 26
	'['            shift, and enter state 27
	'cons'         shift, and enter state 28
	'false'        shift, and enter state 29
	'fix'          shift, and enter state 30
	'fun'          shift, and enter state 31
	'head'         shift, and enter state 32
	'if'           shift, and enter state 33
	'isempty'      shift, and enter state 34
	'iszero'       shift, and enter state 35
	'let'          shift, and enter state 36
	'match'        shift, and enter state 37
	'pred'         shift, and enter state 38
	'succ'         shift, and enter state 39
	'tail'         shift, and enter state 40
	'true'         shift, and enter state 41
	'{'            shift, and enter state 42
	L_Ident        shift, and enter state 16
	L_integ        shift, and enter state 43

	Ident          goto state 17
	Integer        goto state 18
	Expr           goto state 142
	Expr1          goto state 20
	Expr2          goto state 21
	Expr3          goto state 22

State 142

	Expr -> 'fun' '(' Type ')' '{' 'return' Expr . '}'    (rule 23)

	'}'            shift, and enter state 143


State 143

	Expr -> 'fun' '(' Type ')' '{' 'return' Expr '}' .    (rule 23)

	')'            reduce using rule 23
	','            reduce using rule 23
	':'            reduce using rule 23
	';'            reduce using rule 23
	'>'            reduce using rule 23
	']'            reduce using rule 23
	'else'         reduce using rule 23
	'in'           reduce using rule 23
	'then'         reduce using rule 23
	'}'            reduce using rule 23
	%eof           reduce using rule 23


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 70
Number of terminals: 40
Number of non-terminals: 32
Number of states: 144
