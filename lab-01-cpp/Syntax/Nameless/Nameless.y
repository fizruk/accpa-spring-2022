/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.4). */

/* Parser definition to be used with Bison. */

/* Generate header file for lexer. */
%defines "Bison.H"
%name-prefix = "Nameless"
  /* From Bison 2.6: %define api.prefix {Nameless} */

/* Reentrant parser */
%pure_parser
  /* From Bison 2.3b (2008): %define api.pure full */
%lex-param   { yyscan_t scanner }
%parse-param { yyscan_t scanner }

/* Turn on line/column tracking in the Namelesslloc structure: */
%locations

/* Argument to the parser to be filled with the parsed tree. */
%parse-param { YYSTYPE *result }

%{
/* Begin C preamble code */

#include <algorithm> /* for std::reverse */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Absyn.H"

#define YYMAXDEPTH 10000000

/* The type yyscan_t is defined by flex, but we need it in the parser already. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

typedef struct yy_buffer_state *YY_BUFFER_STATE;
extern YY_BUFFER_STATE Nameless_scan_string(const char *str, yyscan_t scanner);
extern void Nameless_delete_buffer(YY_BUFFER_STATE buf, yyscan_t scanner);

extern void Namelesslex_destroy(yyscan_t scanner);
extern char* Namelessget_text(yyscan_t scanner);

extern yyscan_t Nameless_initialize_lexer(FILE * inp);

/* End C preamble code */
%}

%union
{
  int    _int;
  char   _char;
  double _double;
  char*  _string;
  Nameless::Expr* expr_;
}

%{
void yyerror(YYLTYPE *loc, yyscan_t scanner, YYSTYPE *result, const char *msg)
{
  fprintf(stderr, "error: %d,%d: %s at %s\n",
    loc->first_line, loc->first_column, msg, Namelessget_text(scanner));
}

int yyparse(yyscan_t scanner, YYSTYPE *result);

extern int yylex(YYSTYPE *lvalp, YYLTYPE *llocp, yyscan_t scanner);
%}

%token          _ERROR_
%token          _LPAREN     /* ( */
%token          _RPAREN     /* ) */
%token          _SYMB_0     /* 0 */
%token          _LBRACK     /* [ */
%token          _RBRACK     /* ] */
%token          _KW_else    /* else */
%token          _KW_false   /* false */
%token          _KW_fun     /* fun */
%token          _KW_if      /* if */
%token          _KW_iszero  /* iszero */
%token          _KW_pred    /* pred */
%token          _KW_return  /* return */
%token          _KW_succ    /* succ */
%token          _KW_then    /* then */
%token          _KW_true    /* true */
%token          _LBRACE     /* { */
%token          _RBRACE     /* } */
%token<_int>    _INTEGER_
%token<_string> _IDENT_

%type <expr_> Expr

%start Expr

%%

Expr : _KW_true { $$ = new Nameless::ConstTrue(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->expr_ = $$; }
  | _KW_false { $$ = new Nameless::ConstFalse(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->expr_ = $$; }
  | _KW_if Expr _KW_then Expr _KW_else Expr { $$ = new Nameless::If($2, $4, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->expr_ = $$; }
  | _SYMB_0 { $$ = new Nameless::ConstZero(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->expr_ = $$; }
  | _KW_succ Expr { $$ = new Nameless::Succ($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->expr_ = $$; }
  | _KW_pred Expr { $$ = new Nameless::Pred($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->expr_ = $$; }
  | _KW_iszero Expr { $$ = new Nameless::IsZero($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->expr_ = $$; }
  | _IDENT_ { $$ = new Nameless::FreeVar($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->expr_ = $$; }
  | _LBRACK _INTEGER_ _RBRACK { $$ = new Nameless::BoundVar($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->expr_ = $$; }
  | _KW_fun _LBRACE _KW_return Expr _RBRACE { $$ = new Nameless::Abstraction($4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->expr_ = $$; }
  | Expr Expr { $$ = new Nameless::Application($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->expr_ = $$; }
  | _LPAREN Expr _RPAREN { $$ = $2; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->expr_ = $$; }
;

%%

namespace Nameless
{
/* Entrypoint: parse Expr* from file. */
Expr* pExpr(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = Nameless_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  Namelesslex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.expr_;
  }
}

/* Entrypoint: parse Expr* from string. */
Expr* psExpr(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = Nameless_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = Nameless_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  Nameless_delete_buffer(buf, scanner);
  Namelesslex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.expr_;
  }
}


}
