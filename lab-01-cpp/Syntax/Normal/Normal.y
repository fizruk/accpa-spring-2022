/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <algorithm>
#include "ParserError.H"
#include "Absyn.H"

#define YYMAXDEPTH 10000000

typedef struct yy_buffer_state *YY_BUFFER_STATE;
int yyparse(void);
int yylex(void);
YY_BUFFER_STATE yy_scan_string(const char *str);
void yy_delete_buffer(YY_BUFFER_STATE buf);
int yy_mylinenumber;
void initialize_lexer(FILE * inp);
int yywrap(void)
{
  return 1;
}
void yyerror(const char *str)
{
  throw ::parse_error(yy_mylinenumber,str);
}



static Program* YY_RESULT_Program_ = 0;
static ListExpr* YY_RESULT_ListExpr_ = 0;
static Expr* YY_RESULT_Expr_ = 0;

Program* pProgram(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Program_;
  }
}
Program* pProgram(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Program_;
  }
}

ListExpr* pListExpr(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(YY_RESULT_ListExpr_->begin(), YY_RESULT_ListExpr_->end());
    return YY_RESULT_ListExpr_;
  }
}
ListExpr* pListExpr(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(YY_RESULT_ListExpr_->begin(), YY_RESULT_ListExpr_->end());
    return YY_RESULT_ListExpr_;
  }
}

Expr* pExpr(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}
Expr* pExpr(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}



%}

%union
{
  int    _int;
  char   _char;
  double _double;
  char*  _string;
  Program* program_;
  ListExpr* listexpr_;
  Expr* expr_;
}

%token _ERROR_
%token _SYMB_2    //   (
%token _SYMB_3    //   )
%token _SYMB_1    //   0
%token _SYMB_0    //   ;
%token _SYMB_6    //   else
%token _SYMB_7    //   false
%token _SYMB_8    //   fun
%token _SYMB_9    //   if
%token _SYMB_10    //   iszero
%token _SYMB_11    //   pred
%token _SYMB_12    //   return
%token _SYMB_13    //   succ
%token _SYMB_14    //   then
%token _SYMB_15    //   true
%token _SYMB_4    //   {
%token _SYMB_5    //   }

%type <program_> Program
%type <listexpr_> ListExpr
%type <expr_> Expr

%start Program
%token<_string> _IDENT_

%%
Program : ListExpr {  std::reverse($1->begin(),$1->end()) ;$$ = new ProgramExprs($1); YY_RESULT_Program_= $$; }
;
ListExpr : /* empty */ {  $$ = new ListExpr(); YY_RESULT_ListExpr_= $$; }
  | Expr {  $$ = new ListExpr() ; $$->push_back($1); YY_RESULT_ListExpr_= $$; }
  | Expr _SYMB_0 ListExpr {  $3->push_back($1) ; $$ = $3 ; YY_RESULT_ListExpr_= $$; }
;
Expr : _SYMB_15 {  $$ = new ConstTrue(); YY_RESULT_Expr_= $$; }
  | _SYMB_7 {  $$ = new ConstFalse(); YY_RESULT_Expr_= $$; }
  | _SYMB_9 Expr _SYMB_14 Expr _SYMB_6 Expr {  $$ = new If($2, $4, $6); YY_RESULT_Expr_= $$; }
  | _SYMB_1 {  $$ = new ConstZero(); YY_RESULT_Expr_= $$; }
  | _SYMB_13 Expr {  $$ = new Succ($2); YY_RESULT_Expr_= $$; }
  | _SYMB_11 Expr {  $$ = new Pred($2); YY_RESULT_Expr_= $$; }
  | _SYMB_10 Expr {  $$ = new IsZero($2); YY_RESULT_Expr_= $$; }
  | _IDENT_ {  $$ = new Var($1); YY_RESULT_Expr_= $$; }
  | _SYMB_8 _SYMB_2 _IDENT_ _SYMB_3 _SYMB_4 _SYMB_12 Expr _SYMB_5 {  $$ = new Abstraction($3, $7); YY_RESULT_Expr_= $$; }
  | Expr Expr {  $$ = new Application($1, $2); YY_RESULT_Expr_= $$; }
  | _SYMB_2 Expr _SYMB_3 {  $$ = $2; YY_RESULT_Expr_= $$; }
;

