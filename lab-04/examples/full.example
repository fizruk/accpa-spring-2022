fun (x : { a : Nat, b : Bool }) {
  return
    let y = { a = x.b, b = x }
    in { z = y }
} ;

// Type Error: x is expected to have field c
fun (x : { a : Nat, b : Bool }) {
  return
    let y = { a = x.c, b = x } in
    { z = y }
} ;

// Type Error: x.b is not a record
fun (x : { a : Nat, b : Bool }) {
  return
    let y = { a = x.b.a, b = x } in
    { z = y }
} ;

// Type Error: x.b is expected to be Nat, not Bool
fun (x : { a : Nat, b : Bool }) {
  return
    let f = fun (x : Nat) { return iszero x } in
    let y = { a = f x.b, b = x } in
    { z = y }
} ;

fun (f : ([Nat]) -> Bool) {
  return f 0
}
;

fix (fun (length : ([Nat]) -> Nat) {
  return fun(list : [Nat]) {
    return
      if isempty list
        then 0
        else succ (length (tail list))
  }
}
) ;

// length of a list
(fix (fun (length : ([Nat]) -> Nat) {
  return fun(list : [Nat]) {
    return
      if isempty list
        then 0
        else succ (length (tail list))
  }
}
)) ([ 0; succ 0; 0; 0 ] as [Nat]) ;

// addition, multiplication, factorial
(fix (fun (this : {
  add : Nat -> Nat -> Nat,
  mult : Nat -> Nat -> Nat,
  factorial : Nat -> Nat
}) {
  return {
    add = fun (n : Nat) {
      return fun (m : Nat) {
        return if iszero n then m else succ (this.add (pred n) m)
      }
    },
    mult = fun (n : Nat) {
      return fun (m : Nat) {
        return if iszero n then 0 else this.add m (this.mult (pred n) m)
      }
    },
    factorial = fun (n : Nat) {
      return if iszero n then succ 0 else this.mult n (this.factorial (pred n))
    }
  }
})).factorial (succ (succ (succ 0))) ;

// parity check with variant types
match
(fix (fun (this : {
  parity : Nat -> < odd : Nat, even : Nat >,
  helper : ({ original : Nat, current : Nat }) -> < odd : Nat, even : Nat >
}) {
  return {
    parity = fun (n : Nat) { return this.helper ({ original = n, current = n }) },
    helper = fun (s : { original : Nat, current : Nat }) {
      return
        if iszero s.current
          then < even = s.original > as < odd : Nat, even : Nat >
          else if iszero (pred s.current)
            then < odd = s.original > as < odd : Nat, even : Nat >
            else this.helper ({ original = s.original, current = pred (pred (s.current)) })
  }
}})).parity (succ (succ (succ 0))) {
  <even = x> => x ;
  <odd  = x> => succ x ;
}
