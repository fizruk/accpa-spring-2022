-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Syntax/Normal/Par.y
-----------------------------------------------------------------------------

state 28 contains 10 shift/reduce conflicts.
state 30 contains 10 shift/reduce conflicts.
state 31 contains 10 shift/reduce conflicts.
state 32 contains 10 shift/reduce conflicts.
state 48 contains 10 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pListExpr -> ListExpr                       (1)
	%start_pExpr -> Expr                               (2)
	%start_pType -> Type                               (3)
	%start_pType1 -> Type1                             (4)
	Ident -> L_Ident                                   (5)
	Program -> ListExpr                                (6)
	ListExpr ->                                        (7)
	ListExpr -> Expr                                   (8)
	ListExpr -> Expr ';' ListExpr                      (9)
	Expr -> 'true'                                     (10)
	Expr -> 'false'                                    (11)
	Expr -> 'if' Expr 'then' Expr 'else' Expr          (12)
	Expr -> '0'                                        (13)
	Expr -> 'succ' Expr                                (14)
	Expr -> 'pred' Expr                                (15)
	Expr -> 'iszero' Expr                              (16)
	Expr -> Ident                                      (17)
	Expr -> 'fun' '(' Ident ':' Type ')' '{' 'return' Expr '}'   (18)
	Expr -> Expr Expr                                  (19)
	Expr -> '(' Expr ')'                               (20)
	Type -> Type1 '->' Type                            (21)
	Type -> Type1                                      (22)
	Type1 -> 'Bool'                                    (23)
	Type1 -> 'Nat'                                     (24)
	Type1 -> '(' Type ')'                              (25)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'->'           { PT _ (TS _ 3) }
	'0'            { PT _ (TS _ 4) }
	':'            { PT _ (TS _ 5) }
	';'            { PT _ (TS _ 6) }
	'Bool'         { PT _ (TS _ 7) }
	'Nat'          { PT _ (TS _ 8) }
	'else'         { PT _ (TS _ 9) }
	'false'        { PT _ (TS _ 10) }
	'fun'          { PT _ (TS _ 11) }
	'if'           { PT _ (TS _ 12) }
	'iszero'       { PT _ (TS _ 13) }
	'pred'         { PT _ (TS _ 14) }
	'return'       { PT _ (TS _ 15) }
	'succ'         { PT _ (TS _ 16) }
	'then'         { PT _ (TS _ 17) }
	'true'         { PT _ (TS _ 18) }
	'{'            { PT _ (TS _ 19) }
	'}'            { PT _ (TS _ 20) }
	L_Ident        { PT _ (TV $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pListExpr rule  1
	%start_pExpr    rule  2
	%start_pType    rule  3
	%start_pType1   rule  4
	Ident           rule  5
	Program         rule  6
	ListExpr        rules 7, 8, 9
	Expr            rules 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
	Type            rules 21, 22
	Type1           rules 23, 24, 25

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'('            shift, and enter state 15
	'0'            shift, and enter state 16
	'false'        shift, and enter state 17
	'fun'          shift, and enter state 18
	'if'           shift, and enter state 19
	'iszero'       shift, and enter state 20
	'pred'         shift, and enter state 21
	'succ'         shift, and enter state 22
	'true'         shift, and enter state 23
	L_Ident        shift, and enter state 6
	%eof           reduce using rule 7

	Ident          goto state 13
	Program        goto state 26
	ListExpr       goto state 27
	Expr           goto state 25

State 1

	%start_pListExpr -> . ListExpr                      (rule 1)

	'('            shift, and enter state 15
	'0'            shift, and enter state 16
	'false'        shift, and enter state 17
	'fun'          shift, and enter state 18
	'if'           shift, and enter state 19
	'iszero'       shift, and enter state 20
	'pred'         shift, and enter state 21
	'succ'         shift, and enter state 22
	'true'         shift, and enter state 23
	L_Ident        shift, and enter state 6
	%eof           reduce using rule 7

	Ident          goto state 13
	ListExpr       goto state 24
	Expr           goto state 25

State 2

	%start_pExpr -> . Expr                              (rule 2)

	'('            shift, and enter state 15
	'0'            shift, and enter state 16
	'false'        shift, and enter state 17
	'fun'          shift, and enter state 18
	'if'           shift, and enter state 19
	'iszero'       shift, and enter state 20
	'pred'         shift, and enter state 21
	'succ'         shift, and enter state 22
	'true'         shift, and enter state 23
	L_Ident        shift, and enter state 6

	Ident          goto state 13
	Expr           goto state 14

State 3

	%start_pType -> . Type                              (rule 3)

	'('            shift, and enter state 8
	'Bool'         shift, and enter state 9
	'Nat'          shift, and enter state 10

	Type           goto state 11
	Type1          goto state 12

State 4

	%start_pType1 -> . Type1                            (rule 4)

	'('            shift, and enter state 8
	'Bool'         shift, and enter state 9
	'Nat'          shift, and enter state 10

	Type1          goto state 7

State 5

	Ident -> . L_Ident                                  (rule 5)

	L_Ident        shift, and enter state 6


State 6

	Ident -> L_Ident .                                  (rule 5)

	'('            reduce using rule 5
	')'            reduce using rule 5
	'0'            reduce using rule 5
	':'            reduce using rule 5
	';'            reduce using rule 5
	'else'         reduce using rule 5
	'false'        reduce using rule 5
	'fun'          reduce using rule 5
	'if'           reduce using rule 5
	'iszero'       reduce using rule 5
	'pred'         reduce using rule 5
	'succ'         reduce using rule 5
	'then'         reduce using rule 5
	'true'         reduce using rule 5
	'}'            reduce using rule 5
	L_Ident        reduce using rule 5
	%eof           reduce using rule 5


State 7

	%start_pType1 -> Type1 .                            (rule 4)

	%eof           accept


State 8

	Type1 -> '(' . Type ')'                             (rule 25)

	'('            shift, and enter state 8
	'Bool'         shift, and enter state 9
	'Nat'          shift, and enter state 10

	Type           goto state 37
	Type1          goto state 12

State 9

	Type1 -> 'Bool' .                                   (rule 23)

	')'            reduce using rule 23
	'->'           reduce using rule 23
	%eof           reduce using rule 23


State 10

	Type1 -> 'Nat' .                                    (rule 24)

	')'            reduce using rule 24
	'->'           reduce using rule 24
	%eof           reduce using rule 24


State 11

	%start_pType -> Type .                              (rule 3)

	%eof           accept


State 12

	Type -> Type1 . '->' Type                           (rule 21)
	Type -> Type1 .                                     (rule 22)

	')'            reduce using rule 22
	'->'           shift, and enter state 36
	%eof           reduce using rule 22


State 13

	Expr -> Ident .                                     (rule 17)

	'('            reduce using rule 17
	')'            reduce using rule 17
	'0'            reduce using rule 17
	';'            reduce using rule 17
	'else'         reduce using rule 17
	'false'        reduce using rule 17
	'fun'          reduce using rule 17
	'if'           reduce using rule 17
	'iszero'       reduce using rule 17
	'pred'         reduce using rule 17
	'succ'         reduce using rule 17
	'then'         reduce using rule 17
	'true'         reduce using rule 17
	'}'            reduce using rule 17
	L_Ident        reduce using rule 17
	%eof           reduce using rule 17


State 14

	%start_pExpr -> Expr .                              (rule 2)
	Expr -> Expr . Expr                                 (rule 19)

	'('            shift, and enter state 15
	'0'            shift, and enter state 16
	'false'        shift, and enter state 17
	'fun'          shift, and enter state 18
	'if'           shift, and enter state 19
	'iszero'       shift, and enter state 20
	'pred'         shift, and enter state 21
	'succ'         shift, and enter state 22
	'true'         shift, and enter state 23
	L_Ident        shift, and enter state 6
	%eof           accept

	Ident          goto state 13
	Expr           goto state 28

State 15

	Expr -> '(' . Expr ')'                              (rule 20)

	'('            shift, and enter state 15
	'0'            shift, and enter state 16
	'false'        shift, and enter state 17
	'fun'          shift, and enter state 18
	'if'           shift, and enter state 19
	'iszero'       shift, and enter state 20
	'pred'         shift, and enter state 21
	'succ'         shift, and enter state 22
	'true'         shift, and enter state 23
	L_Ident        shift, and enter state 6

	Ident          goto state 13
	Expr           goto state 35

State 16

	Expr -> '0' .                                       (rule 13)

	'('            reduce using rule 13
	')'            reduce using rule 13
	'0'            reduce using rule 13
	';'            reduce using rule 13
	'else'         reduce using rule 13
	'false'        reduce using rule 13
	'fun'          reduce using rule 13
	'if'           reduce using rule 13
	'iszero'       reduce using rule 13
	'pred'         reduce using rule 13
	'succ'         reduce using rule 13
	'then'         reduce using rule 13
	'true'         reduce using rule 13
	'}'            reduce using rule 13
	L_Ident        reduce using rule 13
	%eof           reduce using rule 13


State 17

	Expr -> 'false' .                                   (rule 11)

	'('            reduce using rule 11
	')'            reduce using rule 11
	'0'            reduce using rule 11
	';'            reduce using rule 11
	'else'         reduce using rule 11
	'false'        reduce using rule 11
	'fun'          reduce using rule 11
	'if'           reduce using rule 11
	'iszero'       reduce using rule 11
	'pred'         reduce using rule 11
	'succ'         reduce using rule 11
	'then'         reduce using rule 11
	'true'         reduce using rule 11
	'}'            reduce using rule 11
	L_Ident        reduce using rule 11
	%eof           reduce using rule 11


State 18

	Expr -> 'fun' . '(' Ident ':' Type ')' '{' 'return' Expr '}'    (rule 18)

	'('            shift, and enter state 34


State 19

	Expr -> 'if' . Expr 'then' Expr 'else' Expr         (rule 12)

	'('            shift, and enter state 15
	'0'            shift, and enter state 16
	'false'        shift, and enter state 17
	'fun'          shift, and enter state 18
	'if'           shift, and enter state 19
	'iszero'       shift, and enter state 20
	'pred'         shift, and enter state 21
	'succ'         shift, and enter state 22
	'true'         shift, and enter state 23
	L_Ident        shift, and enter state 6

	Ident          goto state 13
	Expr           goto state 33

State 20

	Expr -> 'iszero' . Expr                             (rule 16)

	'('            shift, and enter state 15
	'0'            shift, and enter state 16
	'false'        shift, and enter state 17
	'fun'          shift, and enter state 18
	'if'           shift, and enter state 19
	'iszero'       shift, and enter state 20
	'pred'         shift, and enter state 21
	'succ'         shift, and enter state 22
	'true'         shift, and enter state 23
	L_Ident        shift, and enter state 6

	Ident          goto state 13
	Expr           goto state 32

State 21

	Expr -> 'pred' . Expr                               (rule 15)

	'('            shift, and enter state 15
	'0'            shift, and enter state 16
	'false'        shift, and enter state 17
	'fun'          shift, and enter state 18
	'if'           shift, and enter state 19
	'iszero'       shift, and enter state 20
	'pred'         shift, and enter state 21
	'succ'         shift, and enter state 22
	'true'         shift, and enter state 23
	L_Ident        shift, and enter state 6

	Ident          goto state 13
	Expr           goto state 31

State 22

	Expr -> 'succ' . Expr                               (rule 14)

	'('            shift, and enter state 15
	'0'            shift, and enter state 16
	'false'        shift, and enter state 17
	'fun'          shift, and enter state 18
	'if'           shift, and enter state 19
	'iszero'       shift, and enter state 20
	'pred'         shift, and enter state 21
	'succ'         shift, and enter state 22
	'true'         shift, and enter state 23
	L_Ident        shift, and enter state 6

	Ident          goto state 13
	Expr           goto state 30

State 23

	Expr -> 'true' .                                    (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10
	'0'            reduce using rule 10
	';'            reduce using rule 10
	'else'         reduce using rule 10
	'false'        reduce using rule 10
	'fun'          reduce using rule 10
	'if'           reduce using rule 10
	'iszero'       reduce using rule 10
	'pred'         reduce using rule 10
	'succ'         reduce using rule 10
	'then'         reduce using rule 10
	'true'         reduce using rule 10
	'}'            reduce using rule 10
	L_Ident        reduce using rule 10
	%eof           reduce using rule 10


State 24

	%start_pListExpr -> ListExpr .                      (rule 1)

	%eof           accept


State 25

	ListExpr -> Expr .                                  (rule 8)
	ListExpr -> Expr . ';' ListExpr                     (rule 9)
	Expr -> Expr . Expr                                 (rule 19)

	'('            shift, and enter state 15
	'0'            shift, and enter state 16
	';'            shift, and enter state 29
	'false'        shift, and enter state 17
	'fun'          shift, and enter state 18
	'if'           shift, and enter state 19
	'iszero'       shift, and enter state 20
	'pred'         shift, and enter state 21
	'succ'         shift, and enter state 22
	'true'         shift, and enter state 23
	L_Ident        shift, and enter state 6
	%eof           reduce using rule 8

	Ident          goto state 13
	Expr           goto state 28

State 26

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 27

	Program -> ListExpr .                               (rule 6)

	%eof           reduce using rule 6


State 28

	Expr -> Expr . Expr                                 (rule 19)
	Expr -> Expr Expr .                                 (rule 19)

	'('            shift, and enter state 15
			(reduce using rule 19)

	')'            reduce using rule 19
	'0'            shift, and enter state 16
			(reduce using rule 19)

	';'            reduce using rule 19
	'else'         reduce using rule 19
	'false'        shift, and enter state 17
			(reduce using rule 19)

	'fun'          shift, and enter state 18
			(reduce using rule 19)

	'if'           shift, and enter state 19
			(reduce using rule 19)

	'iszero'       shift, and enter state 20
			(reduce using rule 19)

	'pred'         shift, and enter state 21
			(reduce using rule 19)

	'succ'         shift, and enter state 22
			(reduce using rule 19)

	'then'         reduce using rule 19
	'true'         shift, and enter state 23
			(reduce using rule 19)

	'}'            reduce using rule 19
	L_Ident        shift, and enter state 6
			(reduce using rule 19)

	%eof           reduce using rule 19

	Ident          goto state 13
	Expr           goto state 28

State 29

	ListExpr -> Expr ';' . ListExpr                     (rule 9)

	'('            shift, and enter state 15
	'0'            shift, and enter state 16
	'false'        shift, and enter state 17
	'fun'          shift, and enter state 18
	'if'           shift, and enter state 19
	'iszero'       shift, and enter state 20
	'pred'         shift, and enter state 21
	'succ'         shift, and enter state 22
	'true'         shift, and enter state 23
	L_Ident        shift, and enter state 6
	%eof           reduce using rule 7

	Ident          goto state 13
	ListExpr       goto state 43
	Expr           goto state 25

State 30

	Expr -> 'succ' Expr .                               (rule 14)
	Expr -> Expr . Expr                                 (rule 19)

	'('            shift, and enter state 15
			(reduce using rule 14)

	')'            reduce using rule 14
	'0'            shift, and enter state 16
			(reduce using rule 14)

	';'            reduce using rule 14
	'else'         reduce using rule 14
	'false'        shift, and enter state 17
			(reduce using rule 14)

	'fun'          shift, and enter state 18
			(reduce using rule 14)

	'if'           shift, and enter state 19
			(reduce using rule 14)

	'iszero'       shift, and enter state 20
			(reduce using rule 14)

	'pred'         shift, and enter state 21
			(reduce using rule 14)

	'succ'         shift, and enter state 22
			(reduce using rule 14)

	'then'         reduce using rule 14
	'true'         shift, and enter state 23
			(reduce using rule 14)

	'}'            reduce using rule 14
	L_Ident        shift, and enter state 6
			(reduce using rule 14)

	%eof           reduce using rule 14

	Ident          goto state 13
	Expr           goto state 28

State 31

	Expr -> 'pred' Expr .                               (rule 15)
	Expr -> Expr . Expr                                 (rule 19)

	'('            shift, and enter state 15
			(reduce using rule 15)

	')'            reduce using rule 15
	'0'            shift, and enter state 16
			(reduce using rule 15)

	';'            reduce using rule 15
	'else'         reduce using rule 15
	'false'        shift, and enter state 17
			(reduce using rule 15)

	'fun'          shift, and enter state 18
			(reduce using rule 15)

	'if'           shift, and enter state 19
			(reduce using rule 15)

	'iszero'       shift, and enter state 20
			(reduce using rule 15)

	'pred'         shift, and enter state 21
			(reduce using rule 15)

	'succ'         shift, and enter state 22
			(reduce using rule 15)

	'then'         reduce using rule 15
	'true'         shift, and enter state 23
			(reduce using rule 15)

	'}'            reduce using rule 15
	L_Ident        shift, and enter state 6
			(reduce using rule 15)

	%eof           reduce using rule 15

	Ident          goto state 13
	Expr           goto state 28

State 32

	Expr -> 'iszero' Expr .                             (rule 16)
	Expr -> Expr . Expr                                 (rule 19)

	'('            shift, and enter state 15
			(reduce using rule 16)

	')'            reduce using rule 16
	'0'            shift, and enter state 16
			(reduce using rule 16)

	';'            reduce using rule 16
	'else'         reduce using rule 16
	'false'        shift, and enter state 17
			(reduce using rule 16)

	'fun'          shift, and enter state 18
			(reduce using rule 16)

	'if'           shift, and enter state 19
			(reduce using rule 16)

	'iszero'       shift, and enter state 20
			(reduce using rule 16)

	'pred'         shift, and enter state 21
			(reduce using rule 16)

	'succ'         shift, and enter state 22
			(reduce using rule 16)

	'then'         reduce using rule 16
	'true'         shift, and enter state 23
			(reduce using rule 16)

	'}'            reduce using rule 16
	L_Ident        shift, and enter state 6
			(reduce using rule 16)

	%eof           reduce using rule 16

	Ident          goto state 13
	Expr           goto state 28

State 33

	Expr -> 'if' Expr . 'then' Expr 'else' Expr         (rule 12)
	Expr -> Expr . Expr                                 (rule 19)

	'('            shift, and enter state 15
	'0'            shift, and enter state 16
	'false'        shift, and enter state 17
	'fun'          shift, and enter state 18
	'if'           shift, and enter state 19
	'iszero'       shift, and enter state 20
	'pred'         shift, and enter state 21
	'succ'         shift, and enter state 22
	'then'         shift, and enter state 42
	'true'         shift, and enter state 23
	L_Ident        shift, and enter state 6

	Ident          goto state 13
	Expr           goto state 28

State 34

	Expr -> 'fun' '(' . Ident ':' Type ')' '{' 'return' Expr '}'    (rule 18)

	L_Ident        shift, and enter state 6

	Ident          goto state 41

State 35

	Expr -> Expr . Expr                                 (rule 19)
	Expr -> '(' Expr . ')'                              (rule 20)

	'('            shift, and enter state 15
	')'            shift, and enter state 40
	'0'            shift, and enter state 16
	'false'        shift, and enter state 17
	'fun'          shift, and enter state 18
	'if'           shift, and enter state 19
	'iszero'       shift, and enter state 20
	'pred'         shift, and enter state 21
	'succ'         shift, and enter state 22
	'true'         shift, and enter state 23
	L_Ident        shift, and enter state 6

	Ident          goto state 13
	Expr           goto state 28

State 36

	Type -> Type1 '->' . Type                           (rule 21)

	'('            shift, and enter state 8
	'Bool'         shift, and enter state 9
	'Nat'          shift, and enter state 10

	Type           goto state 39
	Type1          goto state 12

State 37

	Type1 -> '(' Type . ')'                             (rule 25)

	')'            shift, and enter state 38


State 38

	Type1 -> '(' Type ')' .                             (rule 25)

	')'            reduce using rule 25
	'->'           reduce using rule 25
	%eof           reduce using rule 25


State 39

	Type -> Type1 '->' Type .                           (rule 21)

	')'            reduce using rule 21
	%eof           reduce using rule 21


State 40

	Expr -> '(' Expr ')' .                              (rule 20)

	'('            reduce using rule 20
	')'            reduce using rule 20
	'0'            reduce using rule 20
	';'            reduce using rule 20
	'else'         reduce using rule 20
	'false'        reduce using rule 20
	'fun'          reduce using rule 20
	'if'           reduce using rule 20
	'iszero'       reduce using rule 20
	'pred'         reduce using rule 20
	'succ'         reduce using rule 20
	'then'         reduce using rule 20
	'true'         reduce using rule 20
	'}'            reduce using rule 20
	L_Ident        reduce using rule 20
	%eof           reduce using rule 20


State 41

	Expr -> 'fun' '(' Ident . ':' Type ')' '{' 'return' Expr '}'    (rule 18)

	':'            shift, and enter state 45


State 42

	Expr -> 'if' Expr 'then' . Expr 'else' Expr         (rule 12)

	'('            shift, and enter state 15
	'0'            shift, and enter state 16
	'false'        shift, and enter state 17
	'fun'          shift, and enter state 18
	'if'           shift, and enter state 19
	'iszero'       shift, and enter state 20
	'pred'         shift, and enter state 21
	'succ'         shift, and enter state 22
	'true'         shift, and enter state 23
	L_Ident        shift, and enter state 6

	Ident          goto state 13
	Expr           goto state 44

State 43

	ListExpr -> Expr ';' ListExpr .                     (rule 9)

	%eof           reduce using rule 9


State 44

	Expr -> 'if' Expr 'then' Expr . 'else' Expr         (rule 12)
	Expr -> Expr . Expr                                 (rule 19)

	'('            shift, and enter state 15
	'0'            shift, and enter state 16
	'else'         shift, and enter state 47
	'false'        shift, and enter state 17
	'fun'          shift, and enter state 18
	'if'           shift, and enter state 19
	'iszero'       shift, and enter state 20
	'pred'         shift, and enter state 21
	'succ'         shift, and enter state 22
	'true'         shift, and enter state 23
	L_Ident        shift, and enter state 6

	Ident          goto state 13
	Expr           goto state 28

State 45

	Expr -> 'fun' '(' Ident ':' . Type ')' '{' 'return' Expr '}'    (rule 18)

	'('            shift, and enter state 8
	'Bool'         shift, and enter state 9
	'Nat'          shift, and enter state 10

	Type           goto state 46
	Type1          goto state 12

State 46

	Expr -> 'fun' '(' Ident ':' Type . ')' '{' 'return' Expr '}'    (rule 18)

	')'            shift, and enter state 49


State 47

	Expr -> 'if' Expr 'then' Expr 'else' . Expr         (rule 12)

	'('            shift, and enter state 15
	'0'            shift, and enter state 16
	'false'        shift, and enter state 17
	'fun'          shift, and enter state 18
	'if'           shift, and enter state 19
	'iszero'       shift, and enter state 20
	'pred'         shift, and enter state 21
	'succ'         shift, and enter state 22
	'true'         shift, and enter state 23
	L_Ident        shift, and enter state 6

	Ident          goto state 13
	Expr           goto state 48

State 48

	Expr -> 'if' Expr 'then' Expr 'else' Expr .         (rule 12)
	Expr -> Expr . Expr                                 (rule 19)

	'('            shift, and enter state 15
			(reduce using rule 12)

	')'            reduce using rule 12
	'0'            shift, and enter state 16
			(reduce using rule 12)

	';'            reduce using rule 12
	'else'         reduce using rule 12
	'false'        shift, and enter state 17
			(reduce using rule 12)

	'fun'          shift, and enter state 18
			(reduce using rule 12)

	'if'           shift, and enter state 19
			(reduce using rule 12)

	'iszero'       shift, and enter state 20
			(reduce using rule 12)

	'pred'         shift, and enter state 21
			(reduce using rule 12)

	'succ'         shift, and enter state 22
			(reduce using rule 12)

	'then'         reduce using rule 12
	'true'         shift, and enter state 23
			(reduce using rule 12)

	'}'            reduce using rule 12
	L_Ident        shift, and enter state 6
			(reduce using rule 12)

	%eof           reduce using rule 12

	Ident          goto state 13
	Expr           goto state 28

State 49

	Expr -> 'fun' '(' Ident ':' Type ')' . '{' 'return' Expr '}'    (rule 18)

	'{'            shift, and enter state 50


State 50

	Expr -> 'fun' '(' Ident ':' Type ')' '{' . 'return' Expr '}'    (rule 18)

	'return'       shift, and enter state 51


State 51

	Expr -> 'fun' '(' Ident ':' Type ')' '{' 'return' . Expr '}'    (rule 18)

	'('            shift, and enter state 15
	'0'            shift, and enter state 16
	'false'        shift, and enter state 17
	'fun'          shift, and enter state 18
	'if'           shift, and enter state 19
	'iszero'       shift, and enter state 20
	'pred'         shift, and enter state 21
	'succ'         shift, and enter state 22
	'true'         shift, and enter state 23
	L_Ident        shift, and enter state 6

	Ident          goto state 13
	Expr           goto state 52

State 52

	Expr -> 'fun' '(' Ident ':' Type ')' '{' 'return' Expr . '}'    (rule 18)
	Expr -> Expr . Expr                                 (rule 19)

	'('            shift, and enter state 15
	'0'            shift, and enter state 16
	'false'        shift, and enter state 17
	'fun'          shift, and enter state 18
	'if'           shift, and enter state 19
	'iszero'       shift, and enter state 20
	'pred'         shift, and enter state 21
	'succ'         shift, and enter state 22
	'true'         shift, and enter state 23
	'}'            shift, and enter state 53
	L_Ident        shift, and enter state 6

	Ident          goto state 13
	Expr           goto state 28

State 53

	Expr -> 'fun' '(' Ident ':' Type ')' '{' 'return' Expr '}' .    (rule 18)

	'('            reduce using rule 18
	')'            reduce using rule 18
	'0'            reduce using rule 18
	';'            reduce using rule 18
	'else'         reduce using rule 18
	'false'        reduce using rule 18
	'fun'          reduce using rule 18
	'if'           reduce using rule 18
	'iszero'       reduce using rule 18
	'pred'         reduce using rule 18
	'succ'         reduce using rule 18
	'then'         reduce using rule 18
	'true'         reduce using rule 18
	'}'            reduce using rule 18
	L_Ident        reduce using rule 18
	%eof           reduce using rule 18


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 26
Number of terminals: 21
Number of non-terminals: 11
Number of states: 54
