-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Syntax/Nameless/Par.y
-----------------------------------------------------------------------------

state 20 contains 11 shift/reduce conflicts.
state 21 contains 11 shift/reduce conflicts.
state 22 contains 11 shift/reduce conflicts.
state 28 contains 11 shift/reduce conflicts.
state 31 contains 1 shift/reduce conflicts.
state 41 contains 11 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExpr -> Expr                               (0)
	%start_pType -> Type                               (1)
	Ident -> L_Ident                                   (2)
	Integer -> L_integ                                 (3)
	Expr -> 'true'                                     (4)
	Expr -> 'false'                                    (5)
	Expr -> 'if' Expr 'then' Expr 'else' Expr          (6)
	Expr -> '0'                                        (7)
	Expr -> 'succ' Expr                                (8)
	Expr -> 'pred' Expr                                (9)
	Expr -> 'iszero' Expr                              (10)
	Expr -> Ident                                      (11)
	Expr -> '[' Integer ']'                            (12)
	Expr -> 'fun' '(' Type ')' '{' 'return' Expr '}'   (13)
	Expr -> Expr Expr                                  (14)
	Expr -> '(' Expr ')'                               (15)
	Type -> 'Bool'                                     (16)
	Type -> 'Nat'                                      (17)
	Type -> Type '->' Type                             (18)
	Type -> '(' Type ')'                               (19)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'->'           { PT _ (TS _ 3) }
	'0'            { PT _ (TS _ 4) }
	'Bool'         { PT _ (TS _ 5) }
	'Nat'          { PT _ (TS _ 6) }
	'['            { PT _ (TS _ 7) }
	']'            { PT _ (TS _ 8) }
	'else'         { PT _ (TS _ 9) }
	'false'        { PT _ (TS _ 10) }
	'fun'          { PT _ (TS _ 11) }
	'if'           { PT _ (TS _ 12) }
	'iszero'       { PT _ (TS _ 13) }
	'pred'         { PT _ (TS _ 14) }
	'return'       { PT _ (TS _ 15) }
	'succ'         { PT _ (TS _ 16) }
	'then'         { PT _ (TS _ 17) }
	'true'         { PT _ (TS _ 18) }
	'{'            { PT _ (TS _ 19) }
	'}'            { PT _ (TS _ 20) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExpr    rule  0
	%start_pType    rule  1
	Ident           rule  2
	Integer         rule  3
	Expr            rules 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Type            rules 16, 17, 18, 19

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pExpr -> . Expr                              (rule 0)

	'('            shift, and enter state 10
	'0'            shift, and enter state 11
	'['            shift, and enter state 12
	'false'        shift, and enter state 13
	'fun'          shift, and enter state 14
	'if'           shift, and enter state 15
	'iszero'       shift, and enter state 16
	'pred'         shift, and enter state 17
	'succ'         shift, and enter state 18
	'true'         shift, and enter state 19
	L_Ident        shift, and enter state 3

	Ident          goto state 8
	Expr           goto state 9

State 1

	%start_pType -> . Type                              (rule 1)

	'('            shift, and enter state 5
	'Bool'         shift, and enter state 6
	'Nat'          shift, and enter state 7

	Type           goto state 4

State 2

	Ident -> . L_Ident                                  (rule 2)

	L_Ident        shift, and enter state 3


State 3

	Ident -> L_Ident .                                  (rule 2)

	'('            reduce using rule 2
	')'            reduce using rule 2
	'0'            reduce using rule 2
	'['            reduce using rule 2
	'else'         reduce using rule 2
	'false'        reduce using rule 2
	'fun'          reduce using rule 2
	'if'           reduce using rule 2
	'iszero'       reduce using rule 2
	'pred'         reduce using rule 2
	'succ'         reduce using rule 2
	'then'         reduce using rule 2
	'true'         reduce using rule 2
	'}'            reduce using rule 2
	L_Ident        reduce using rule 2
	%eof           reduce using rule 2


State 4

	%start_pType -> Type .                              (rule 1)
	Type -> Type . '->' Type                            (rule 18)

	'->'           shift, and enter state 30
	%eof           accept


State 5

	Type -> '(' . Type ')'                              (rule 19)

	'('            shift, and enter state 5
	'Bool'         shift, and enter state 6
	'Nat'          shift, and enter state 7

	Type           goto state 29

State 6

	Type -> 'Bool' .                                    (rule 16)

	')'            reduce using rule 16
	'->'           reduce using rule 16
	%eof           reduce using rule 16


State 7

	Type -> 'Nat' .                                     (rule 17)

	')'            reduce using rule 17
	'->'           reduce using rule 17
	%eof           reduce using rule 17


State 8

	Expr -> Ident .                                     (rule 11)

	'('            reduce using rule 11
	')'            reduce using rule 11
	'0'            reduce using rule 11
	'['            reduce using rule 11
	'else'         reduce using rule 11
	'false'        reduce using rule 11
	'fun'          reduce using rule 11
	'if'           reduce using rule 11
	'iszero'       reduce using rule 11
	'pred'         reduce using rule 11
	'succ'         reduce using rule 11
	'then'         reduce using rule 11
	'true'         reduce using rule 11
	'}'            reduce using rule 11
	L_Ident        reduce using rule 11
	%eof           reduce using rule 11


State 9

	%start_pExpr -> Expr .                              (rule 0)
	Expr -> Expr . Expr                                 (rule 14)

	'('            shift, and enter state 10
	'0'            shift, and enter state 11
	'['            shift, and enter state 12
	'false'        shift, and enter state 13
	'fun'          shift, and enter state 14
	'if'           shift, and enter state 15
	'iszero'       shift, and enter state 16
	'pred'         shift, and enter state 17
	'succ'         shift, and enter state 18
	'true'         shift, and enter state 19
	L_Ident        shift, and enter state 3
	%eof           accept

	Ident          goto state 8
	Expr           goto state 28

State 10

	Expr -> '(' . Expr ')'                              (rule 15)

	'('            shift, and enter state 10
	'0'            shift, and enter state 11
	'['            shift, and enter state 12
	'false'        shift, and enter state 13
	'fun'          shift, and enter state 14
	'if'           shift, and enter state 15
	'iszero'       shift, and enter state 16
	'pred'         shift, and enter state 17
	'succ'         shift, and enter state 18
	'true'         shift, and enter state 19
	L_Ident        shift, and enter state 3

	Ident          goto state 8
	Expr           goto state 27

State 11

	Expr -> '0' .                                       (rule 7)

	'('            reduce using rule 7
	')'            reduce using rule 7
	'0'            reduce using rule 7
	'['            reduce using rule 7
	'else'         reduce using rule 7
	'false'        reduce using rule 7
	'fun'          reduce using rule 7
	'if'           reduce using rule 7
	'iszero'       reduce using rule 7
	'pred'         reduce using rule 7
	'succ'         reduce using rule 7
	'then'         reduce using rule 7
	'true'         reduce using rule 7
	'}'            reduce using rule 7
	L_Ident        reduce using rule 7
	%eof           reduce using rule 7


State 12

	Expr -> '[' . Integer ']'                           (rule 12)

	L_integ        shift, and enter state 26

	Integer        goto state 25

State 13

	Expr -> 'false' .                                   (rule 5)

	'('            reduce using rule 5
	')'            reduce using rule 5
	'0'            reduce using rule 5
	'['            reduce using rule 5
	'else'         reduce using rule 5
	'false'        reduce using rule 5
	'fun'          reduce using rule 5
	'if'           reduce using rule 5
	'iszero'       reduce using rule 5
	'pred'         reduce using rule 5
	'succ'         reduce using rule 5
	'then'         reduce using rule 5
	'true'         reduce using rule 5
	'}'            reduce using rule 5
	L_Ident        reduce using rule 5
	%eof           reduce using rule 5


State 14

	Expr -> 'fun' . '(' Type ')' '{' 'return' Expr '}'    (rule 13)

	'('            shift, and enter state 24


State 15

	Expr -> 'if' . Expr 'then' Expr 'else' Expr         (rule 6)

	'('            shift, and enter state 10
	'0'            shift, and enter state 11
	'['            shift, and enter state 12
	'false'        shift, and enter state 13
	'fun'          shift, and enter state 14
	'if'           shift, and enter state 15
	'iszero'       shift, and enter state 16
	'pred'         shift, and enter state 17
	'succ'         shift, and enter state 18
	'true'         shift, and enter state 19
	L_Ident        shift, and enter state 3

	Ident          goto state 8
	Expr           goto state 23

State 16

	Expr -> 'iszero' . Expr                             (rule 10)

	'('            shift, and enter state 10
	'0'            shift, and enter state 11
	'['            shift, and enter state 12
	'false'        shift, and enter state 13
	'fun'          shift, and enter state 14
	'if'           shift, and enter state 15
	'iszero'       shift, and enter state 16
	'pred'         shift, and enter state 17
	'succ'         shift, and enter state 18
	'true'         shift, and enter state 19
	L_Ident        shift, and enter state 3

	Ident          goto state 8
	Expr           goto state 22

State 17

	Expr -> 'pred' . Expr                               (rule 9)

	'('            shift, and enter state 10
	'0'            shift, and enter state 11
	'['            shift, and enter state 12
	'false'        shift, and enter state 13
	'fun'          shift, and enter state 14
	'if'           shift, and enter state 15
	'iszero'       shift, and enter state 16
	'pred'         shift, and enter state 17
	'succ'         shift, and enter state 18
	'true'         shift, and enter state 19
	L_Ident        shift, and enter state 3

	Ident          goto state 8
	Expr           goto state 21

State 18

	Expr -> 'succ' . Expr                               (rule 8)

	'('            shift, and enter state 10
	'0'            shift, and enter state 11
	'['            shift, and enter state 12
	'false'        shift, and enter state 13
	'fun'          shift, and enter state 14
	'if'           shift, and enter state 15
	'iszero'       shift, and enter state 16
	'pred'         shift, and enter state 17
	'succ'         shift, and enter state 18
	'true'         shift, and enter state 19
	L_Ident        shift, and enter state 3

	Ident          goto state 8
	Expr           goto state 20

State 19

	Expr -> 'true' .                                    (rule 4)

	'('            reduce using rule 4
	')'            reduce using rule 4
	'0'            reduce using rule 4
	'['            reduce using rule 4
	'else'         reduce using rule 4
	'false'        reduce using rule 4
	'fun'          reduce using rule 4
	'if'           reduce using rule 4
	'iszero'       reduce using rule 4
	'pred'         reduce using rule 4
	'succ'         reduce using rule 4
	'then'         reduce using rule 4
	'true'         reduce using rule 4
	'}'            reduce using rule 4
	L_Ident        reduce using rule 4
	%eof           reduce using rule 4


State 20

	Expr -> 'succ' Expr .                               (rule 8)
	Expr -> Expr . Expr                                 (rule 14)

	'('            shift, and enter state 10
			(reduce using rule 8)

	')'            reduce using rule 8
	'0'            shift, and enter state 11
			(reduce using rule 8)

	'['            shift, and enter state 12
			(reduce using rule 8)

	'else'         reduce using rule 8
	'false'        shift, and enter state 13
			(reduce using rule 8)

	'fun'          shift, and enter state 14
			(reduce using rule 8)

	'if'           shift, and enter state 15
			(reduce using rule 8)

	'iszero'       shift, and enter state 16
			(reduce using rule 8)

	'pred'         shift, and enter state 17
			(reduce using rule 8)

	'succ'         shift, and enter state 18
			(reduce using rule 8)

	'then'         reduce using rule 8
	'true'         shift, and enter state 19
			(reduce using rule 8)

	'}'            reduce using rule 8
	L_Ident        shift, and enter state 3
			(reduce using rule 8)

	%eof           reduce using rule 8

	Ident          goto state 8
	Expr           goto state 28

State 21

	Expr -> 'pred' Expr .                               (rule 9)
	Expr -> Expr . Expr                                 (rule 14)

	'('            shift, and enter state 10
			(reduce using rule 9)

	')'            reduce using rule 9
	'0'            shift, and enter state 11
			(reduce using rule 9)

	'['            shift, and enter state 12
			(reduce using rule 9)

	'else'         reduce using rule 9
	'false'        shift, and enter state 13
			(reduce using rule 9)

	'fun'          shift, and enter state 14
			(reduce using rule 9)

	'if'           shift, and enter state 15
			(reduce using rule 9)

	'iszero'       shift, and enter state 16
			(reduce using rule 9)

	'pred'         shift, and enter state 17
			(reduce using rule 9)

	'succ'         shift, and enter state 18
			(reduce using rule 9)

	'then'         reduce using rule 9
	'true'         shift, and enter state 19
			(reduce using rule 9)

	'}'            reduce using rule 9
	L_Ident        shift, and enter state 3
			(reduce using rule 9)

	%eof           reduce using rule 9

	Ident          goto state 8
	Expr           goto state 28

State 22

	Expr -> 'iszero' Expr .                             (rule 10)
	Expr -> Expr . Expr                                 (rule 14)

	'('            shift, and enter state 10
			(reduce using rule 10)

	')'            reduce using rule 10
	'0'            shift, and enter state 11
			(reduce using rule 10)

	'['            shift, and enter state 12
			(reduce using rule 10)

	'else'         reduce using rule 10
	'false'        shift, and enter state 13
			(reduce using rule 10)

	'fun'          shift, and enter state 14
			(reduce using rule 10)

	'if'           shift, and enter state 15
			(reduce using rule 10)

	'iszero'       shift, and enter state 16
			(reduce using rule 10)

	'pred'         shift, and enter state 17
			(reduce using rule 10)

	'succ'         shift, and enter state 18
			(reduce using rule 10)

	'then'         reduce using rule 10
	'true'         shift, and enter state 19
			(reduce using rule 10)

	'}'            reduce using rule 10
	L_Ident        shift, and enter state 3
			(reduce using rule 10)

	%eof           reduce using rule 10

	Ident          goto state 8
	Expr           goto state 28

State 23

	Expr -> 'if' Expr . 'then' Expr 'else' Expr         (rule 6)
	Expr -> Expr . Expr                                 (rule 14)

	'('            shift, and enter state 10
	'0'            shift, and enter state 11
	'['            shift, and enter state 12
	'false'        shift, and enter state 13
	'fun'          shift, and enter state 14
	'if'           shift, and enter state 15
	'iszero'       shift, and enter state 16
	'pred'         shift, and enter state 17
	'succ'         shift, and enter state 18
	'then'         shift, and enter state 36
	'true'         shift, and enter state 19
	L_Ident        shift, and enter state 3

	Ident          goto state 8
	Expr           goto state 28

State 24

	Expr -> 'fun' '(' . Type ')' '{' 'return' Expr '}'    (rule 13)

	'('            shift, and enter state 5
	'Bool'         shift, and enter state 6
	'Nat'          shift, and enter state 7

	Type           goto state 35

State 25

	Expr -> '[' Integer . ']'                           (rule 12)

	']'            shift, and enter state 34


State 26

	Integer -> L_integ .                                (rule 3)

	']'            reduce using rule 3


State 27

	Expr -> Expr . Expr                                 (rule 14)
	Expr -> '(' Expr . ')'                              (rule 15)

	'('            shift, and enter state 10
	')'            shift, and enter state 33
	'0'            shift, and enter state 11
	'['            shift, and enter state 12
	'false'        shift, and enter state 13
	'fun'          shift, and enter state 14
	'if'           shift, and enter state 15
	'iszero'       shift, and enter state 16
	'pred'         shift, and enter state 17
	'succ'         shift, and enter state 18
	'true'         shift, and enter state 19
	L_Ident        shift, and enter state 3

	Ident          goto state 8
	Expr           goto state 28

State 28

	Expr -> Expr . Expr                                 (rule 14)
	Expr -> Expr Expr .                                 (rule 14)

	'('            shift, and enter state 10
			(reduce using rule 14)

	')'            reduce using rule 14
	'0'            shift, and enter state 11
			(reduce using rule 14)

	'['            shift, and enter state 12
			(reduce using rule 14)

	'else'         reduce using rule 14
	'false'        shift, and enter state 13
			(reduce using rule 14)

	'fun'          shift, and enter state 14
			(reduce using rule 14)

	'if'           shift, and enter state 15
			(reduce using rule 14)

	'iszero'       shift, and enter state 16
			(reduce using rule 14)

	'pred'         shift, and enter state 17
			(reduce using rule 14)

	'succ'         shift, and enter state 18
			(reduce using rule 14)

	'then'         reduce using rule 14
	'true'         shift, and enter state 19
			(reduce using rule 14)

	'}'            reduce using rule 14
	L_Ident        shift, and enter state 3
			(reduce using rule 14)

	%eof           reduce using rule 14

	Ident          goto state 8
	Expr           goto state 28

State 29

	Type -> Type . '->' Type                            (rule 18)
	Type -> '(' Type . ')'                              (rule 19)

	')'            shift, and enter state 32
	'->'           shift, and enter state 30


State 30

	Type -> Type '->' . Type                            (rule 18)

	'('            shift, and enter state 5
	'Bool'         shift, and enter state 6
	'Nat'          shift, and enter state 7

	Type           goto state 31

State 31

	Type -> Type . '->' Type                            (rule 18)
	Type -> Type '->' Type .                            (rule 18)

	')'            reduce using rule 18
	'->'           shift, and enter state 30
			(reduce using rule 18)

	%eof           reduce using rule 18


State 32

	Type -> '(' Type ')' .                              (rule 19)

	')'            reduce using rule 19
	'->'           reduce using rule 19
	%eof           reduce using rule 19


State 33

	Expr -> '(' Expr ')' .                              (rule 15)

	'('            reduce using rule 15
	')'            reduce using rule 15
	'0'            reduce using rule 15
	'['            reduce using rule 15
	'else'         reduce using rule 15
	'false'        reduce using rule 15
	'fun'          reduce using rule 15
	'if'           reduce using rule 15
	'iszero'       reduce using rule 15
	'pred'         reduce using rule 15
	'succ'         reduce using rule 15
	'then'         reduce using rule 15
	'true'         reduce using rule 15
	'}'            reduce using rule 15
	L_Ident        reduce using rule 15
	%eof           reduce using rule 15


State 34

	Expr -> '[' Integer ']' .                           (rule 12)

	'('            reduce using rule 12
	')'            reduce using rule 12
	'0'            reduce using rule 12
	'['            reduce using rule 12
	'else'         reduce using rule 12
	'false'        reduce using rule 12
	'fun'          reduce using rule 12
	'if'           reduce using rule 12
	'iszero'       reduce using rule 12
	'pred'         reduce using rule 12
	'succ'         reduce using rule 12
	'then'         reduce using rule 12
	'true'         reduce using rule 12
	'}'            reduce using rule 12
	L_Ident        reduce using rule 12
	%eof           reduce using rule 12


State 35

	Expr -> 'fun' '(' Type . ')' '{' 'return' Expr '}'    (rule 13)
	Type -> Type . '->' Type                            (rule 18)

	')'            shift, and enter state 38
	'->'           shift, and enter state 30


State 36

	Expr -> 'if' Expr 'then' . Expr 'else' Expr         (rule 6)

	'('            shift, and enter state 10
	'0'            shift, and enter state 11
	'['            shift, and enter state 12
	'false'        shift, and enter state 13
	'fun'          shift, and enter state 14
	'if'           shift, and enter state 15
	'iszero'       shift, and enter state 16
	'pred'         shift, and enter state 17
	'succ'         shift, and enter state 18
	'true'         shift, and enter state 19
	L_Ident        shift, and enter state 3

	Ident          goto state 8
	Expr           goto state 37

State 37

	Expr -> 'if' Expr 'then' Expr . 'else' Expr         (rule 6)
	Expr -> Expr . Expr                                 (rule 14)

	'('            shift, and enter state 10
	'0'            shift, and enter state 11
	'['            shift, and enter state 12
	'else'         shift, and enter state 40
	'false'        shift, and enter state 13
	'fun'          shift, and enter state 14
	'if'           shift, and enter state 15
	'iszero'       shift, and enter state 16
	'pred'         shift, and enter state 17
	'succ'         shift, and enter state 18
	'true'         shift, and enter state 19
	L_Ident        shift, and enter state 3

	Ident          goto state 8
	Expr           goto state 28

State 38

	Expr -> 'fun' '(' Type ')' . '{' 'return' Expr '}'    (rule 13)

	'{'            shift, and enter state 39


State 39

	Expr -> 'fun' '(' Type ')' '{' . 'return' Expr '}'    (rule 13)

	'return'       shift, and enter state 42


State 40

	Expr -> 'if' Expr 'then' Expr 'else' . Expr         (rule 6)

	'('            shift, and enter state 10
	'0'            shift, and enter state 11
	'['            shift, and enter state 12
	'false'        shift, and enter state 13
	'fun'          shift, and enter state 14
	'if'           shift, and enter state 15
	'iszero'       shift, and enter state 16
	'pred'         shift, and enter state 17
	'succ'         shift, and enter state 18
	'true'         shift, and enter state 19
	L_Ident        shift, and enter state 3

	Ident          goto state 8
	Expr           goto state 41

State 41

	Expr -> 'if' Expr 'then' Expr 'else' Expr .         (rule 6)
	Expr -> Expr . Expr                                 (rule 14)

	'('            shift, and enter state 10
			(reduce using rule 6)

	')'            reduce using rule 6
	'0'            shift, and enter state 11
			(reduce using rule 6)

	'['            shift, and enter state 12
			(reduce using rule 6)

	'else'         reduce using rule 6
	'false'        shift, and enter state 13
			(reduce using rule 6)

	'fun'          shift, and enter state 14
			(reduce using rule 6)

	'if'           shift, and enter state 15
			(reduce using rule 6)

	'iszero'       shift, and enter state 16
			(reduce using rule 6)

	'pred'         shift, and enter state 17
			(reduce using rule 6)

	'succ'         shift, and enter state 18
			(reduce using rule 6)

	'then'         reduce using rule 6
	'true'         shift, and enter state 19
			(reduce using rule 6)

	'}'            reduce using rule 6
	L_Ident        shift, and enter state 3
			(reduce using rule 6)

	%eof           reduce using rule 6

	Ident          goto state 8
	Expr           goto state 28

State 42

	Expr -> 'fun' '(' Type ')' '{' 'return' . Expr '}'    (rule 13)

	'('            shift, and enter state 10
	'0'            shift, and enter state 11
	'['            shift, and enter state 12
	'false'        shift, and enter state 13
	'fun'          shift, and enter state 14
	'if'           shift, and enter state 15
	'iszero'       shift, and enter state 16
	'pred'         shift, and enter state 17
	'succ'         shift, and enter state 18
	'true'         shift, and enter state 19
	L_Ident        shift, and enter state 3

	Ident          goto state 8
	Expr           goto state 43

State 43

	Expr -> 'fun' '(' Type ')' '{' 'return' Expr . '}'    (rule 13)
	Expr -> Expr . Expr                                 (rule 14)

	'('            shift, and enter state 10
	'0'            shift, and enter state 11
	'['            shift, and enter state 12
	'false'        shift, and enter state 13
	'fun'          shift, and enter state 14
	'if'           shift, and enter state 15
	'iszero'       shift, and enter state 16
	'pred'         shift, and enter state 17
	'succ'         shift, and enter state 18
	'true'         shift, and enter state 19
	'}'            shift, and enter state 44
	L_Ident        shift, and enter state 3

	Ident          goto state 8
	Expr           goto state 28

State 44

	Expr -> 'fun' '(' Type ')' '{' 'return' Expr '}' .    (rule 13)

	'('            reduce using rule 13
	')'            reduce using rule 13
	'0'            reduce using rule 13
	'['            reduce using rule 13
	'else'         reduce using rule 13
	'false'        reduce using rule 13
	'fun'          reduce using rule 13
	'if'           reduce using rule 13
	'iszero'       reduce using rule 13
	'pred'         reduce using rule 13
	'succ'         reduce using rule 13
	'then'         reduce using rule 13
	'true'         reduce using rule 13
	'}'            reduce using rule 13
	L_Ident        reduce using rule 13
	%eof           reduce using rule 13


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 20
Number of terminals: 22
Number of non-terminals: 6
Number of states: 45
