-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Syntax.Normal.Par
  ( happyError
  , myLexer
  , pProgram
  , pExpr
  , pExpr0
  , pListExpr0
  , pExpr1
  , pExpr2
  , pExpr3
  , pStore
  , pAssignment
  , pListAssignment
  , pStoreTyping
  , pLocationTyping
  , pListLocationTyping
  , pType
  , pType1
  , pType2
  , pTyping
  ) where

import Prelude

import qualified Syntax.Normal.Abs
import Syntax.Normal.Lex

}

%name pProgram Program
%name pExpr Expr
%name pExpr0 Expr0
%name pListExpr0 ListExpr0
%name pExpr1 Expr1
%name pExpr2 Expr2
%name pExpr3 Expr3
%name pStore Store
%name pAssignment Assignment
%name pListAssignment ListAssignment
%name pStoreTyping StoreTyping
%name pLocationTyping LocationTyping
%name pListLocationTyping ListLocationTyping
%name pType Type
%name pType1 Type1
%name pType2 Type2
%name pTyping Typing
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '#' { PT _ (TS _ 2) }
  '(' { PT _ (TS _ 3) }
  ')' { PT _ (TS _ 4) }
  '->' { PT _ (TS _ 5) }
  '0' { PT _ (TS _ 6) }
  ':' { PT _ (TS _ 7) }
  ':=' { PT _ (TS _ 8) }
  ';' { PT _ (TS _ 9) }
  '=' { PT _ (TS _ 10) }
  'Bool' { PT _ (TS _ 11) }
  'Nat' { PT _ (TS _ 12) }
  'Ref' { PT _ (TS _ 13) }
  'Unit' { PT _ (TS _ 14) }
  'else' { PT _ (TS _ 15) }
  'false' { PT _ (TS _ 16) }
  'fun' { PT _ (TS _ 17) }
  'if' { PT _ (TS _ 18) }
  'iszero' { PT _ (TS _ 19) }
  'pred' { PT _ (TS _ 20) }
  'ref' { PT _ (TS _ 21) }
  'return' { PT _ (TS _ 22) }
  'succ' { PT _ (TS _ 23) }
  'then' { PT _ (TS _ 24) }
  'true' { PT _ (TS _ 25) }
  'unit' { PT _ (TS _ 26) }
  '{' { PT _ (TS _ 27) }
  '}' { PT _ (TS _ 28) }
  L_Ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }

%%

Ident :: { Syntax.Normal.Abs.Ident }
Ident  : L_Ident { Syntax.Normal.Abs.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

Program :: { Syntax.Normal.Abs.Program }
Program : Expr { Syntax.Normal.Abs.ProgramExprs $1 }

Expr :: { Syntax.Normal.Abs.Expr }
Expr : ListExpr0 { Syntax.Normal.Abs.Seq $1 } | Expr0 { $1 }

Expr0 :: { Syntax.Normal.Abs.Expr }
Expr0 : 'if' Expr0 'then' Expr0 'else' Expr0 { Syntax.Normal.Abs.If $2 $4 $6 }
      | 'fun' '(' Ident ':' Type ')' '{' 'return' Expr0 '}' { Syntax.Normal.Abs.Abstraction $3 $5 $9 }
      | Expr1 ':=' Expr0 { Syntax.Normal.Abs.Assign $1 $3 }
      | Expr1 { $1 }

ListExpr0 :: { [Syntax.Normal.Abs.Expr] }
ListExpr0 : {- empty -} { [] }
          | Expr0 { (:[]) $1 }
          | Expr0 ';' ListExpr0 { (:) $1 $3 }

Expr1 :: { Syntax.Normal.Abs.Expr }
Expr1 : Expr1 Expr2 { Syntax.Normal.Abs.Application $1 $2 }
      | Expr2 { $1 }

Expr2 :: { Syntax.Normal.Abs.Expr }
Expr2 : 'ref' Expr3 { Syntax.Normal.Abs.NewRef $2 }
      | '!' Expr3 { Syntax.Normal.Abs.DeRef $2 }
      | 'succ' Expr3 { Syntax.Normal.Abs.Succ $2 }
      | 'pred' Expr3 { Syntax.Normal.Abs.Pred $2 }
      | 'iszero' Expr3 { Syntax.Normal.Abs.IsZero $2 }
      | Expr3 { $1 }

Expr3 :: { Syntax.Normal.Abs.Expr }
Expr3 : 'unit' { Syntax.Normal.Abs.ConstUnit }
      | 'true' { Syntax.Normal.Abs.ConstTrue }
      | 'false' { Syntax.Normal.Abs.ConstFalse }
      | '0' { Syntax.Normal.Abs.ConstZero }
      | Ident { Syntax.Normal.Abs.Var $1 }
      | '#' Integer { Syntax.Normal.Abs.Location $2 }
      | '(' Expr ')' { $2 }

Store :: { Syntax.Normal.Abs.Store }
Store : '{' ListAssignment '}' { Syntax.Normal.Abs.Store $2 }

Assignment :: { Syntax.Normal.Abs.Assignment }
Assignment : '#' Integer '=' Expr { Syntax.Normal.Abs.Assignment $2 $4 }

ListAssignment :: { [Syntax.Normal.Abs.Assignment] }
ListAssignment : {- empty -} { [] }
               | Assignment { (:[]) $1 }
               | Assignment ';' ListAssignment { (:) $1 $3 }

StoreTyping :: { Syntax.Normal.Abs.StoreTyping }
StoreTyping : '{' ListLocationTyping '}' { Syntax.Normal.Abs.StoreTyping $2 }

LocationTyping :: { Syntax.Normal.Abs.LocationTyping }
LocationTyping : '#' Integer ':' Type { Syntax.Normal.Abs.LocationTyping $2 $4 }

ListLocationTyping :: { [Syntax.Normal.Abs.LocationTyping] }
ListLocationTyping : {- empty -} { [] }
                   | LocationTyping { (:[]) $1 }
                   | LocationTyping ';' ListLocationTyping { (:) $1 $3 }

Type :: { Syntax.Normal.Abs.Type }
Type : Type1 '->' Type { Syntax.Normal.Abs.FunType $1 $3 }
     | Type1 { $1 }

Type1 :: { Syntax.Normal.Abs.Type }
Type1 : 'Ref' Type2 { Syntax.Normal.Abs.RefType $2 } | Type2 { $1 }

Type2 :: { Syntax.Normal.Abs.Type }
Type2 : 'Bool' { Syntax.Normal.Abs.BoolType }
      | 'Nat' { Syntax.Normal.Abs.NatType }
      | 'Unit' { Syntax.Normal.Abs.UnitType }
      | '(' Type ')' { $2 }

Typing :: { Syntax.Normal.Abs.Typing }
Typing : Expr ':' Type { Syntax.Normal.Abs.Typing $1 $3 }
{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

