-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Syntax/Nameless/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pListExpr -> ListExpr                       (1)
	%start_pExpr -> Expr                               (2)
	%start_pBinding -> Binding                         (3)
	%start_pListBinding -> ListBinding                 (4)
	%start_pExpr1 -> Expr1                             (5)
	%start_pExpr2 -> Expr2                             (6)
	%start_pExpr3 -> Expr3                             (7)
	%start_pType -> Type                               (8)
	%start_pType1 -> Type1                             (9)
	%start_pFieldType -> FieldType                     (10)
	%start_pListFieldType -> ListFieldType             (11)
	%start_pTyping -> Typing                           (12)
	Ident -> L_Ident                                   (13)
	Integer -> L_integ                                 (14)
	Program -> ListExpr                                (15)
	ListExpr ->                                        (16)
	ListExpr -> Expr                                   (17)
	ListExpr -> Expr ';' ListExpr                      (18)
	Expr -> 'if' Expr 'then' Expr 'else' Expr          (19)
	Expr -> 'let' Expr 'in' Expr                       (20)
	Expr -> 'fun' '(' Type ')' '{' 'return' Expr '}'   (21)
	Expr -> '{' ListBinding '}'                        (22)
	Expr -> Expr1                                      (23)
	Binding -> Ident '=' Expr                          (24)
	ListBinding ->                                     (25)
	ListBinding -> Binding                             (26)
	ListBinding -> Binding ',' ListBinding             (27)
	Expr1 -> Expr1 Expr2                               (28)
	Expr1 -> Expr2                                     (29)
	Expr2 -> 'succ' Expr3                              (30)
	Expr2 -> Expr3 '.' Ident                           (31)
	Expr2 -> 'pred' Expr3                              (32)
	Expr2 -> 'iszero' Expr3                            (33)
	Expr2 -> Expr3                                     (34)
	Expr3 -> 'true'                                    (35)
	Expr3 -> 'false'                                   (36)
	Expr3 -> '0'                                       (37)
	Expr3 -> Ident                                     (38)
	Expr3 -> Integer                                   (39)
	Expr3 -> '(' Expr ')'                              (40)
	Type -> Type1 '->' Type                            (41)
	Type -> '{' ListFieldType '}'                      (42)
	Type -> Type1                                      (43)
	Type1 -> 'Bool'                                    (44)
	Type1 -> 'Nat'                                     (45)
	Type1 -> '(' Type ')'                              (46)
	FieldType -> Ident ':' Type                        (47)
	ListFieldType ->                                   (48)
	ListFieldType -> FieldType                         (49)
	ListFieldType -> FieldType ',' ListFieldType       (50)
	Typing -> Expr ':' Type                            (51)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	','            { PT _ (TS _ 3) }
	'->'           { PT _ (TS _ 4) }
	'.'            { PT _ (TS _ 5) }
	'0'            { PT _ (TS _ 6) }
	':'            { PT _ (TS _ 7) }
	';'            { PT _ (TS _ 8) }
	'='            { PT _ (TS _ 9) }
	'Bool'         { PT _ (TS _ 10) }
	'Nat'          { PT _ (TS _ 11) }
	'else'         { PT _ (TS _ 12) }
	'false'        { PT _ (TS _ 13) }
	'fun'          { PT _ (TS _ 14) }
	'if'           { PT _ (TS _ 15) }
	'in'           { PT _ (TS _ 16) }
	'iszero'       { PT _ (TS _ 17) }
	'let'          { PT _ (TS _ 18) }
	'pred'         { PT _ (TS _ 19) }
	'return'       { PT _ (TS _ 20) }
	'succ'         { PT _ (TS _ 21) }
	'then'         { PT _ (TS _ 22) }
	'true'         { PT _ (TS _ 23) }
	'{'            { PT _ (TS _ 24) }
	'}'            { PT _ (TS _ 25) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pListExpr rule  1
	%start_pExpr    rule  2
	%start_pBinding rule  3
	%start_pListBinding rule  4
	%start_pExpr1   rule  5
	%start_pExpr2   rule  6
	%start_pExpr3   rule  7
	%start_pType    rule  8
	%start_pType1   rule  9
	%start_pFieldType rule  10
	%start_pListFieldType rule  11
	%start_pTyping  rule  12
	Ident           rule  13
	Integer         rule  14
	Program         rule  15
	ListExpr        rules 16, 17, 18
	Expr            rules 19, 20, 21, 22, 23
	Binding         rule  24
	ListBinding     rules 25, 26, 27
	Expr1           rules 28, 29
	Expr2           rules 30, 31, 32, 33, 34
	Expr3           rules 35, 36, 37, 38, 39, 40
	Type            rules 41, 42, 43
	Type1           rules 44, 45, 46
	FieldType       rule  47
	ListFieldType   rules 48, 49, 50
	Typing          rule  51

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'fun'          shift, and enter state 25
	'if'           shift, and enter state 26
	'iszero'       shift, and enter state 27
	'let'          shift, and enter state 28
	'pred'         shift, and enter state 29
	'succ'         shift, and enter state 30
	'true'         shift, and enter state 31
	'{'            shift, and enter state 32
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33
	%eof           reduce using rule 16

	Ident          goto state 15
	Integer        goto state 16
	Program        goto state 55
	ListExpr       goto state 56
	Expr           goto state 54
	Expr1          goto state 18
	Expr2          goto state 19
	Expr3          goto state 20

State 1

	%start_pListExpr -> . ListExpr                      (rule 1)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'fun'          shift, and enter state 25
	'if'           shift, and enter state 26
	'iszero'       shift, and enter state 27
	'let'          shift, and enter state 28
	'pred'         shift, and enter state 29
	'succ'         shift, and enter state 30
	'true'         shift, and enter state 31
	'{'            shift, and enter state 32
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33
	%eof           reduce using rule 16

	Ident          goto state 15
	Integer        goto state 16
	ListExpr       goto state 53
	Expr           goto state 54
	Expr1          goto state 18
	Expr2          goto state 19
	Expr3          goto state 20

State 2

	%start_pExpr -> . Expr                              (rule 2)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'fun'          shift, and enter state 25
	'if'           shift, and enter state 26
	'iszero'       shift, and enter state 27
	'let'          shift, and enter state 28
	'pred'         shift, and enter state 29
	'succ'         shift, and enter state 30
	'true'         shift, and enter state 31
	'{'            shift, and enter state 32
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33

	Ident          goto state 15
	Integer        goto state 16
	Expr           goto state 52
	Expr1          goto state 18
	Expr2          goto state 19
	Expr3          goto state 20

State 3

	%start_pBinding -> . Binding                        (rule 3)

	L_Ident        shift, and enter state 14

	Ident          goto state 48
	Binding        goto state 51

State 4

	%start_pListBinding -> . ListBinding                (rule 4)

	L_Ident        shift, and enter state 14
	%eof           reduce using rule 25

	Ident          goto state 48
	Binding        goto state 49
	ListBinding    goto state 50

State 5

	%start_pExpr1 -> . Expr1                            (rule 5)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'iszero'       shift, and enter state 27
	'pred'         shift, and enter state 29
	'succ'         shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33

	Ident          goto state 15
	Integer        goto state 16
	Expr1          goto state 47
	Expr2          goto state 19
	Expr3          goto state 20

State 6

	%start_pExpr2 -> . Expr2                            (rule 6)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'iszero'       shift, and enter state 27
	'pred'         shift, and enter state 29
	'succ'         shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33

	Ident          goto state 15
	Integer        goto state 16
	Expr2          goto state 46
	Expr3          goto state 20

State 7

	%start_pExpr3 -> . Expr3                            (rule 7)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33

	Ident          goto state 15
	Integer        goto state 16
	Expr3          goto state 45

State 8

	%start_pType -> . Type                              (rule 8)

	'('            shift, and enter state 39
	'Bool'         shift, and enter state 40
	'Nat'          shift, and enter state 41
	'{'            shift, and enter state 44

	Type           goto state 42
	Type1          goto state 43

State 9

	%start_pType1 -> . Type1                            (rule 9)

	'('            shift, and enter state 39
	'Bool'         shift, and enter state 40
	'Nat'          shift, and enter state 41

	Type1          goto state 38

State 10

	%start_pFieldType -> . FieldType                    (rule 10)

	L_Ident        shift, and enter state 14

	Ident          goto state 34
	FieldType      goto state 37

State 11

	%start_pListFieldType -> . ListFieldType            (rule 11)

	L_Ident        shift, and enter state 14
	%eof           reduce using rule 48

	Ident          goto state 34
	FieldType      goto state 35
	ListFieldType  goto state 36

State 12

	%start_pTyping -> . Typing                          (rule 12)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'fun'          shift, and enter state 25
	'if'           shift, and enter state 26
	'iszero'       shift, and enter state 27
	'let'          shift, and enter state 28
	'pred'         shift, and enter state 29
	'succ'         shift, and enter state 30
	'true'         shift, and enter state 31
	'{'            shift, and enter state 32
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33

	Ident          goto state 15
	Integer        goto state 16
	Expr           goto state 17
	Expr1          goto state 18
	Expr2          goto state 19
	Expr3          goto state 20
	Typing         goto state 21

State 13

	Ident -> . L_Ident                                  (rule 13)

	L_Ident        shift, and enter state 14


State 14

	Ident -> L_Ident .                                  (rule 13)

	'('            reduce using rule 13
	')'            reduce using rule 13
	','            reduce using rule 13
	'.'            reduce using rule 13
	'0'            reduce using rule 13
	':'            reduce using rule 13
	';'            reduce using rule 13
	'='            reduce using rule 13
	'else'         reduce using rule 13
	'false'        reduce using rule 13
	'in'           reduce using rule 13
	'iszero'       reduce using rule 13
	'pred'         reduce using rule 13
	'succ'         reduce using rule 13
	'then'         reduce using rule 13
	'true'         reduce using rule 13
	'}'            reduce using rule 13
	L_Ident        reduce using rule 13
	L_integ        reduce using rule 13
	%eof           reduce using rule 13


State 15

	Expr3 -> Ident .                                    (rule 38)

	'('            reduce using rule 38
	')'            reduce using rule 38
	','            reduce using rule 38
	'.'            reduce using rule 38
	'0'            reduce using rule 38
	':'            reduce using rule 38
	';'            reduce using rule 38
	'else'         reduce using rule 38
	'false'        reduce using rule 38
	'in'           reduce using rule 38
	'iszero'       reduce using rule 38
	'pred'         reduce using rule 38
	'succ'         reduce using rule 38
	'then'         reduce using rule 38
	'true'         reduce using rule 38
	'}'            reduce using rule 38
	L_Ident        reduce using rule 38
	L_integ        reduce using rule 38
	%eof           reduce using rule 38


State 16

	Expr3 -> Integer .                                  (rule 39)

	'('            reduce using rule 39
	')'            reduce using rule 39
	','            reduce using rule 39
	'.'            reduce using rule 39
	'0'            reduce using rule 39
	':'            reduce using rule 39
	';'            reduce using rule 39
	'else'         reduce using rule 39
	'false'        reduce using rule 39
	'in'           reduce using rule 39
	'iszero'       reduce using rule 39
	'pred'         reduce using rule 39
	'succ'         reduce using rule 39
	'then'         reduce using rule 39
	'true'         reduce using rule 39
	'}'            reduce using rule 39
	L_Ident        reduce using rule 39
	L_integ        reduce using rule 39
	%eof           reduce using rule 39


State 17

	Typing -> Expr . ':' Type                           (rule 51)

	':'            shift, and enter state 75


State 18

	Expr -> Expr1 .                                     (rule 23)
	Expr1 -> Expr1 . Expr2                              (rule 28)

	'('            shift, and enter state 22
	')'            reduce using rule 23
	','            reduce using rule 23
	'0'            shift, and enter state 23
	':'            reduce using rule 23
	';'            reduce using rule 23
	'else'         reduce using rule 23
	'false'        shift, and enter state 24
	'in'           reduce using rule 23
	'iszero'       shift, and enter state 27
	'pred'         shift, and enter state 29
	'succ'         shift, and enter state 30
	'then'         reduce using rule 23
	'true'         shift, and enter state 31
	'}'            reduce using rule 23
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33
	%eof           reduce using rule 23

	Ident          goto state 15
	Integer        goto state 16
	Expr2          goto state 60
	Expr3          goto state 20

State 19

	Expr1 -> Expr2 .                                    (rule 29)

	'('            reduce using rule 29
	')'            reduce using rule 29
	','            reduce using rule 29
	'0'            reduce using rule 29
	':'            reduce using rule 29
	';'            reduce using rule 29
	'else'         reduce using rule 29
	'false'        reduce using rule 29
	'in'           reduce using rule 29
	'iszero'       reduce using rule 29
	'pred'         reduce using rule 29
	'succ'         reduce using rule 29
	'then'         reduce using rule 29
	'true'         reduce using rule 29
	'}'            reduce using rule 29
	L_Ident        reduce using rule 29
	L_integ        reduce using rule 29
	%eof           reduce using rule 29


State 20

	Expr2 -> Expr3 . '.' Ident                          (rule 31)
	Expr2 -> Expr3 .                                    (rule 34)

	'('            reduce using rule 34
	')'            reduce using rule 34
	','            reduce using rule 34
	'.'            shift, and enter state 74
	'0'            reduce using rule 34
	':'            reduce using rule 34
	';'            reduce using rule 34
	'else'         reduce using rule 34
	'false'        reduce using rule 34
	'in'           reduce using rule 34
	'iszero'       reduce using rule 34
	'pred'         reduce using rule 34
	'succ'         reduce using rule 34
	'then'         reduce using rule 34
	'true'         reduce using rule 34
	'}'            reduce using rule 34
	L_Ident        reduce using rule 34
	L_integ        reduce using rule 34
	%eof           reduce using rule 34


State 21

	%start_pTyping -> Typing .                          (rule 12)

	%eof           accept


State 22

	Expr3 -> '(' . Expr ')'                             (rule 40)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'fun'          shift, and enter state 25
	'if'           shift, and enter state 26
	'iszero'       shift, and enter state 27
	'let'          shift, and enter state 28
	'pred'         shift, and enter state 29
	'succ'         shift, and enter state 30
	'true'         shift, and enter state 31
	'{'            shift, and enter state 32
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33

	Ident          goto state 15
	Integer        goto state 16
	Expr           goto state 73
	Expr1          goto state 18
	Expr2          goto state 19
	Expr3          goto state 20

State 23

	Expr3 -> '0' .                                      (rule 37)

	'('            reduce using rule 37
	')'            reduce using rule 37
	','            reduce using rule 37
	'.'            reduce using rule 37
	'0'            reduce using rule 37
	':'            reduce using rule 37
	';'            reduce using rule 37
	'else'         reduce using rule 37
	'false'        reduce using rule 37
	'in'           reduce using rule 37
	'iszero'       reduce using rule 37
	'pred'         reduce using rule 37
	'succ'         reduce using rule 37
	'then'         reduce using rule 37
	'true'         reduce using rule 37
	'}'            reduce using rule 37
	L_Ident        reduce using rule 37
	L_integ        reduce using rule 37
	%eof           reduce using rule 37


State 24

	Expr3 -> 'false' .                                  (rule 36)

	'('            reduce using rule 36
	')'            reduce using rule 36
	','            reduce using rule 36
	'.'            reduce using rule 36
	'0'            reduce using rule 36
	':'            reduce using rule 36
	';'            reduce using rule 36
	'else'         reduce using rule 36
	'false'        reduce using rule 36
	'in'           reduce using rule 36
	'iszero'       reduce using rule 36
	'pred'         reduce using rule 36
	'succ'         reduce using rule 36
	'then'         reduce using rule 36
	'true'         reduce using rule 36
	'}'            reduce using rule 36
	L_Ident        reduce using rule 36
	L_integ        reduce using rule 36
	%eof           reduce using rule 36


State 25

	Expr -> 'fun' . '(' Type ')' '{' 'return' Expr '}'    (rule 21)

	'('            shift, and enter state 72


State 26

	Expr -> 'if' . Expr 'then' Expr 'else' Expr         (rule 19)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'fun'          shift, and enter state 25
	'if'           shift, and enter state 26
	'iszero'       shift, and enter state 27
	'let'          shift, and enter state 28
	'pred'         shift, and enter state 29
	'succ'         shift, and enter state 30
	'true'         shift, and enter state 31
	'{'            shift, and enter state 32
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33

	Ident          goto state 15
	Integer        goto state 16
	Expr           goto state 71
	Expr1          goto state 18
	Expr2          goto state 19
	Expr3          goto state 20

State 27

	Expr2 -> 'iszero' . Expr3                           (rule 33)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33

	Ident          goto state 15
	Integer        goto state 16
	Expr3          goto state 70

State 28

	Expr -> 'let' . Expr 'in' Expr                      (rule 20)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'fun'          shift, and enter state 25
	'if'           shift, and enter state 26
	'iszero'       shift, and enter state 27
	'let'          shift, and enter state 28
	'pred'         shift, and enter state 29
	'succ'         shift, and enter state 30
	'true'         shift, and enter state 31
	'{'            shift, and enter state 32
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33

	Ident          goto state 15
	Integer        goto state 16
	Expr           goto state 69
	Expr1          goto state 18
	Expr2          goto state 19
	Expr3          goto state 20

State 29

	Expr2 -> 'pred' . Expr3                             (rule 32)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33

	Ident          goto state 15
	Integer        goto state 16
	Expr3          goto state 68

State 30

	Expr2 -> 'succ' . Expr3                             (rule 30)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33

	Ident          goto state 15
	Integer        goto state 16
	Expr3          goto state 67

State 31

	Expr3 -> 'true' .                                   (rule 35)

	'('            reduce using rule 35
	')'            reduce using rule 35
	','            reduce using rule 35
	'.'            reduce using rule 35
	'0'            reduce using rule 35
	':'            reduce using rule 35
	';'            reduce using rule 35
	'else'         reduce using rule 35
	'false'        reduce using rule 35
	'in'           reduce using rule 35
	'iszero'       reduce using rule 35
	'pred'         reduce using rule 35
	'succ'         reduce using rule 35
	'then'         reduce using rule 35
	'true'         reduce using rule 35
	'}'            reduce using rule 35
	L_Ident        reduce using rule 35
	L_integ        reduce using rule 35
	%eof           reduce using rule 35


State 32

	Expr -> '{' . ListBinding '}'                       (rule 22)

	'}'            reduce using rule 25
	L_Ident        shift, and enter state 14

	Ident          goto state 48
	Binding        goto state 49
	ListBinding    goto state 66

State 33

	Integer -> L_integ .                                (rule 14)

	'('            reduce using rule 14
	')'            reduce using rule 14
	','            reduce using rule 14
	'.'            reduce using rule 14
	'0'            reduce using rule 14
	':'            reduce using rule 14
	';'            reduce using rule 14
	'else'         reduce using rule 14
	'false'        reduce using rule 14
	'in'           reduce using rule 14
	'iszero'       reduce using rule 14
	'pred'         reduce using rule 14
	'succ'         reduce using rule 14
	'then'         reduce using rule 14
	'true'         reduce using rule 14
	'}'            reduce using rule 14
	L_Ident        reduce using rule 14
	L_integ        reduce using rule 14
	%eof           reduce using rule 14


State 34

	FieldType -> Ident . ':' Type                       (rule 47)

	':'            shift, and enter state 65


State 35

	ListFieldType -> FieldType .                        (rule 49)
	ListFieldType -> FieldType . ',' ListFieldType      (rule 50)

	','            shift, and enter state 64
	'}'            reduce using rule 49
	%eof           reduce using rule 49


State 36

	%start_pListFieldType -> ListFieldType .            (rule 11)

	%eof           accept


State 37

	%start_pFieldType -> FieldType .                    (rule 10)

	%eof           accept


State 38

	%start_pType1 -> Type1 .                            (rule 9)

	%eof           accept


State 39

	Type1 -> '(' . Type ')'                             (rule 46)

	'('            shift, and enter state 39
	'Bool'         shift, and enter state 40
	'Nat'          shift, and enter state 41
	'{'            shift, and enter state 44

	Type           goto state 63
	Type1          goto state 43

State 40

	Type1 -> 'Bool' .                                   (rule 44)

	')'            reduce using rule 44
	','            reduce using rule 44
	'->'           reduce using rule 44
	'}'            reduce using rule 44
	%eof           reduce using rule 44


State 41

	Type1 -> 'Nat' .                                    (rule 45)

	')'            reduce using rule 45
	','            reduce using rule 45
	'->'           reduce using rule 45
	'}'            reduce using rule 45
	%eof           reduce using rule 45


State 42

	%start_pType -> Type .                              (rule 8)

	%eof           accept


State 43

	Type -> Type1 . '->' Type                           (rule 41)
	Type -> Type1 .                                     (rule 43)

	')'            reduce using rule 43
	','            reduce using rule 43
	'->'           shift, and enter state 62
	'}'            reduce using rule 43
	%eof           reduce using rule 43


State 44

	Type -> '{' . ListFieldType '}'                     (rule 42)

	'}'            reduce using rule 48
	L_Ident        shift, and enter state 14

	Ident          goto state 34
	FieldType      goto state 35
	ListFieldType  goto state 61

State 45

	%start_pExpr3 -> Expr3 .                            (rule 7)

	%eof           accept


State 46

	%start_pExpr2 -> Expr2 .                            (rule 6)

	%eof           accept


State 47

	%start_pExpr1 -> Expr1 .                            (rule 5)
	Expr1 -> Expr1 . Expr2                              (rule 28)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'iszero'       shift, and enter state 27
	'pred'         shift, and enter state 29
	'succ'         shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33
	%eof           accept

	Ident          goto state 15
	Integer        goto state 16
	Expr2          goto state 60
	Expr3          goto state 20

State 48

	Binding -> Ident . '=' Expr                         (rule 24)

	'='            shift, and enter state 59


State 49

	ListBinding -> Binding .                            (rule 26)
	ListBinding -> Binding . ',' ListBinding            (rule 27)

	','            shift, and enter state 58
	'}'            reduce using rule 26
	%eof           reduce using rule 26


State 50

	%start_pListBinding -> ListBinding .                (rule 4)

	%eof           accept


State 51

	%start_pBinding -> Binding .                        (rule 3)

	%eof           accept


State 52

	%start_pExpr -> Expr .                              (rule 2)

	%eof           accept


State 53

	%start_pListExpr -> ListExpr .                      (rule 1)

	%eof           accept


State 54

	ListExpr -> Expr .                                  (rule 17)
	ListExpr -> Expr . ';' ListExpr                     (rule 18)

	';'            shift, and enter state 57
	%eof           reduce using rule 17


State 55

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 56

	Program -> ListExpr .                               (rule 15)

	%eof           reduce using rule 15


State 57

	ListExpr -> Expr ';' . ListExpr                     (rule 18)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'fun'          shift, and enter state 25
	'if'           shift, and enter state 26
	'iszero'       shift, and enter state 27
	'let'          shift, and enter state 28
	'pred'         shift, and enter state 29
	'succ'         shift, and enter state 30
	'true'         shift, and enter state 31
	'{'            shift, and enter state 32
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33
	%eof           reduce using rule 16

	Ident          goto state 15
	Integer        goto state 16
	ListExpr       goto state 90
	Expr           goto state 54
	Expr1          goto state 18
	Expr2          goto state 19
	Expr3          goto state 20

State 58

	ListBinding -> Binding ',' . ListBinding            (rule 27)

	'}'            reduce using rule 25
	L_Ident        shift, and enter state 14
	%eof           reduce using rule 25

	Ident          goto state 48
	Binding        goto state 49
	ListBinding    goto state 89

State 59

	Binding -> Ident '=' . Expr                         (rule 24)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'fun'          shift, and enter state 25
	'if'           shift, and enter state 26
	'iszero'       shift, and enter state 27
	'let'          shift, and enter state 28
	'pred'         shift, and enter state 29
	'succ'         shift, and enter state 30
	'true'         shift, and enter state 31
	'{'            shift, and enter state 32
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33

	Ident          goto state 15
	Integer        goto state 16
	Expr           goto state 88
	Expr1          goto state 18
	Expr2          goto state 19
	Expr3          goto state 20

State 60

	Expr1 -> Expr1 Expr2 .                              (rule 28)

	'('            reduce using rule 28
	')'            reduce using rule 28
	','            reduce using rule 28
	'0'            reduce using rule 28
	':'            reduce using rule 28
	';'            reduce using rule 28
	'else'         reduce using rule 28
	'false'        reduce using rule 28
	'in'           reduce using rule 28
	'iszero'       reduce using rule 28
	'pred'         reduce using rule 28
	'succ'         reduce using rule 28
	'then'         reduce using rule 28
	'true'         reduce using rule 28
	'}'            reduce using rule 28
	L_Ident        reduce using rule 28
	L_integ        reduce using rule 28
	%eof           reduce using rule 28


State 61

	Type -> '{' ListFieldType . '}'                     (rule 42)

	'}'            shift, and enter state 87


State 62

	Type -> Type1 '->' . Type                           (rule 41)

	'('            shift, and enter state 39
	'Bool'         shift, and enter state 40
	'Nat'          shift, and enter state 41
	'{'            shift, and enter state 44

	Type           goto state 86
	Type1          goto state 43

State 63

	Type1 -> '(' Type . ')'                             (rule 46)

	')'            shift, and enter state 85


State 64

	ListFieldType -> FieldType ',' . ListFieldType      (rule 50)

	'}'            reduce using rule 48
	L_Ident        shift, and enter state 14
	%eof           reduce using rule 48

	Ident          goto state 34
	FieldType      goto state 35
	ListFieldType  goto state 84

State 65

	FieldType -> Ident ':' . Type                       (rule 47)

	'('            shift, and enter state 39
	'Bool'         shift, and enter state 40
	'Nat'          shift, and enter state 41
	'{'            shift, and enter state 44

	Type           goto state 83
	Type1          goto state 43

State 66

	Expr -> '{' ListBinding . '}'                       (rule 22)

	'}'            shift, and enter state 82


State 67

	Expr2 -> 'succ' Expr3 .                             (rule 30)

	'('            reduce using rule 30
	')'            reduce using rule 30
	','            reduce using rule 30
	'0'            reduce using rule 30
	':'            reduce using rule 30
	';'            reduce using rule 30
	'else'         reduce using rule 30
	'false'        reduce using rule 30
	'in'           reduce using rule 30
	'iszero'       reduce using rule 30
	'pred'         reduce using rule 30
	'succ'         reduce using rule 30
	'then'         reduce using rule 30
	'true'         reduce using rule 30
	'}'            reduce using rule 30
	L_Ident        reduce using rule 30
	L_integ        reduce using rule 30
	%eof           reduce using rule 30


State 68

	Expr2 -> 'pred' Expr3 .                             (rule 32)

	'('            reduce using rule 32
	')'            reduce using rule 32
	','            reduce using rule 32
	'0'            reduce using rule 32
	':'            reduce using rule 32
	';'            reduce using rule 32
	'else'         reduce using rule 32
	'false'        reduce using rule 32
	'in'           reduce using rule 32
	'iszero'       reduce using rule 32
	'pred'         reduce using rule 32
	'succ'         reduce using rule 32
	'then'         reduce using rule 32
	'true'         reduce using rule 32
	'}'            reduce using rule 32
	L_Ident        reduce using rule 32
	L_integ        reduce using rule 32
	%eof           reduce using rule 32


State 69

	Expr -> 'let' Expr . 'in' Expr                      (rule 20)

	'in'           shift, and enter state 81


State 70

	Expr2 -> 'iszero' Expr3 .                           (rule 33)

	'('            reduce using rule 33
	')'            reduce using rule 33
	','            reduce using rule 33
	'0'            reduce using rule 33
	':'            reduce using rule 33
	';'            reduce using rule 33
	'else'         reduce using rule 33
	'false'        reduce using rule 33
	'in'           reduce using rule 33
	'iszero'       reduce using rule 33
	'pred'         reduce using rule 33
	'succ'         reduce using rule 33
	'then'         reduce using rule 33
	'true'         reduce using rule 33
	'}'            reduce using rule 33
	L_Ident        reduce using rule 33
	L_integ        reduce using rule 33
	%eof           reduce using rule 33


State 71

	Expr -> 'if' Expr . 'then' Expr 'else' Expr         (rule 19)

	'then'         shift, and enter state 80


State 72

	Expr -> 'fun' '(' . Type ')' '{' 'return' Expr '}'    (rule 21)

	'('            shift, and enter state 39
	'Bool'         shift, and enter state 40
	'Nat'          shift, and enter state 41
	'{'            shift, and enter state 44

	Type           goto state 79
	Type1          goto state 43

State 73

	Expr3 -> '(' Expr . ')'                             (rule 40)

	')'            shift, and enter state 78


State 74

	Expr2 -> Expr3 '.' . Ident                          (rule 31)

	L_Ident        shift, and enter state 14

	Ident          goto state 77

State 75

	Typing -> Expr ':' . Type                           (rule 51)

	'('            shift, and enter state 39
	'Bool'         shift, and enter state 40
	'Nat'          shift, and enter state 41
	'{'            shift, and enter state 44

	Type           goto state 76
	Type1          goto state 43

State 76

	Typing -> Expr ':' Type .                           (rule 51)

	%eof           reduce using rule 51


State 77

	Expr2 -> Expr3 '.' Ident .                          (rule 31)

	'('            reduce using rule 31
	')'            reduce using rule 31
	','            reduce using rule 31
	'0'            reduce using rule 31
	':'            reduce using rule 31
	';'            reduce using rule 31
	'else'         reduce using rule 31
	'false'        reduce using rule 31
	'in'           reduce using rule 31
	'iszero'       reduce using rule 31
	'pred'         reduce using rule 31
	'succ'         reduce using rule 31
	'then'         reduce using rule 31
	'true'         reduce using rule 31
	'}'            reduce using rule 31
	L_Ident        reduce using rule 31
	L_integ        reduce using rule 31
	%eof           reduce using rule 31


State 78

	Expr3 -> '(' Expr ')' .                             (rule 40)

	'('            reduce using rule 40
	')'            reduce using rule 40
	','            reduce using rule 40
	'.'            reduce using rule 40
	'0'            reduce using rule 40
	':'            reduce using rule 40
	';'            reduce using rule 40
	'else'         reduce using rule 40
	'false'        reduce using rule 40
	'in'           reduce using rule 40
	'iszero'       reduce using rule 40
	'pred'         reduce using rule 40
	'succ'         reduce using rule 40
	'then'         reduce using rule 40
	'true'         reduce using rule 40
	'}'            reduce using rule 40
	L_Ident        reduce using rule 40
	L_integ        reduce using rule 40
	%eof           reduce using rule 40


State 79

	Expr -> 'fun' '(' Type . ')' '{' 'return' Expr '}'    (rule 21)

	')'            shift, and enter state 93


State 80

	Expr -> 'if' Expr 'then' . Expr 'else' Expr         (rule 19)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'fun'          shift, and enter state 25
	'if'           shift, and enter state 26
	'iszero'       shift, and enter state 27
	'let'          shift, and enter state 28
	'pred'         shift, and enter state 29
	'succ'         shift, and enter state 30
	'true'         shift, and enter state 31
	'{'            shift, and enter state 32
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33

	Ident          goto state 15
	Integer        goto state 16
	Expr           goto state 92
	Expr1          goto state 18
	Expr2          goto state 19
	Expr3          goto state 20

State 81

	Expr -> 'let' Expr 'in' . Expr                      (rule 20)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'fun'          shift, and enter state 25
	'if'           shift, and enter state 26
	'iszero'       shift, and enter state 27
	'let'          shift, and enter state 28
	'pred'         shift, and enter state 29
	'succ'         shift, and enter state 30
	'true'         shift, and enter state 31
	'{'            shift, and enter state 32
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33

	Ident          goto state 15
	Integer        goto state 16
	Expr           goto state 91
	Expr1          goto state 18
	Expr2          goto state 19
	Expr3          goto state 20

State 82

	Expr -> '{' ListBinding '}' .                       (rule 22)

	')'            reduce using rule 22
	','            reduce using rule 22
	':'            reduce using rule 22
	';'            reduce using rule 22
	'else'         reduce using rule 22
	'in'           reduce using rule 22
	'then'         reduce using rule 22
	'}'            reduce using rule 22
	%eof           reduce using rule 22


State 83

	FieldType -> Ident ':' Type .                       (rule 47)

	','            reduce using rule 47
	'}'            reduce using rule 47
	%eof           reduce using rule 47


State 84

	ListFieldType -> FieldType ',' ListFieldType .      (rule 50)

	'}'            reduce using rule 50
	%eof           reduce using rule 50


State 85

	Type1 -> '(' Type ')' .                             (rule 46)

	')'            reduce using rule 46
	','            reduce using rule 46
	'->'           reduce using rule 46
	'}'            reduce using rule 46
	%eof           reduce using rule 46


State 86

	Type -> Type1 '->' Type .                           (rule 41)

	')'            reduce using rule 41
	','            reduce using rule 41
	'}'            reduce using rule 41
	%eof           reduce using rule 41


State 87

	Type -> '{' ListFieldType '}' .                     (rule 42)

	')'            reduce using rule 42
	','            reduce using rule 42
	'}'            reduce using rule 42
	%eof           reduce using rule 42


State 88

	Binding -> Ident '=' Expr .                         (rule 24)

	','            reduce using rule 24
	'}'            reduce using rule 24
	%eof           reduce using rule 24


State 89

	ListBinding -> Binding ',' ListBinding .            (rule 27)

	'}'            reduce using rule 27
	%eof           reduce using rule 27


State 90

	ListExpr -> Expr ';' ListExpr .                     (rule 18)

	%eof           reduce using rule 18


State 91

	Expr -> 'let' Expr 'in' Expr .                      (rule 20)

	')'            reduce using rule 20
	','            reduce using rule 20
	':'            reduce using rule 20
	';'            reduce using rule 20
	'else'         reduce using rule 20
	'in'           reduce using rule 20
	'then'         reduce using rule 20
	'}'            reduce using rule 20
	%eof           reduce using rule 20


State 92

	Expr -> 'if' Expr 'then' Expr . 'else' Expr         (rule 19)

	'else'         shift, and enter state 95


State 93

	Expr -> 'fun' '(' Type ')' . '{' 'return' Expr '}'    (rule 21)

	'{'            shift, and enter state 94


State 94

	Expr -> 'fun' '(' Type ')' '{' . 'return' Expr '}'    (rule 21)

	'return'       shift, and enter state 97


State 95

	Expr -> 'if' Expr 'then' Expr 'else' . Expr         (rule 19)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'fun'          shift, and enter state 25
	'if'           shift, and enter state 26
	'iszero'       shift, and enter state 27
	'let'          shift, and enter state 28
	'pred'         shift, and enter state 29
	'succ'         shift, and enter state 30
	'true'         shift, and enter state 31
	'{'            shift, and enter state 32
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33

	Ident          goto state 15
	Integer        goto state 16
	Expr           goto state 96
	Expr1          goto state 18
	Expr2          goto state 19
	Expr3          goto state 20

State 96

	Expr -> 'if' Expr 'then' Expr 'else' Expr .         (rule 19)

	')'            reduce using rule 19
	','            reduce using rule 19
	':'            reduce using rule 19
	';'            reduce using rule 19
	'else'         reduce using rule 19
	'in'           reduce using rule 19
	'then'         reduce using rule 19
	'}'            reduce using rule 19
	%eof           reduce using rule 19


State 97

	Expr -> 'fun' '(' Type ')' '{' 'return' . Expr '}'    (rule 21)

	'('            shift, and enter state 22
	'0'            shift, and enter state 23
	'false'        shift, and enter state 24
	'fun'          shift, and enter state 25
	'if'           shift, and enter state 26
	'iszero'       shift, and enter state 27
	'let'          shift, and enter state 28
	'pred'         shift, and enter state 29
	'succ'         shift, and enter state 30
	'true'         shift, and enter state 31
	'{'            shift, and enter state 32
	L_Ident        shift, and enter state 14
	L_integ        shift, and enter state 33

	Ident          goto state 15
	Integer        goto state 16
	Expr           goto state 98
	Expr1          goto state 18
	Expr2          goto state 19
	Expr3          goto state 20

State 98

	Expr -> 'fun' '(' Type ')' '{' 'return' Expr . '}'    (rule 21)

	'}'            shift, and enter state 99


State 99

	Expr -> 'fun' '(' Type ')' '{' 'return' Expr '}' .    (rule 21)

	')'            reduce using rule 21
	','            reduce using rule 21
	':'            reduce using rule 21
	';'            reduce using rule 21
	'else'         reduce using rule 21
	'in'           reduce using rule 21
	'then'         reduce using rule 21
	'}'            reduce using rule 21
	%eof           reduce using rule 21


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 52
Number of terminals: 27
Number of non-terminals: 28
Number of states: 100
