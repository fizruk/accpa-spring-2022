-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Syntax/Normal/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pListExpr -> ListExpr                       (1)
	%start_pExpr -> Expr                               (2)
	%start_pBinding -> Binding                         (3)
	%start_pListBinding -> ListBinding                 (4)
	%start_pExpr1 -> Expr1                             (5)
	%start_pExpr2 -> Expr2                             (6)
	%start_pExpr3 -> Expr3                             (7)
	%start_pType -> Type                               (8)
	%start_pType1 -> Type1                             (9)
	%start_pFieldType -> FieldType                     (10)
	%start_pListFieldType -> ListFieldType             (11)
	%start_pTyping -> Typing                           (12)
	Ident -> L_Ident                                   (13)
	Program -> ListExpr                                (14)
	ListExpr ->                                        (15)
	ListExpr -> Expr                                   (16)
	ListExpr -> Expr ';' ListExpr                      (17)
	Expr -> 'if' Expr 'then' Expr 'else' Expr          (18)
	Expr -> 'let' Ident '=' Expr 'in' Expr             (19)
	Expr -> 'fun' '(' Ident ':' Type ')' '{' 'return' Expr '}'   (20)
	Expr -> '{' ListBinding '}'                        (21)
	Expr -> Expr1                                      (22)
	Binding -> Ident '=' Expr                          (23)
	ListBinding ->                                     (24)
	ListBinding -> Binding                             (25)
	ListBinding -> Binding ',' ListBinding             (26)
	Expr1 -> Expr1 Expr2                               (27)
	Expr1 -> Expr2                                     (28)
	Expr2 -> 'succ' Expr3                              (29)
	Expr2 -> 'pred' Expr3                              (30)
	Expr2 -> 'iszero' Expr3                            (31)
	Expr2 -> Expr3                                     (32)
	Expr3 -> Expr3 '.' Ident                           (33)
	Expr3 -> 'true'                                    (34)
	Expr3 -> 'false'                                   (35)
	Expr3 -> '0'                                       (36)
	Expr3 -> Ident                                     (37)
	Expr3 -> '(' Expr ')'                              (38)
	Type -> Type1 '->' Type                            (39)
	Type -> '{' ListFieldType '}'                      (40)
	Type -> Type1                                      (41)
	Type1 -> 'Bool'                                    (42)
	Type1 -> 'Nat'                                     (43)
	Type1 -> '(' Type ')'                              (44)
	FieldType -> Ident ':' Type                        (45)
	ListFieldType ->                                   (46)
	ListFieldType -> FieldType                         (47)
	ListFieldType -> FieldType ',' ListFieldType       (48)
	Typing -> Expr ':' Type                            (49)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	','            { PT _ (TS _ 3) }
	'->'           { PT _ (TS _ 4) }
	'.'            { PT _ (TS _ 5) }
	'0'            { PT _ (TS _ 6) }
	':'            { PT _ (TS _ 7) }
	';'            { PT _ (TS _ 8) }
	'='            { PT _ (TS _ 9) }
	'Bool'         { PT _ (TS _ 10) }
	'Nat'          { PT _ (TS _ 11) }
	'else'         { PT _ (TS _ 12) }
	'false'        { PT _ (TS _ 13) }
	'fun'          { PT _ (TS _ 14) }
	'if'           { PT _ (TS _ 15) }
	'in'           { PT _ (TS _ 16) }
	'iszero'       { PT _ (TS _ 17) }
	'let'          { PT _ (TS _ 18) }
	'pred'         { PT _ (TS _ 19) }
	'return'       { PT _ (TS _ 20) }
	'succ'         { PT _ (TS _ 21) }
	'then'         { PT _ (TS _ 22) }
	'true'         { PT _ (TS _ 23) }
	'{'            { PT _ (TS _ 24) }
	'}'            { PT _ (TS _ 25) }
	L_Ident        { PT _ (TV $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pListExpr rule  1
	%start_pExpr    rule  2
	%start_pBinding rule  3
	%start_pListBinding rule  4
	%start_pExpr1   rule  5
	%start_pExpr2   rule  6
	%start_pExpr3   rule  7
	%start_pType    rule  8
	%start_pType1   rule  9
	%start_pFieldType rule  10
	%start_pListFieldType rule  11
	%start_pTyping  rule  12
	Ident           rule  13
	Program         rule  14
	ListExpr        rules 15, 16, 17
	Expr            rules 18, 19, 20, 21, 22
	Binding         rule  23
	ListBinding     rules 24, 25, 26
	Expr1           rules 27, 28
	Expr2           rules 29, 30, 31, 32
	Expr3           rules 33, 34, 35, 36, 37, 38
	Type            rules 39, 40, 41
	Type1           rules 42, 43, 44
	FieldType       rule  45
	ListFieldType   rules 46, 47, 48
	Typing          rule  49

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'fun'          shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 26
	'let'          shift, and enter state 27
	'pred'         shift, and enter state 28
	'succ'         shift, and enter state 29
	'true'         shift, and enter state 30
	'{'            shift, and enter state 31
	L_Ident        shift, and enter state 14
	%eof           reduce using rule 15

	Ident          goto state 15
	Program        goto state 53
	ListExpr       goto state 54
	Expr           goto state 52
	Expr1          goto state 17
	Expr2          goto state 18
	Expr3          goto state 19

State 1

	%start_pListExpr -> . ListExpr                      (rule 1)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'fun'          shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 26
	'let'          shift, and enter state 27
	'pred'         shift, and enter state 28
	'succ'         shift, and enter state 29
	'true'         shift, and enter state 30
	'{'            shift, and enter state 31
	L_Ident        shift, and enter state 14
	%eof           reduce using rule 15

	Ident          goto state 15
	ListExpr       goto state 51
	Expr           goto state 52
	Expr1          goto state 17
	Expr2          goto state 18
	Expr3          goto state 19

State 2

	%start_pExpr -> . Expr                              (rule 2)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'fun'          shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 26
	'let'          shift, and enter state 27
	'pred'         shift, and enter state 28
	'succ'         shift, and enter state 29
	'true'         shift, and enter state 30
	'{'            shift, and enter state 31
	L_Ident        shift, and enter state 14

	Ident          goto state 15
	Expr           goto state 50
	Expr1          goto state 17
	Expr2          goto state 18
	Expr3          goto state 19

State 3

	%start_pBinding -> . Binding                        (rule 3)

	L_Ident        shift, and enter state 14

	Ident          goto state 46
	Binding        goto state 49

State 4

	%start_pListBinding -> . ListBinding                (rule 4)

	L_Ident        shift, and enter state 14
	%eof           reduce using rule 24

	Ident          goto state 46
	Binding        goto state 47
	ListBinding    goto state 48

State 5

	%start_pExpr1 -> . Expr1                            (rule 5)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'iszero'       shift, and enter state 26
	'pred'         shift, and enter state 28
	'succ'         shift, and enter state 29
	'true'         shift, and enter state 30
	L_Ident        shift, and enter state 14

	Ident          goto state 15
	Expr1          goto state 45
	Expr2          goto state 18
	Expr3          goto state 19

State 6

	%start_pExpr2 -> . Expr2                            (rule 6)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'iszero'       shift, and enter state 26
	'pred'         shift, and enter state 28
	'succ'         shift, and enter state 29
	'true'         shift, and enter state 30
	L_Ident        shift, and enter state 14

	Ident          goto state 15
	Expr2          goto state 44
	Expr3          goto state 19

State 7

	%start_pExpr3 -> . Expr3                            (rule 7)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'true'         shift, and enter state 30
	L_Ident        shift, and enter state 14

	Ident          goto state 15
	Expr3          goto state 43

State 8

	%start_pType -> . Type                              (rule 8)

	'('            shift, and enter state 37
	'Bool'         shift, and enter state 38
	'Nat'          shift, and enter state 39
	'{'            shift, and enter state 42

	Type           goto state 40
	Type1          goto state 41

State 9

	%start_pType1 -> . Type1                            (rule 9)

	'('            shift, and enter state 37
	'Bool'         shift, and enter state 38
	'Nat'          shift, and enter state 39

	Type1          goto state 36

State 10

	%start_pFieldType -> . FieldType                    (rule 10)

	L_Ident        shift, and enter state 14

	Ident          goto state 32
	FieldType      goto state 35

State 11

	%start_pListFieldType -> . ListFieldType            (rule 11)

	L_Ident        shift, and enter state 14
	%eof           reduce using rule 46

	Ident          goto state 32
	FieldType      goto state 33
	ListFieldType  goto state 34

State 12

	%start_pTyping -> . Typing                          (rule 12)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'fun'          shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 26
	'let'          shift, and enter state 27
	'pred'         shift, and enter state 28
	'succ'         shift, and enter state 29
	'true'         shift, and enter state 30
	'{'            shift, and enter state 31
	L_Ident        shift, and enter state 14

	Ident          goto state 15
	Expr           goto state 16
	Expr1          goto state 17
	Expr2          goto state 18
	Expr3          goto state 19
	Typing         goto state 20

State 13

	Ident -> . L_Ident                                  (rule 13)

	L_Ident        shift, and enter state 14


State 14

	Ident -> L_Ident .                                  (rule 13)

	'('            reduce using rule 13
	')'            reduce using rule 13
	','            reduce using rule 13
	'.'            reduce using rule 13
	'0'            reduce using rule 13
	':'            reduce using rule 13
	';'            reduce using rule 13
	'='            reduce using rule 13
	'else'         reduce using rule 13
	'false'        reduce using rule 13
	'in'           reduce using rule 13
	'iszero'       reduce using rule 13
	'pred'         reduce using rule 13
	'succ'         reduce using rule 13
	'then'         reduce using rule 13
	'true'         reduce using rule 13
	'}'            reduce using rule 13
	L_Ident        reduce using rule 13
	%eof           reduce using rule 13


State 15

	Expr3 -> Ident .                                    (rule 37)

	'('            reduce using rule 37
	')'            reduce using rule 37
	','            reduce using rule 37
	'.'            reduce using rule 37
	'0'            reduce using rule 37
	':'            reduce using rule 37
	';'            reduce using rule 37
	'else'         reduce using rule 37
	'false'        reduce using rule 37
	'in'           reduce using rule 37
	'iszero'       reduce using rule 37
	'pred'         reduce using rule 37
	'succ'         reduce using rule 37
	'then'         reduce using rule 37
	'true'         reduce using rule 37
	'}'            reduce using rule 37
	L_Ident        reduce using rule 37
	%eof           reduce using rule 37


State 16

	Typing -> Expr . ':' Type                           (rule 49)

	':'            shift, and enter state 73


State 17

	Expr -> Expr1 .                                     (rule 22)
	Expr1 -> Expr1 . Expr2                              (rule 27)

	'('            shift, and enter state 21
	')'            reduce using rule 22
	','            reduce using rule 22
	'0'            shift, and enter state 22
	':'            reduce using rule 22
	';'            reduce using rule 22
	'else'         reduce using rule 22
	'false'        shift, and enter state 23
	'in'           reduce using rule 22
	'iszero'       shift, and enter state 26
	'pred'         shift, and enter state 28
	'succ'         shift, and enter state 29
	'then'         reduce using rule 22
	'true'         shift, and enter state 30
	'}'            reduce using rule 22
	L_Ident        shift, and enter state 14
	%eof           reduce using rule 22

	Ident          goto state 15
	Expr2          goto state 58
	Expr3          goto state 19

State 18

	Expr1 -> Expr2 .                                    (rule 28)

	'('            reduce using rule 28
	')'            reduce using rule 28
	','            reduce using rule 28
	'0'            reduce using rule 28
	':'            reduce using rule 28
	';'            reduce using rule 28
	'else'         reduce using rule 28
	'false'        reduce using rule 28
	'in'           reduce using rule 28
	'iszero'       reduce using rule 28
	'pred'         reduce using rule 28
	'succ'         reduce using rule 28
	'then'         reduce using rule 28
	'true'         reduce using rule 28
	'}'            reduce using rule 28
	L_Ident        reduce using rule 28
	%eof           reduce using rule 28


State 19

	Expr2 -> Expr3 .                                    (rule 32)
	Expr3 -> Expr3 . '.' Ident                          (rule 33)

	'('            reduce using rule 32
	')'            reduce using rule 32
	','            reduce using rule 32
	'.'            shift, and enter state 59
	'0'            reduce using rule 32
	':'            reduce using rule 32
	';'            reduce using rule 32
	'else'         reduce using rule 32
	'false'        reduce using rule 32
	'in'           reduce using rule 32
	'iszero'       reduce using rule 32
	'pred'         reduce using rule 32
	'succ'         reduce using rule 32
	'then'         reduce using rule 32
	'true'         reduce using rule 32
	'}'            reduce using rule 32
	L_Ident        reduce using rule 32
	%eof           reduce using rule 32


State 20

	%start_pTyping -> Typing .                          (rule 12)

	%eof           accept


State 21

	Expr3 -> '(' . Expr ')'                             (rule 38)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'fun'          shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 26
	'let'          shift, and enter state 27
	'pred'         shift, and enter state 28
	'succ'         shift, and enter state 29
	'true'         shift, and enter state 30
	'{'            shift, and enter state 31
	L_Ident        shift, and enter state 14

	Ident          goto state 15
	Expr           goto state 72
	Expr1          goto state 17
	Expr2          goto state 18
	Expr3          goto state 19

State 22

	Expr3 -> '0' .                                      (rule 36)

	'('            reduce using rule 36
	')'            reduce using rule 36
	','            reduce using rule 36
	'.'            reduce using rule 36
	'0'            reduce using rule 36
	':'            reduce using rule 36
	';'            reduce using rule 36
	'else'         reduce using rule 36
	'false'        reduce using rule 36
	'in'           reduce using rule 36
	'iszero'       reduce using rule 36
	'pred'         reduce using rule 36
	'succ'         reduce using rule 36
	'then'         reduce using rule 36
	'true'         reduce using rule 36
	'}'            reduce using rule 36
	L_Ident        reduce using rule 36
	%eof           reduce using rule 36


State 23

	Expr3 -> 'false' .                                  (rule 35)

	'('            reduce using rule 35
	')'            reduce using rule 35
	','            reduce using rule 35
	'.'            reduce using rule 35
	'0'            reduce using rule 35
	':'            reduce using rule 35
	';'            reduce using rule 35
	'else'         reduce using rule 35
	'false'        reduce using rule 35
	'in'           reduce using rule 35
	'iszero'       reduce using rule 35
	'pred'         reduce using rule 35
	'succ'         reduce using rule 35
	'then'         reduce using rule 35
	'true'         reduce using rule 35
	'}'            reduce using rule 35
	L_Ident        reduce using rule 35
	%eof           reduce using rule 35


State 24

	Expr -> 'fun' . '(' Ident ':' Type ')' '{' 'return' Expr '}'    (rule 20)

	'('            shift, and enter state 71


State 25

	Expr -> 'if' . Expr 'then' Expr 'else' Expr         (rule 18)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'fun'          shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 26
	'let'          shift, and enter state 27
	'pred'         shift, and enter state 28
	'succ'         shift, and enter state 29
	'true'         shift, and enter state 30
	'{'            shift, and enter state 31
	L_Ident        shift, and enter state 14

	Ident          goto state 15
	Expr           goto state 70
	Expr1          goto state 17
	Expr2          goto state 18
	Expr3          goto state 19

State 26

	Expr2 -> 'iszero' . Expr3                           (rule 31)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'true'         shift, and enter state 30
	L_Ident        shift, and enter state 14

	Ident          goto state 15
	Expr3          goto state 69

State 27

	Expr -> 'let' . Ident '=' Expr 'in' Expr            (rule 19)

	L_Ident        shift, and enter state 14

	Ident          goto state 68

State 28

	Expr2 -> 'pred' . Expr3                             (rule 30)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'true'         shift, and enter state 30
	L_Ident        shift, and enter state 14

	Ident          goto state 15
	Expr3          goto state 67

State 29

	Expr2 -> 'succ' . Expr3                             (rule 29)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'true'         shift, and enter state 30
	L_Ident        shift, and enter state 14

	Ident          goto state 15
	Expr3          goto state 66

State 30

	Expr3 -> 'true' .                                   (rule 34)

	'('            reduce using rule 34
	')'            reduce using rule 34
	','            reduce using rule 34
	'.'            reduce using rule 34
	'0'            reduce using rule 34
	':'            reduce using rule 34
	';'            reduce using rule 34
	'else'         reduce using rule 34
	'false'        reduce using rule 34
	'in'           reduce using rule 34
	'iszero'       reduce using rule 34
	'pred'         reduce using rule 34
	'succ'         reduce using rule 34
	'then'         reduce using rule 34
	'true'         reduce using rule 34
	'}'            reduce using rule 34
	L_Ident        reduce using rule 34
	%eof           reduce using rule 34


State 31

	Expr -> '{' . ListBinding '}'                       (rule 21)

	'}'            reduce using rule 24
	L_Ident        shift, and enter state 14

	Ident          goto state 46
	Binding        goto state 47
	ListBinding    goto state 65

State 32

	FieldType -> Ident . ':' Type                       (rule 45)

	':'            shift, and enter state 64


State 33

	ListFieldType -> FieldType .                        (rule 47)
	ListFieldType -> FieldType . ',' ListFieldType      (rule 48)

	','            shift, and enter state 63
	'}'            reduce using rule 47
	%eof           reduce using rule 47


State 34

	%start_pListFieldType -> ListFieldType .            (rule 11)

	%eof           accept


State 35

	%start_pFieldType -> FieldType .                    (rule 10)

	%eof           accept


State 36

	%start_pType1 -> Type1 .                            (rule 9)

	%eof           accept


State 37

	Type1 -> '(' . Type ')'                             (rule 44)

	'('            shift, and enter state 37
	'Bool'         shift, and enter state 38
	'Nat'          shift, and enter state 39
	'{'            shift, and enter state 42

	Type           goto state 62
	Type1          goto state 41

State 38

	Type1 -> 'Bool' .                                   (rule 42)

	')'            reduce using rule 42
	','            reduce using rule 42
	'->'           reduce using rule 42
	'}'            reduce using rule 42
	%eof           reduce using rule 42


State 39

	Type1 -> 'Nat' .                                    (rule 43)

	')'            reduce using rule 43
	','            reduce using rule 43
	'->'           reduce using rule 43
	'}'            reduce using rule 43
	%eof           reduce using rule 43


State 40

	%start_pType -> Type .                              (rule 8)

	%eof           accept


State 41

	Type -> Type1 . '->' Type                           (rule 39)
	Type -> Type1 .                                     (rule 41)

	')'            reduce using rule 41
	','            reduce using rule 41
	'->'           shift, and enter state 61
	'}'            reduce using rule 41
	%eof           reduce using rule 41


State 42

	Type -> '{' . ListFieldType '}'                     (rule 40)

	'}'            reduce using rule 46
	L_Ident        shift, and enter state 14

	Ident          goto state 32
	FieldType      goto state 33
	ListFieldType  goto state 60

State 43

	%start_pExpr3 -> Expr3 .                            (rule 7)
	Expr3 -> Expr3 . '.' Ident                          (rule 33)

	'.'            shift, and enter state 59
	%eof           accept


State 44

	%start_pExpr2 -> Expr2 .                            (rule 6)

	%eof           accept


State 45

	%start_pExpr1 -> Expr1 .                            (rule 5)
	Expr1 -> Expr1 . Expr2                              (rule 27)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'iszero'       shift, and enter state 26
	'pred'         shift, and enter state 28
	'succ'         shift, and enter state 29
	'true'         shift, and enter state 30
	L_Ident        shift, and enter state 14
	%eof           accept

	Ident          goto state 15
	Expr2          goto state 58
	Expr3          goto state 19

State 46

	Binding -> Ident . '=' Expr                         (rule 23)

	'='            shift, and enter state 57


State 47

	ListBinding -> Binding .                            (rule 25)
	ListBinding -> Binding . ',' ListBinding            (rule 26)

	','            shift, and enter state 56
	'}'            reduce using rule 25
	%eof           reduce using rule 25


State 48

	%start_pListBinding -> ListBinding .                (rule 4)

	%eof           accept


State 49

	%start_pBinding -> Binding .                        (rule 3)

	%eof           accept


State 50

	%start_pExpr -> Expr .                              (rule 2)

	%eof           accept


State 51

	%start_pListExpr -> ListExpr .                      (rule 1)

	%eof           accept


State 52

	ListExpr -> Expr .                                  (rule 16)
	ListExpr -> Expr . ';' ListExpr                     (rule 17)

	';'            shift, and enter state 55
	%eof           reduce using rule 16


State 53

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 54

	Program -> ListExpr .                               (rule 14)

	%eof           reduce using rule 14


State 55

	ListExpr -> Expr ';' . ListExpr                     (rule 17)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'fun'          shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 26
	'let'          shift, and enter state 27
	'pred'         shift, and enter state 28
	'succ'         shift, and enter state 29
	'true'         shift, and enter state 30
	'{'            shift, and enter state 31
	L_Ident        shift, and enter state 14
	%eof           reduce using rule 15

	Ident          goto state 15
	ListExpr       goto state 88
	Expr           goto state 52
	Expr1          goto state 17
	Expr2          goto state 18
	Expr3          goto state 19

State 56

	ListBinding -> Binding ',' . ListBinding            (rule 26)

	'}'            reduce using rule 24
	L_Ident        shift, and enter state 14
	%eof           reduce using rule 24

	Ident          goto state 46
	Binding        goto state 47
	ListBinding    goto state 87

State 57

	Binding -> Ident '=' . Expr                         (rule 23)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'fun'          shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 26
	'let'          shift, and enter state 27
	'pred'         shift, and enter state 28
	'succ'         shift, and enter state 29
	'true'         shift, and enter state 30
	'{'            shift, and enter state 31
	L_Ident        shift, and enter state 14

	Ident          goto state 15
	Expr           goto state 86
	Expr1          goto state 17
	Expr2          goto state 18
	Expr3          goto state 19

State 58

	Expr1 -> Expr1 Expr2 .                              (rule 27)

	'('            reduce using rule 27
	')'            reduce using rule 27
	','            reduce using rule 27
	'0'            reduce using rule 27
	':'            reduce using rule 27
	';'            reduce using rule 27
	'else'         reduce using rule 27
	'false'        reduce using rule 27
	'in'           reduce using rule 27
	'iszero'       reduce using rule 27
	'pred'         reduce using rule 27
	'succ'         reduce using rule 27
	'then'         reduce using rule 27
	'true'         reduce using rule 27
	'}'            reduce using rule 27
	L_Ident        reduce using rule 27
	%eof           reduce using rule 27


State 59

	Expr3 -> Expr3 '.' . Ident                          (rule 33)

	L_Ident        shift, and enter state 14

	Ident          goto state 85

State 60

	Type -> '{' ListFieldType . '}'                     (rule 40)

	'}'            shift, and enter state 84


State 61

	Type -> Type1 '->' . Type                           (rule 39)

	'('            shift, and enter state 37
	'Bool'         shift, and enter state 38
	'Nat'          shift, and enter state 39
	'{'            shift, and enter state 42

	Type           goto state 83
	Type1          goto state 41

State 62

	Type1 -> '(' Type . ')'                             (rule 44)

	')'            shift, and enter state 82


State 63

	ListFieldType -> FieldType ',' . ListFieldType      (rule 48)

	'}'            reduce using rule 46
	L_Ident        shift, and enter state 14
	%eof           reduce using rule 46

	Ident          goto state 32
	FieldType      goto state 33
	ListFieldType  goto state 81

State 64

	FieldType -> Ident ':' . Type                       (rule 45)

	'('            shift, and enter state 37
	'Bool'         shift, and enter state 38
	'Nat'          shift, and enter state 39
	'{'            shift, and enter state 42

	Type           goto state 80
	Type1          goto state 41

State 65

	Expr -> '{' ListBinding . '}'                       (rule 21)

	'}'            shift, and enter state 79


State 66

	Expr2 -> 'succ' Expr3 .                             (rule 29)
	Expr3 -> Expr3 . '.' Ident                          (rule 33)

	'('            reduce using rule 29
	')'            reduce using rule 29
	','            reduce using rule 29
	'.'            shift, and enter state 59
	'0'            reduce using rule 29
	':'            reduce using rule 29
	';'            reduce using rule 29
	'else'         reduce using rule 29
	'false'        reduce using rule 29
	'in'           reduce using rule 29
	'iszero'       reduce using rule 29
	'pred'         reduce using rule 29
	'succ'         reduce using rule 29
	'then'         reduce using rule 29
	'true'         reduce using rule 29
	'}'            reduce using rule 29
	L_Ident        reduce using rule 29
	%eof           reduce using rule 29


State 67

	Expr2 -> 'pred' Expr3 .                             (rule 30)
	Expr3 -> Expr3 . '.' Ident                          (rule 33)

	'('            reduce using rule 30
	')'            reduce using rule 30
	','            reduce using rule 30
	'.'            shift, and enter state 59
	'0'            reduce using rule 30
	':'            reduce using rule 30
	';'            reduce using rule 30
	'else'         reduce using rule 30
	'false'        reduce using rule 30
	'in'           reduce using rule 30
	'iszero'       reduce using rule 30
	'pred'         reduce using rule 30
	'succ'         reduce using rule 30
	'then'         reduce using rule 30
	'true'         reduce using rule 30
	'}'            reduce using rule 30
	L_Ident        reduce using rule 30
	%eof           reduce using rule 30


State 68

	Expr -> 'let' Ident . '=' Expr 'in' Expr            (rule 19)

	'='            shift, and enter state 78


State 69

	Expr2 -> 'iszero' Expr3 .                           (rule 31)
	Expr3 -> Expr3 . '.' Ident                          (rule 33)

	'('            reduce using rule 31
	')'            reduce using rule 31
	','            reduce using rule 31
	'.'            shift, and enter state 59
	'0'            reduce using rule 31
	':'            reduce using rule 31
	';'            reduce using rule 31
	'else'         reduce using rule 31
	'false'        reduce using rule 31
	'in'           reduce using rule 31
	'iszero'       reduce using rule 31
	'pred'         reduce using rule 31
	'succ'         reduce using rule 31
	'then'         reduce using rule 31
	'true'         reduce using rule 31
	'}'            reduce using rule 31
	L_Ident        reduce using rule 31
	%eof           reduce using rule 31


State 70

	Expr -> 'if' Expr . 'then' Expr 'else' Expr         (rule 18)

	'then'         shift, and enter state 77


State 71

	Expr -> 'fun' '(' . Ident ':' Type ')' '{' 'return' Expr '}'    (rule 20)

	L_Ident        shift, and enter state 14

	Ident          goto state 76

State 72

	Expr3 -> '(' Expr . ')'                             (rule 38)

	')'            shift, and enter state 75


State 73

	Typing -> Expr ':' . Type                           (rule 49)

	'('            shift, and enter state 37
	'Bool'         shift, and enter state 38
	'Nat'          shift, and enter state 39
	'{'            shift, and enter state 42

	Type           goto state 74
	Type1          goto state 41

State 74

	Typing -> Expr ':' Type .                           (rule 49)

	%eof           reduce using rule 49


State 75

	Expr3 -> '(' Expr ')' .                             (rule 38)

	'('            reduce using rule 38
	')'            reduce using rule 38
	','            reduce using rule 38
	'.'            reduce using rule 38
	'0'            reduce using rule 38
	':'            reduce using rule 38
	';'            reduce using rule 38
	'else'         reduce using rule 38
	'false'        reduce using rule 38
	'in'           reduce using rule 38
	'iszero'       reduce using rule 38
	'pred'         reduce using rule 38
	'succ'         reduce using rule 38
	'then'         reduce using rule 38
	'true'         reduce using rule 38
	'}'            reduce using rule 38
	L_Ident        reduce using rule 38
	%eof           reduce using rule 38


State 76

	Expr -> 'fun' '(' Ident . ':' Type ')' '{' 'return' Expr '}'    (rule 20)

	':'            shift, and enter state 91


State 77

	Expr -> 'if' Expr 'then' . Expr 'else' Expr         (rule 18)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'fun'          shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 26
	'let'          shift, and enter state 27
	'pred'         shift, and enter state 28
	'succ'         shift, and enter state 29
	'true'         shift, and enter state 30
	'{'            shift, and enter state 31
	L_Ident        shift, and enter state 14

	Ident          goto state 15
	Expr           goto state 90
	Expr1          goto state 17
	Expr2          goto state 18
	Expr3          goto state 19

State 78

	Expr -> 'let' Ident '=' . Expr 'in' Expr            (rule 19)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'fun'          shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 26
	'let'          shift, and enter state 27
	'pred'         shift, and enter state 28
	'succ'         shift, and enter state 29
	'true'         shift, and enter state 30
	'{'            shift, and enter state 31
	L_Ident        shift, and enter state 14

	Ident          goto state 15
	Expr           goto state 89
	Expr1          goto state 17
	Expr2          goto state 18
	Expr3          goto state 19

State 79

	Expr -> '{' ListBinding '}' .                       (rule 21)

	')'            reduce using rule 21
	','            reduce using rule 21
	':'            reduce using rule 21
	';'            reduce using rule 21
	'else'         reduce using rule 21
	'in'           reduce using rule 21
	'then'         reduce using rule 21
	'}'            reduce using rule 21
	%eof           reduce using rule 21


State 80

	FieldType -> Ident ':' Type .                       (rule 45)

	','            reduce using rule 45
	'}'            reduce using rule 45
	%eof           reduce using rule 45


State 81

	ListFieldType -> FieldType ',' ListFieldType .      (rule 48)

	'}'            reduce using rule 48
	%eof           reduce using rule 48


State 82

	Type1 -> '(' Type ')' .                             (rule 44)

	')'            reduce using rule 44
	','            reduce using rule 44
	'->'           reduce using rule 44
	'}'            reduce using rule 44
	%eof           reduce using rule 44


State 83

	Type -> Type1 '->' Type .                           (rule 39)

	')'            reduce using rule 39
	','            reduce using rule 39
	'}'            reduce using rule 39
	%eof           reduce using rule 39


State 84

	Type -> '{' ListFieldType '}' .                     (rule 40)

	')'            reduce using rule 40
	','            reduce using rule 40
	'}'            reduce using rule 40
	%eof           reduce using rule 40


State 85

	Expr3 -> Expr3 '.' Ident .                          (rule 33)

	'('            reduce using rule 33
	')'            reduce using rule 33
	','            reduce using rule 33
	'.'            reduce using rule 33
	'0'            reduce using rule 33
	':'            reduce using rule 33
	';'            reduce using rule 33
	'else'         reduce using rule 33
	'false'        reduce using rule 33
	'in'           reduce using rule 33
	'iszero'       reduce using rule 33
	'pred'         reduce using rule 33
	'succ'         reduce using rule 33
	'then'         reduce using rule 33
	'true'         reduce using rule 33
	'}'            reduce using rule 33
	L_Ident        reduce using rule 33
	%eof           reduce using rule 33


State 86

	Binding -> Ident '=' Expr .                         (rule 23)

	','            reduce using rule 23
	'}'            reduce using rule 23
	%eof           reduce using rule 23


State 87

	ListBinding -> Binding ',' ListBinding .            (rule 26)

	'}'            reduce using rule 26
	%eof           reduce using rule 26


State 88

	ListExpr -> Expr ';' ListExpr .                     (rule 17)

	%eof           reduce using rule 17


State 89

	Expr -> 'let' Ident '=' Expr . 'in' Expr            (rule 19)

	'in'           shift, and enter state 94


State 90

	Expr -> 'if' Expr 'then' Expr . 'else' Expr         (rule 18)

	'else'         shift, and enter state 93


State 91

	Expr -> 'fun' '(' Ident ':' . Type ')' '{' 'return' Expr '}'    (rule 20)

	'('            shift, and enter state 37
	'Bool'         shift, and enter state 38
	'Nat'          shift, and enter state 39
	'{'            shift, and enter state 42

	Type           goto state 92
	Type1          goto state 41

State 92

	Expr -> 'fun' '(' Ident ':' Type . ')' '{' 'return' Expr '}'    (rule 20)

	')'            shift, and enter state 97


State 93

	Expr -> 'if' Expr 'then' Expr 'else' . Expr         (rule 18)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'fun'          shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 26
	'let'          shift, and enter state 27
	'pred'         shift, and enter state 28
	'succ'         shift, and enter state 29
	'true'         shift, and enter state 30
	'{'            shift, and enter state 31
	L_Ident        shift, and enter state 14

	Ident          goto state 15
	Expr           goto state 96
	Expr1          goto state 17
	Expr2          goto state 18
	Expr3          goto state 19

State 94

	Expr -> 'let' Ident '=' Expr 'in' . Expr            (rule 19)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'fun'          shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 26
	'let'          shift, and enter state 27
	'pred'         shift, and enter state 28
	'succ'         shift, and enter state 29
	'true'         shift, and enter state 30
	'{'            shift, and enter state 31
	L_Ident        shift, and enter state 14

	Ident          goto state 15
	Expr           goto state 95
	Expr1          goto state 17
	Expr2          goto state 18
	Expr3          goto state 19

State 95

	Expr -> 'let' Ident '=' Expr 'in' Expr .            (rule 19)

	')'            reduce using rule 19
	','            reduce using rule 19
	':'            reduce using rule 19
	';'            reduce using rule 19
	'else'         reduce using rule 19
	'in'           reduce using rule 19
	'then'         reduce using rule 19
	'}'            reduce using rule 19
	%eof           reduce using rule 19


State 96

	Expr -> 'if' Expr 'then' Expr 'else' Expr .         (rule 18)

	')'            reduce using rule 18
	','            reduce using rule 18
	':'            reduce using rule 18
	';'            reduce using rule 18
	'else'         reduce using rule 18
	'in'           reduce using rule 18
	'then'         reduce using rule 18
	'}'            reduce using rule 18
	%eof           reduce using rule 18


State 97

	Expr -> 'fun' '(' Ident ':' Type ')' . '{' 'return' Expr '}'    (rule 20)

	'{'            shift, and enter state 98


State 98

	Expr -> 'fun' '(' Ident ':' Type ')' '{' . 'return' Expr '}'    (rule 20)

	'return'       shift, and enter state 99


State 99

	Expr -> 'fun' '(' Ident ':' Type ')' '{' 'return' . Expr '}'    (rule 20)

	'('            shift, and enter state 21
	'0'            shift, and enter state 22
	'false'        shift, and enter state 23
	'fun'          shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 26
	'let'          shift, and enter state 27
	'pred'         shift, and enter state 28
	'succ'         shift, and enter state 29
	'true'         shift, and enter state 30
	'{'            shift, and enter state 31
	L_Ident        shift, and enter state 14

	Ident          goto state 15
	Expr           goto state 100
	Expr1          goto state 17
	Expr2          goto state 18
	Expr3          goto state 19

State 100

	Expr -> 'fun' '(' Ident ':' Type ')' '{' 'return' Expr . '}'    (rule 20)

	'}'            shift, and enter state 101


State 101

	Expr -> 'fun' '(' Ident ':' Type ')' '{' 'return' Expr '}' .    (rule 20)

	')'            reduce using rule 20
	','            reduce using rule 20
	':'            reduce using rule 20
	';'            reduce using rule 20
	'else'         reduce using rule 20
	'in'           reduce using rule 20
	'then'         reduce using rule 20
	'}'            reduce using rule 20
	%eof           reduce using rule 20


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 50
Number of terminals: 26
Number of non-terminals: 27
Number of states: 102
